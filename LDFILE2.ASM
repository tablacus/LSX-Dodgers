
;	LSX-Dodgers FILE2

				;Write random block
_SYS26:		;(BDOS)ランダムブロック書き込み
	XOR	A
	LD	(DRDN1),A	;NOP
	LD	(LEFT+1),HL	;HL←書き込むレコード数
	LD	(LEFTX),HL
	CALL	SETDRV

	CALL	RBX0
	JP	C,RBWERR
	CALL	WOPEN
	JP	C,RBWERR
	LD	A,H
	OR	L
	JP	Z,RBW1

	DEC	HL

	CALL	GET_RR_BCDE	;BCDE=Random record

	ADD	HL,DE		;BCHL=HL+BCDE
	JR	NC,S26X1	;
	INC	BC		;
S26X1:
	CALL	RWXR
	CALL	C,WRDFX
	JP	C,RBWERR

	CALL	RBX2
	JR	Z,RBWB		;NZ=セクタ以下の端数がある
	CALL	RBXA
	JR	C,RBWERR
	EX	DE,HL
	PUSH	BC
	LDIR
	LD	(DTAX),HL

	CALL	SWTDBF		;バッファデータは更新された

	LD	HL,(LEFTX)
	POP	DE
	SBC	HL,DE
	LD	(LEFTX),HL
	JR	Z,RBWEND

RBWB:
	CALL	RBXB
	JR	Z,RBWC
RBWB1:
	PUSH	BC
	PUSH	DE
	CALL	CLUSTX
	CALL	DWTC
	POP	DE
	POP	BC
	JR	C,RBWERR
	CALL	GNCLX
	JR	C,RBWERR
	DJNZ	RBWB1
	CALL	DRW_FLUSH
RBWC:
	CALL	RBXC
	JR	Z,RBWEND
	PUSH	BC
	CALL	CLUSTX
	CALL	DRDN
	POP	BC
	JR	C,RBWERR
	LD	DE,(_DTBUF)
	LDIR
	CALL	SWTDBF		;バッファデータは更新された
RBWEND:
	CALL	RBXEND

	CALL	RBX1
	JR	NC,RBW1
	LD	HL,(LEFT+1)
	LD	E,(IY+16)	;(FCB)ファイルのサイズ(バイト単位)
	LD	D,(IY+17)	;DE=File size
	ADD	HL,DE
	LD	(IY+16),L	;(FCB)ファイルのサイズ(バイト単位)
	LD	(IY+17),H
	JR	NC,RBW1
	INC	(IY+18)
	JR	NZ,RBW1
	INC	(IY+19)
RBW1:
	POP	IY
	POP	BC
	POP	DE
	POP	HL
DD_NUL:
	XOR	A
DRDF0:
DWTF0:
	RET

RBWERR:
	PUSH	IY
	POP	DE
	LD	HL,(STABLE+2*010H)
	CALL	JP_HL
RBRERR1:
	LD	A,001H
RBRERR2:
	POP	IY
	POP	BC
	POP	DE
	POP	HL
	SCF
	LD	HL,0
	RET

RBRERR:
	LD	A,0FFH
	JR	RBRERR2

RBRFL:
RBRFLP:	LD	A,000H
	CP	00DH
	JR	NZ,RBRFL1
	PUSH	DE
	LD	E,00AH
	JR	RBRFL2
RBRFL1:
	PUSH	DE
	CALL	_SYS07
	LD	E,A
RBRFL2:
	CALL	_PRINT
	LD	A,E
	POP	DE
	LD	(RBRFLP+1),A
	RET
DDX:
	LD	A,(IY+1)	;(FCB)主ファイル名
	CALL	CAP
	CP	'A'
	RET

				;Read random block
_SYS27:		;(BDOS)ランダムブロック読み込み
	LD	(LEFTX),HL
	CALL	SETDRV

	BIT	4,(IY+13)	;(FCB)属性(アトリビュート)
	JP	NZ,RBRDIR	;ディレクトリ
	CALL	RBX0
	JP	C,RBRERR
	CALL	RBX1
	JP	C,RBRERR1
	EX	DE,HL
	SBC	HL,DE		;CP 00HL,BCDE
	ADD	HL,DE
	LD	A,C
	SBC	A,0
	LD	A,B
	SBC	A,0
	JR	C,RBR1
	EX	DE,HL
RBR1:
	SBC	A,A
	AND	1
	LD	(RBRAP+1),A

	LD	A,H
	OR	L
	JR	Z,RBREND0

	LD	(LEFT+1),HL	;Read record byte
	LD	(LEFTX),HL

	CALL	RBX2
	JR	Z,RBRB
	CALL	RBXA
	JP	C,RBRERR
	PUSH	BC
	LDIR
	LD	(DTAX),DE
	LD	HL,(LEFTX)
	POP	DE
	AND	A
	SBC	HL,DE
	LD	(LEFTX),HL
	JR	Z,RBREND

RBRB:
	CALL	RBXB
	JR	Z,RBRC
RBRB1:
	PUSH	BC
	PUSH	DE
	CALL	CLUSTX
	CALL	DRDC
	POP	DE
	POP	BC
	CALL	NC,GNCLX
	JP	C,RBRERR
	DJNZ	RBRB1
	CALL	DRW_FLUSH
RBRC:
	CALL	RBXC
	JR	Z,RBREND
	PUSH	BC
	CALL	CLUSTX
	CALL	DRDX
	POP	BC
	JP	C,RBRERR
	EX	DE,HL
	LD	HL,(_DTBUF)
	LDIR
RBREND:
	CALL	RBXEND
RBREND0:
	POP	IY
	POP	BC
	POP	DE
	POP	AF	;(HL)
	XOR	A
RBRAP:	LD	A,000H
	RET

RBRDIR:
	LD	L,(IY+26)	;(FCB)ファイルの先頭クラスタ
	LD	H,(IY+27)
	CALL	CHDIR
	XOR	A
	LD	H,A
	LD	L,A
	INC	A
	LD	(RBRAP+1),A
	JR	RBREND0

RBX0:
	LD	HL,(_DTA)
	LD	(DTAX),HL
	LD	HL,(LEFTX)
	LD	A,(IY+28)	;(FCB)オープンモード
	SUB	0FDH
	RET

RBX1:
	PUSH	HL		;Record byte
				;AHL=File size
	LD	L,(IY+16)	;ファイルのサイズ(バイト単位)
	LD	H,(IY+17)	;
	LD	A,(IY+18)	;

	CALL	GET_RR_BCDE	;BCDE=Random record

	AND	A
	SBC	HL,DE
	SBC	A,C
	LD	C,A
	LD	A,(IY+19)	;ファイルのサイズ
	SBC	A,B
	POP	DE

	RET	C
	LD	B,A
	OR	C
	EX	DE,HL	;BCDE=File byte	HL=Record byte
	OR	D
	OR	E
	RET	NZ
	SCF
	RET

RBX2:				;Cluster settings
	LD	H,(IY+34)	;(+33)(FCB)ランダムレコード
	LD	C,(IY+35)
	LD	B,0
	BIT	7,(IY+32)	;(FCB)カレントレコード
	JR	NZ,RBX3
	LD	B,(IY+36)
RBX3:
	CALL	RWXR
	LD	A,(SECSZ+2)	;1024=4 / 512=2 / 256=1
	DEC	A
	AND	(IY+34)
	OR	(IY+33)
	RET

RBXA:
	PUSH	BC
	PUSH	DE
	CALL	CLUSTX
	CALL	DRDX
	POP	DE
	POP	BC
	RET	C
	CALL	GNCLX
	RET	C
	LD	(_CLPS),DE

	LD	C,(IY+33)	;(FCB)ランダムレコード
SECSZ:	LD	HL,0400H	;自己書き換え 1024=0400H / 512=0200H ここに1セクタのサイズが格納される
	LD	A,H
	DEC	A		;1024=3 / 512=1
	AND	(IY+34)		;(FCB)ランダムレコード
	LD	B,A		;BCに1セクタ以下の端数が入る
	SBC	HL,BC		;残りを計算

	LD	DE,(LEFTX)
	SBC	HL,DE		;CP HL,DE
	ADD	HL,DE		;
	JR	C,RBXA1		;DEとHLを比較して大きい方をHLに
	EX	DE,HL
RBXA1:
	PUSH	HL
	LD	HL,(_DTBUF)
	ADD	HL,BC
	LD	DE,(DTAX)
	POP	BC
	RET

RBXB:
	LD	HL,(DTAX)
	LD	E,(IY+26)	;(FCB)ファイルの先頭クラスタ
	LD	D,(IY+27)
	LD	A,(LEFTX+1)
	LD	B,A
	LD	A,(SECSZ+2)	;1024=4 / 512=2 / 256=1
RBXB1:
	RRA		;->CF
	JR	C,RBXB2
	SRL	B	;B=B/2
	JR	RBXB1
RBXB2:
	LD	A,B
	OR	A
	RET

RBXC:
	LD	BC,(LEFTX)
	LD	A,(SECSZ+2)	;1024=4 / 512=2 / 256=1
	DEC	A
	AND	B
	LD	B,A		;1セクタ以下の端数がない場合はZ
	OR	C
	RET

RBXEND:
LEFT:	LD	DE,0
	XOR	A
	LD	L,(IY+33)	;(FCB)ランダムレコード
	LD	H,(IY+34)
	ADD	HL,DE
	LD	(IY+33),L	;(FCB)ランダムレコード
	LD	(IY+34),H
	JR	NC,RBXEND1
	INC	(IY+35)
	JR	NZ,RBXEND1
	BIT	7,(IY+32)	;(FCB)カレントレコード
	JR	NZ,RBXEND1
	INC	(IY+36)
RBXEND1:
	EX	DE,HL		;HL=Read byte
	RET

GET_RR_BCDE:			;BCDE=Random record
	LD	E,(IY+33)	;(FCB)ランダムレコード
	LD	D,(IY+34)
	LD	C,(IY+35)
	LD	B,(IY+36)
	BIT	7,(IY+32)	;(FCB)カレントレコード
	RET	Z
	LD	B,0		;CP/M互換のアクセスの場合はFCBは36バイト
	RET

;	ランダムブロックアクセスの連続したセクタをまとめる

DWTC:
	PUSH	HL
	LD	HL,DWT24B
	JR	DWTC1
DRDC:
	PUSH	HL
	LD	HL,DRD24B
DWTC1:
	LD	(DRWF_MODE),HL
	POP	HL
	LD	A,(DRWF_B)
	OR	A
	JR	NZ,DRDC1
SAVE_DRWC:
	LD	B,1
	LD	(DRWF_C),BC
	LD	(DRWF_E),DE
	LD	(DRWF_HL),HL
	JR	INC_HL_DRWC
DRDC1:
	PUSH	HL
	LD	HL,DRWF_E
	ADD	A,(HL)
	PUSH	AF
	CP	E
	JR	NZ,DRDC2
	POP	AF
	INC	HL
	LD	A,(HL)
	ADC	A,0
	PUSH	AF
	CP	D
	JR	NZ,DRDC2
	POP	AF
	LD	A,(DRWF_C)
	ADC	A,0
	CP	C
	JR	NZ,DRDC3
	LD	HL,DRWF_B
	INC	(HL)
	POP	HL
INC_HL_DRWC:
	LD	A,(SECSZ+2)		;1セクタのサイズの上位1バイト
	ADD	A,H
	LD	H,A
	RET
DRDC2:
	POP	AF
DRDC3:
	CALL	DRW_FLUSH
	POP	HL
	JR	SAVE_DRWC

;	ランダムブロックアクセスの連続したセクタをまとめたものをフラッシュする
DRW_FLUSH:
	PUSH	BC
	PUSH	DE
DRWF_C	EQU	$+1
DRWF_B	EQU	$+2
	LD	BC,0
	LD	A,B
	OR	A
	JR	Z,DRDF1
DRWF_E	EQU	$+1
DRWF_D	EQU	$+2
	LD	DE,0
DRWF_HL	EQU	$+1
	LD	HL,0
	XOR	A
	LD	(DRWF_B),A
DRWF_MODE	EQU	$+1
	CALL	DRD24B
DRDF1:
	POP	DE
	POP	BC
	RET
