
;	LSX-Dodgers FILE2

RBWDD:
	PUSH	HL
	POP	BC
	LD	HL,NUL
	CALL	DDX
	JR	NZ,RBWDD2
	LD	HL,(STABLE+2*4)
RBWDD2:
	CP	'C'
	JR	NZ,RBWDD3
	LD	HL,PRINTS
RBWDD3:
	CP	'P'
	JR	NZ,RBWDD4
	LD	HL,(STABLE+2*5)
RBWDD4:
	LD	(RBWDDP+1),HL
	LD	HL,(_DTA)
RBWDD1:
	LD	A,B
	OR	C
RBWDD5:
	JP	Z,RBW1
	LD	E,(HL)
	INC	HL
RBWDDP:	CALL	_SYS02
	JP	C,RBRERR
	LD	A,01AH
	CP	E
	JR	Z,RBWDD5
	DEC	BC
	JR	RBWDD1

				;Write random block
_SYS26:		;(BDOS)ランダム・ブロック・ライト
	XOR	A
	LD	(DRDN1),A	;NOP
	LD	(LEFT+1),HL	;HL←書き込むレコード数
	LD	(LEFTX),HL
	CALL	SETDRV

	CALL	RBX0
	JP	C,RBWERR
	JR	Z,RBWDD		;デバイスデスクプリタ
	CALL	WOPEN
	JP	C,RBWERR
	LD	A,H
	OR	L
	JP	Z,RBW1

	DEC	HL

	CALL	GET_RR_CDE	;CDE=Random record

	XOR	A	;AHL=HL+CDE
	ADD	HL,DE
	ADC	A,C

	LD	B,A
	LD	C,H

	CALL	RWXR
	CALL	C,WRDFX
	JP	C,RBWERR
	
	CALL	RBX2
	JR	Z,RBWB		;NZ=セクタ以下の端数がある
	CALL	RBXA		
	JR	C,RBWERR
	EX	DE,HL
	PUSH	BC
	LDIR
	LD	(DTAX),HL

	CALL	SWTDBF		;バッファデータは更新された

	LD	HL,(LEFTX)
	POP	DE
	SBC	HL,DE
	LD	(LEFTX),HL
	JR	Z,RBWEND

RBWB:
	CALL	RBXB
	JR	Z,RBWC
RBWB1:
	PUSH	BC
	PUSH	DE
	CALL	CLUST
	CALL	DWT_DPB
	POP	DE
	POP	BC
	JR	C,RBWERR
	CALL	GNCLX
	JR	C,RBWERR
	DJNZ	RBWB1
RBWC:
	CALL	RBXC
	JR	Z,RBWEND

	CALL	CLUST
	CALL	DRDN
	JR	C,RBWERR
	LD	DE,(_DTBUF)
	LDIR
	CALL	SWTDBF		;バッファデータは更新された
RBWEND:
	CALL	RBXEND

	CALL	RBX1
	JR	NC,RBW1
	LD	HL,(LEFT+1)
	LD	E,(IY+16)	;(FCB)ファイルのサイズ(バイト単位)
	LD	D,(IY+17)	;CDE=File size
	LD	C,(IY+18)
	XOR	A
	ADD	HL,DE
	ADC	A,C
	LD	(IY+16),L	;(FCB)ファイルのサイズ(バイト単位)
	LD	(IY+17),H
	LD	(IY+18),A
RBW1:
	POP	IY
	POP	BC
	POP	DE
	POP	HL
NUL:
	XOR	A
	RET

RBWERR:
	PUSH	IY
	POP	DE
	LD	HL,(STABLE+2*010H)
	CALL	JP_HL
RBRERR1:
	LD	A,001H
RBRERR2:
	POP	IY
	POP	BC
	POP	DE
	POP	HL
	SCF
	LD	HL,0
	RET

RBRERR:
	LD	A,0FFH
	JR	RBRERR2

RBRFL:
RBRFLP:	LD	A,000H
	CP	00DH
	JR	NZ,RBRFL1
	PUSH	DE
	LD	E,00AH
	JR	RBRFL2
RBRFL1:
	PUSH	DE
	CALL	_SYS07
	LD	E,A
RBRFL2:
	CALL	_PRINT
	LD	A,E
	POP	DE
	LD	(RBRFLP+1),A
	RET
DDX:
	LD	A,(IY+1)	;(FCB)主ファイル名
	CALL	CAP
	CP	'A'
	RET

RBRDD:
	PUSH	HL
	POP	BC
	LD	HL,RBRFL
	CALL	DDX
	JR	NZ,RBRDD2
	LD	HL,(STABLE+2*3)
	JR	RBRDD3
RBRDD2:
	CP	'C'
	JR	NZ,RBRDERR
RBRDD3:
	LD	(RBRDDP+1),HL

	LD	DE,(_DTA)
	LD	HL,0
RBRDD1:
	LD	A,B
	OR	C
	JR	Z,RBRDDE1
	INC	HL
RBRDDP:	CALL	RBRFL
	JR	C,RBRDDE
	CP	01AH
	JR	Z,RBRDDE
	CP	3
	JR	Z,RBRDDE
	LD	(DE),A
	INC	DE
	DEC	BC
	JR	RBRDD1

RBRDDE:
	LD	A,01AH
	LD	(DE),A
RBRDDE2:
	XOR	A
	INC	A
RBRDDE1:
	LD	(RBRAP+1),A
	JP	RBREND0
RBRDERR:
	LD	HL,0
	JR	RBRDDE2

				;Read random block
_SYS27:		;(BDOS)ランダム・ブロック・リード
	LD	(LEFTX),HL
	CALL	SETDRV

	BIT	4,(IY+13)	;(FCB)属性(アトリビュート)
	JP	NZ,RBRDIR	;ディレクトリ
	CALL	RBX0
	JP	C,RBRERR
	JR	Z,RBRDD
	CALL	RBX1
	JP	C,RBRERR1
	LD	A,C
	EX	DE,HL
	SBC	HL,DE		;CP 0HL,CDE
	ADD	HL,DE
	SBC	A,000H
	JR	C,RBR1
	EX	DE,HL
RBR1:
	SBC	A,A
	AND	1
	LD	(RBRAP+1),A

	LD	A,H
	OR	L
	JP	Z,RBREND0

	LD	(LEFT+1),HL	;Read record byte
	LD	(LEFTX),HL

	CALL	RBX2
	JR	Z,RBRB
	CALL	RBXA
	JP	C,RBRERR
	PUSH	BC
	LDIR
	LD	(DTAX),DE
	LD	HL,(LEFTX)
	POP	DE
	AND	A
	SBC	HL,DE
	LD	(LEFTX),HL
	JR	Z,RBREND

RBRB:
	CALL	RBXB
	JR	Z,RBRC
RBRB1:
	PUSH	BC
	PUSH	DE
	CALL	CLUST
	CALL	DRD_DPB
	POP	DE
	POP	BC
	CALL	NC,GNCLX
	JP	C,RBRERR
	DJNZ	RBRB1
RBRC:
	CALL	RBXC
	JR	Z,RBREND

	CALL	CLUST
	CALL	DRDX
	JP	C,RBRERR
	EX	DE,HL
	LD	HL,(_DTBUF)
	LDIR
RBREND:
	CALL	RBXEND
RBREND0:
	POP	IY
	POP	BC
	POP	DE
	POP	AF	;(HL)
	XOR	A
RBRAP:	LD	A,000H
	RET

RBRDIR:
	LD	L,(IY+26)	;(FCB)ファイルの先頭クラスタ
	LD	H,(IY+27)
	CALL	CHDIR
	XOR	A
	LD	H,A
	LD	L,A
	INC	A
	LD	(RBRAP+1),A
	JR	RBREND0

RBX0:
	LD	HL,(_DTA)
	LD	(DTAX),HL
	LD	HL,(LEFTX)
	LD	A,(IY+28)	;(FCB)オープン・モード
	SUB	0FDH
	RET

RBX1:
	PUSH	HL		;Record byte
				;AHL=File size
	LD	L,(IY+16)	;ファイルのサイズ(バイト単位)
	LD	H,(IY+17)
	LD	A,(IY+18)

	CALL	GET_RR_CDE	;CDE=Random record

	AND	A
	SBC	HL,DE
	SBC	A,C
	POP	DE

	RET	C
	LD	C,A
	EX	DE,HL	;CDE=File byte	HL=Record byte
	OR	D
	OR	E
	RET	NZ
	SCF
	RET

RBX2:				;Cluster settings
	LD	C,(IY+34)	;(+33)(FCB)ランダム・レコード
	LD	B,(IY+35)
	CALL	RWXR
	LD	A,(SECSZM1+2)	;1024=3 / 512=1 / 256=0
	AND	(IY+34)
	OR	(IY+33)
	RET

RBXA:
	PUSH	DE
	CALL	CLUST
	CALL	DRDX
	POP	DE
	RET	C
	CALL	GNCLX
	RET	C
	LD	(_CLPS),DE

	LD	C,(IY+33)	;(FCB)ランダム・レコード
SECSZ:	LD	HL,0400H	;自己書き換え 1024=0400H / 512=0200H ここに1セクタのサイズが格納される
	LD	A,H
	DEC	A		;1024=3 / 512=1
	AND	(IY+34)		;(FCB)ランダム・レコード
	LD	B,A		;BCに1セクタ以下の端数が入る
	SBC	HL,BC		;残りを計算

	LD	DE,(LEFTX)
	SBC	HL,DE		;CP HL,DE
	ADD	HL,DE		;
	JR	C,RBXA1		;DEとHLを比較して大きい方をHLに
	EX	DE,HL
RBXA1:
	PUSH	HL
	LD	HL,(_DTBUF)
	ADD	HL,BC
	LD	DE,(DTAX)
	POP	BC
	RET

RBXB:
	LD	HL,(DTAX)
	LD	DE,(_CLPS)
	LD	A,(LEFTX+1)
	LD	B,A
	LD	A,(SECSZ+2)	;1024=4 / 512=2 / 256=1
RBXB1:
	RRA		;->CF
	JR	C,RBXB2
	SRL	B	;B=B/2
	JR	RBXB1
RBXB2:
	LD	A,B
	OR	A
	RET

RBXC:
	LD	BC,(LEFTX)
	LD	A,(SECSZM1+2)	;1024=3 / 512=1 / 256=0
	AND	B
	LD	B,A		;1セクタ以下の端数がない場合はZ
	OR	C
	RET

RBXEND:
LEFT:	LD	DE,0
	XOR	A
	LD	L,(IY+33)	;(FCB)ランダム・レコード
	LD	H,(IY+34)
	ADD	HL,DE
	ADC	A,(IY+35)
	LD	(IY+33),L	;(FCB)ランダム・レコード
	LD	(IY+34),H
	LD	(IY+35),A
	EX	DE,HL		;HL=Read byte
	RET

GET_RR_CDE:			;CDE=Random record
	LD	E,(IY+33)	;(FCB)ランダム・レコード
	LD	D,(IY+34)
	LD	C,(IY+35)
	RET

CPBUF:
LEFTX:	DW	0
DTAX:	DW	0
	DB	020H	;DS 7,20h
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
;
