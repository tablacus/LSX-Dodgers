;	LSX-Dodgers for X1/turbo/Z
;	Programmed by
;	Gaku (Lovers/Tablacus)

RUN	EQU	0C600h

	ORG	RUN-7

;	MSX BINARY HEADER
	DB	0FEH
;	MSX BINARY START ADDRESS
	DW	RUN
;	MSX BINARY END ADDRESS
	DW	LDEND
;	MSX BINARY EXEC ADDRESS
	DW	RUN
;LDDEF.ASM

;	LSX-Dodgers DEF

MAC	EQU	01D90H		;X1
VER_1   EQU	1
VER_2   EQU	3
VER_3   EQU	4
VER	EQU	VER_1 * 256 + VER_2 * 16 + VER_3

STACK	EQU	00000H
SYSTEM	EQU	00005H
JP_HL	EQU	0000FH
FCB1	EQU	0005CH
FCB2	EQU	0006CH
DTA1	EQU	00080H
FDRV	EQU	00100H-37
FNAME	EQU	FDRV+1
DECBF	EQU	FDRV-5
FATBF	EQU	0EE00H
DTBUF	EQU	0FA00H
KEYBF	EQU	0FE00H
KBUF	EQU	0FF00H
DTA	EQU	KBUF+81
EXTSP	EQU	0FFD4H
LINE	EQU	25

;LDINIT.ASM

;	LSX-Dodgers INIT

	JP	START
MACHINE:DW	MAC
VERSION:DW	VER

START:
	DI
	IM	2
	LD	SP,STACK
	CALL	INIT		;NZならAUTOEXECを実行
	LD	HL,0
	PUSH	HL
	RET	Z
	LD	DE,AUTOD
	JP	_COMANL

INIT:
	LD	A,01EH
	OUT	(0),A

	LD	BC,0
	LD	(_CTC),BC
	LD	BC,00A04H
	CALL	CHKCTC
	LD	BC,00704H
	CALL	CHKCTC
	LD	BC,01FA8H
	CALL	CHKCTC
	LD	BC,01FA0H
	CALL	CHKCTC
;
INISIO:
	LD	BC,01F91H	;INIT SIO
	LD	D,1
	OUT	(C),D

	DB	0EDH,071H	;OUT (C),0	Z80未定義命令
	LD	C,093H
	OUT	(C),D
	DB	0EDH,071H	;OUT (C),0	Z80未定義命令
	LD	C,099H		;INIT SIO
	LD	D,1
	DB	0EDH,071H	;OUT (C),0	Z80未定義命令
	LD	C,09BH
	OUT	(C),D
	DB	0EDH,071H	;OUT (C),0	Z80未定義命令

	LD	C,080H		;INIT DMA
	LD	HL,0C306H
INIDMA:
	OUT	(C),H
	DEC	L
	JR	NZ,INIDMA

	LD	A,0E4H
	CALL	COMOUT
	XOR	A
	CALL	OT49SB

	LD	A,INTVEC/256
	LD	I,A

	LD	BC,(_CTC)
	DEC	BC
	DEC	BC

	DB	0EDH,071H	;OUT (C),0	Z80未定義命令
	LD	A,CTC0
	OUT	(C),A

	INC	C
	LD	A,047H
	OUT	(C),A
	LD	A,13		;Baudrate 9600-13
	OUT	(C),A

	LD	A,C
	SUB	010H
	LD	C,A
	LD	(SIOAD+1),BC
	LD	(SIOAD0+1),BC
	LD	(SIOAD1+1),BC

	LD	HL,SIODATA
SINIT1:
	LD	A,(HL)
	INC	HL
	CP	0FFH
	JR	Z,SINIT2
	OUT	(C),A
	JR	SINIT1
SINIT2:
	LD	A,0E4H
	CALL	COMOUT
	LD	A,INTVEC
	CALL	OT49SB
;
	LD	BC,01FC4H
	LD	A,00CH
	OUT	(C),A

	LD	C,0C0H
	DB	0EDH,071H	;OUT (C),0	Z80未定義命令

	INC	C
	LD	A,40
	OUT	(C),A

	INC	C
	DB	0EDH,071H	;OUT (C),0	Z80未定義命令

	INC	C
	DB	0EDH,071H	;OUT (C),0	Z80未定義命令

	LD	C,0C5H
	DB	0EDH,071H	;OUT (C),0	Z80未定義命令

TEXT:
	LD	C,0B0H
	LD	A,080H
	OUT	(C),A
	LD	D,7
	LD	C,0B9H
	LD	HL,TEXTDT
TEXT1:
	INC	B
	OUTI
	INC	C
	DEC	D
	JR	NZ,TEXT1
	LD	BC,01FB0H
	DB	0EDH,071H	;OUT (C),0	Z80未定義命令

	LD	C,0C4H
	DB	0EDH,071H	;OUT (C),0	Z80未定義命令

	LD	BC,01A01H
	IN	A,(C)
	AND	8
	JR	Z,PRN
	LD	C,003H
	LD	A,00FH
	OUT	(C),A
	LD	BC,00A04H
PRN:
	LD	DE,1
	LD	H,D
	LD	L,D
	LD	BC,07FH
	LD	(HL),0FFH
	LDIR
	LD	BC,07FH
	LD	(HL),0
	LDIR

	LD	A,0C3H		;JP
	LD	HL,WBOOT
	LD	(00000H),A
	LD	(00001H),HL	;IPL

	LD	HL,(MACHINE)	;3 bit7  DPB Original(1)
				;  bit6-4 DPB_LEVEL
	LD	(00003H),HL	;  bit3-0 Machine X1(0)
;				;4 LSX-Dodgers(01DH)
	LD	HL,BDOS
	LD	(00005H),A
	LD	(00006H),HL	;BDOS

	LD	HL,BIOS
	LD	(00018H),A	;BIOS-ROM
	LD	(00019H),HL

	LD	HL,0
	LD	(00038H),A	;RST038H
	LD	(00039H),HL

	LD	A,STABLE/256
	LD	(0000BH),A

	LD	A,0E9H		;JP (HL)
	LD	(0000FH),A

	LD	A,(_FATBF+1)
	LD	(00013H),A

	LD	A,(_DTBUF+1)
	LD	(00017H),A

	LD	A,KEYBF/256
	LD	(0001BH),A

	LD	A,KBUF/256
	LD	(0001FH),A

	LD	HL,(VERSION)
	LD	(0005AH),HL

	LD	A,0E6H
	CALL	COMOUT
	CALL	IN49SB
	PUSH	AF
	CALL	IN49SB
	POP	AF
	PUSH	AF
	AND	012H
	JR	NZ,KEYR
	LD	A,1
	LD	(KEYREP+1),A
KEYR:
	POP	AF
	AND	3
	JR	Z,NON

	LD	BC,03FD0H
	OUT	(C),C
	LD	A,037H
	OUT	(0D0H),A
	IN	A,(C)
	CP	C
	JR	Z,TURBO
NON:
	DEC	A		;A=0FFH
	LD	(00018H),A	;BIOS-ROM

	LD	HL,AT_SCR1
	LD	DE,SCR1
	LD	BC,SCRNX-SCR1	;転送先のサイズ確認用
	LD	BC,AT_SCRE-AT_SCR1
	LDIR

	LD	HL,AT_WTTRK
	LD	DE,WTTRK
	LD	BC,DMAE-WTTRK	;転送先のサイズ確認用
	LD	BC,AT_CPUE-AT_WTTRK
	LDIR

	LD	HL,AT_EDWTC
	LD	DE,EDWTC
	LD	BC,EMME-EDWTC	;転送先のサイズ確認用
	LD	BC,AT_EMME-AT_EDWTC
	LDIR

	LD	HL,AT_DRD+AT_R
	LD	(_FDRD+1),HL
	LD	HL,AT_DWT+AT_R
	LD	(_FDWT+1),HL
	LD	HL,AT_EDRDC+AT_RE
	LD	(EMMRD),HL
	LD	HL,AT_EDWTC+AT_RE
	LD	(EMMWR),HL

	LD	A,027H			;ノンターボはMFM切り替えを行わない
	LD	(DEVICE+012H),A		;Aドライブ
	LD	(DEVICE+012H+32),A	;Bドライブ
	LD	(DEVICE+012H+32*2),A	;Cドライブ
	LD	(DEVICE+012H+32*3),A	;Dドライブ

	LD	HL,0
	LD	(X1PAT),HL

	LD	A,0AFH		;XOR	A
	LD	(X1KPAT),A

	LD	HL,SCRNX
	LD	(_SCRN+1),HL

	CALL	SETCRTC
	LD	B,010H		;PALET
	DB	0EDH,071H	;OUT (C),0	Z80未定義命令
	INC	B
	DB	0EDH,071H	;OUT (C),0	Z80未定義命令
	INC	B
	DB	0EDH,071H	;OUT (C),0	Z80未定義命令
	INC	B
	DB	0EDH,071H	;OUT (C),0	Z80未定義命令
	JP	NOBANK

TURBO:
	DI			;Check BIOS
	LD	B,01DH
	OUT	(C),A		;BIOS ON
	LD	A,(02F51H)
	INC	B		;B=01EH
	OUT	(C),A		;BIOS OFF
	EI
	CP	0C9H
	JR	Z,BIOSOK
	LD	A,0AFH		;XOR	A
	LD	(X1KPAT),A
	LD	HL,SCRNX
	LD	(_SCRN+1),HL
BIOSOK:
	LD	A,01FH
	IN	A,(0F0H)
	RRCA
	JR	C,CRT1
	LD	HL,_C8025H
	LD	DE,CRTCD
	LD	BC,16
	LDIR
CRT1:
	CALL	SETCRTC
	LD	BC,010AAH	;PALET
	OUT	(C),C
	LD	BC,011CCH
	OUT	(C),C
	LD	BC,012F0H
	OUT	(C),C
	INC	B
	DB	0EDH,071H

	LD	A,01FH		;スタートポート
	IN	A,(0F0H)
	BIT	2,A
	JR	Z,BANK

	XOR	A
TZ1:				;前面スイッチが2HDの場合はMFMモードを2HDにしておく
	PUSH	AF
	CALL	_GETDPB
	LD	A,(IX+012H)	;DPB_12_DEVICE
	AND	08FH
	CP	087H		;フロッピーでMEM切り替えがON
	JR	NZ,TZ2
	RES	0,(IX+0AH)	;(DPB_0A_FDMODE)
TZ2:
	POP	AF
	INC	A
	CP	8
	JR	C,TZ1

BANK:
	LD	BC,00B00H
	LD	HL,07F00H
	DI
BANK1:
	OUT	(C),L
	LD	E,(HL)
	LD	A,E
	ADD	A,0A5H
	LD	(HL),A
	CP	(HL)
	LD	(HL),E
	JR	NZ,BANK2
	INC	L
	BIT	4,L
	JR	Z,BANK1
BANK2:
	LD	A,010H
	OUT	(C),A
	LD	A,L
	OR	A
	JR	Z,NOBANK
	LD	H,0
	ADD	HL,HL	;*2
	ADD	HL,HL	;*4
	ADD	HL,HL	;*8
	ADD	HL,HL	;*16
	ADD	HL,HL	;*32
	DEC	HL	;-1
	DEC	HL	;-2
	DEC	HL	;-3
	LD	(BANKCL),HL
	LD	A,1
	LD	(BANKFL),A
NOBANK:
EMM:
	CALL	EADR0
	IN	A,(C)
	PUSH	AF

	LD	DE,0
ECHECK1:
	INC	DE
	CALL	EADR2
	IN	H,(C)
	CALL	EADR2
	LD	A,H
	ADD	A,0E5H
	OUT	(C),A
	INC	A
	CALL	EADR0
	OUT	(C),A
	DEC	A
	CALL	EADR2
	IN	L,(C)
	CALL	EADR2
	OUT	(C),H
	CP	L
	JR	NZ,ECHECK2
	BIT	3,D
	JR	Z,ECHECK1
ECHECK2:
	CALL	EADR0
	POP	AF
	OUT	(C),A

	LD	HL,0-9
	ADD	HL,DE
	JR	NC,NOEMM
	LD	(EMMCL),HL
	LD	A,3
	LD	(EMMFL),A
NOEMM:
KEYREP:	LD	A,000H
	OR	A
	JR	Z,KEYR1
	LD	BC,0
	LD	(_CTC),BC
KEYR1:
	LD	BC,0-80*25
	LD	HL,(CRTCD+10)
	LD	(CRTCD+10),BC
	LD	E,00CH
	CALL	_PRINT
	LD	(CRTCD+10),HL

	LD	HL,INIMES
	CALL	MSX

	LD	A,(0FF87H)
	CP	8
	JR	NC,INIT0
	LD	E,A
	ADD	A,'A'
	LD	(AUTODV),A
	LD	C,00EH
	CALL	SYSTEM
	INC	E
	LD	HL,_SEEKSP	;Disk error Ignore
	SET	7,(HL)
	LD	C,01BH
	CALL	SYSTEM

	LD	HL,_SEEKSP
	RES	7,(HL)

	INC	A
	JR	NZ,INIT1
INIT0:
	LD	E,0
	LD	C,00EH
	CALL	SYSTEM
	XOR	A
INIT1:
	LD	HL,0FF00H
	LD	DE,0FF01H
	LD	BC,000FFH
	LD	(HL),L
	LDIR

	OR	A
	RET	Z

	LD	A,0E6H
	CALL	COMOUT
	CALL	IN49SB
	CALL	IN49SB
	CP	01BH
	RET

EADR2:
	PUSH	DE
	EX	DE,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(EMMBL-1)
	LD	C,0
	ADD	HL,BC
	LD	BC,(EMMDV)
	LD	B,00DH
	OUT	(C),C
	INC	C
	OUT	(C),L
	INC	C
	OUT	(C),H
	INC	C
	EX	DE,HL
	POP	DE
	RET

EADR0:
	LD	BC,(EMMDV)
	LD	B,00DH
	DB	0EDH,071H	;OUT (C),0	Z80未定義命令
	INC	C
	DB	0EDH,071H	;OUT (C),0	Z80未定義命令
	INC	C
	DB	0EDH,071H	;OUT (C),0	Z80未定義命令
	INC	C
	RET

CHKCTC:
	PUSH	BC
	LD	DE,04703H
INICTC1:
	INC	C
	OUT	(C),D
	DB	0EDH,071H	;OUT (C),0	Z80未定義命令
	DEC	E
	JR	NZ,INICTC1
	POP	BC

	LD	DE,007FAH
	OUT	(C),D
	OUT	(C),E
	IN	A,(C)
	CP	E
	RET	NZ
	OUT	(C),D
	OUT	(C),D
	IN	A,(C)
	CP	D
	RET	NZ
	INC	BC
	INC	BC
	LD	(_CTC),BC
	RET

SETCRTC:
	LD	HL,CRTCD
	XOR	A
SETCRT1:
	LD	BC,01800H
	OUT	(C),A
	INC	C
	INC	B
	OUTI
	INC	A
	CP	12
	JR	NZ,SETCRT1
	INC	HL
	INC	HL
	LD	BC,01A03H+00100H
	OUTI
	LD	BC,01FD0H+00100H
	OUTI
	RET

AUTOD:	DB	"AUTOEXEC "
AUTODV:	DB	"A:",0

INIMES:	DB	"LSX-Dodgers for X1/turbo version "
	DB	030H + VER_1, '.'
	DB	030H + VER_2 ,030H + VER_3
	DB	' Gaku (Lovers/Tablacus)',0DH,0AH
	DB	0

_C8025H:
	DB	06BH,050H,059H,088H,01BH,001H,019H,01AH
	DB	000H,00FH
	DW	0-80*LINE,0-80
	DB	00CH,0A3H

TEXTDT:	DB	003H,00CH,00FH,030H,033H,03CH,03FH

SIODATA:
	DB	018H
	DB	1,0
	DB	2,0
	DB	3,0C1H
	DB	4,044H
	DB	5,0E8H
	DB	0FFH

;	ノンターボ用パッチ

AT_SCR1:
	EXX
	PUSH	BC
	LD	BC,02000H+80
	EXX
	PUSH	BC
	LD	BC,02000H

	LD	H,A
	OR	A
AT_SCRUP1:
	JR	Z,AT_SCRCL
	PUSH	BC
	SET	4,B
	EXX
	PUSH	BC
	SET	4,B
	EXX
	CALL	AT_UPSUB+AT_RS
	EXX
	POP	BC
	EXX
	POP	BC
	CALL	AT_UPSUB+AT_RS
	DEC	H
	JR	AT_SCRUP1

AT_SCRCL:
	LD	HL,02000H+80
	LD	A,(_COLORF)
AT_SCRCL1:
	SET	4,B
	OUT	(C),H
	RES	4,B
	OUT	(C),A
	INC	BC
	DEC	L
	JR	NZ,AT_SCRCL1
	POP	BC
	EXX
	POP	BC
	EXX
	RET

AT_UPSUB:
	LD	L,40
AT_UPSUB1:
	EXX
	IN	A,(C)
	INC	BC
	EXX
	OUT	(C),A
	INC	BC
	EXX
	IN	A,(C)
	INC	BC
	EXX
	OUT	(C),A
	INC	BC
	DEC	L
	JR	NZ,AT_UPSUB1
	RET

;	FLOPPY DISK DRIVER(CPU)

DISKC:
	DEC	DE
	BIT	3,A
	CALL	NZ,RNF
DISKD:
	PUSH	HL
	LD	HL,RETRY
	DEC	(HL)
	POP	HL
	JR	NZ,AT_ERR		;Retry
	OR	A
	JR	Z,AT_ERR		;Error

AT_DELP:
	CALL	RNF
	CALL	FDMOFF
	LD	A,(_SEEKSP)
	ADD	A,A
	JR	C,AT_ERRZ
AT_DELP1:
	PUSH	DE
	LD	HL,DEMES
	CALL	MSX
	CALL	KEYBC
AT_DELP2:
	CALL	_INKEY
	JR	Z,AT_DELP2

	POP	DE
	CALL	CAP
	CP	'R'		;Retry
	JR	NZ,AT_DELP3
DHLPAT:	LD	HL,0
	LD	A,2
	LD	(RETRY),A
	OR	A
	RET
AT_DELP3:
	CP	'I'		;Ignore
	JR	Z,AT_IGNORE
	CP	'A'		;Abort
	JR	NZ,AT_DELP1
	JP	BOOT
AT_IGNORE:
	LD	A,0FFH
AT_ERRZ:
	CP	A
AT_ERR:
	LD	A,0FFH
	RET

AT_SCRE:

AT_WTTRK:
	LD	A,0F0H
	JR	AT_WTTRK1

AT_DWT:
	LD	A,0A0H
AT_WTTRK1:
	LD	(FDCPAT+1),A

	LD	A,2		;Retry count
	LD	(RETRY),A

DWT0:
	PUSH	DE
	PUSH	HL
	LD	(DHLPAT+1+AT_RS),HL
	CALL	SEEK		;Write disk
	POP	HL
	JR	C,ERRDW
	DI
	LD	A,(FDCPAT+1)
	CALL	SECSET
	LD	C,0FBH

DWT1:
	LD	D,(HL)
DWT2:
	LD	A,B
	IN	A,(0F8H)
	RRCA
	JR	NC,DWT4
	RRCA
	JR	NC,DWT2
DWT3:
	OUT	(C),D
	INC	HL
	JR	DWT1

DWT4:
	DEC	A
	JR	Z,DWT3
	INC	A
	EI
	POP	DE
	INC	DE
	CALL	FDMOFF
	RET	Z
	CALL	DISKC+AT_RS
	JR	NZ,DWT0
	OR	A
	RET	Z
ERRW:
	LD	A,0FFH
ERRZ:
	CP	A
	SCF
	JP	FDMOFF

ERRDW:
	POP	DE
	CALL	AT_DELP+AT_RS
	JR	NZ,DWT0
	OR	A
	JR	NZ,ERRW
	RET

AT_DRD:
	LD	A,080H
	LD	(FDCPAT+1),A

	LD	A,2		;Retry count
	LD	(RETRY),A

DRD0:
	PUSH	DE
	PUSH	HL
	LD	(DHLPAT+1+AT_RS),HL
	CALL	SEEK		;Read disk
	POP	HL
	JR	C,ERRDR
	DI
	LD	A,(FDCPAT+1)
	CALL	SECSET
	LD	C,0FBH
DRD1:
	LD	A,B
	IN	A,(0F8H)
	RRCA
	JR	NC,DRD3
	RRCA
	JR	NC,DRD1
	INI
	INC	B
	JR	DRD1

DRD3:
	OR	A
	EI
	POP	DE
	INC	DE
	CALL	FDMOFF
	RET	Z
	CALL	DISKC+AT_RS
	JR	NZ,DRD0
	OR	A
	JR	NZ,ERRW
	RET

ERRDR:
	POP	DE
	CALL	AT_DELP+AT_RS
	JR	NZ,DRD0
	OR	A
	JR	NZ,ERRW
	RET

AT_CPUE:


;	EMM DRIVER(CPU)


AT_EDWTC:
	CALL	AT_EADR+AT_RE
AT_EDWTC1:
	INC	B
	OUTI
	INC	B
	OUTI
	INC	B
	OUTI
	INC	B
	OUTI
	DEC	A
	JR	NZ,AT_EDWTC1
	XOR	A
	RET

AT_EDRDC:
	CALL	AT_EADR+AT_RE
AT_EDRDC1:
	INI
	INC	B
	INI
	INC	B
	INI
	INC	B
	INI
	INC	B
	DEC	A
	JR	NZ,AT_EDRDC1
	XOR	A
	RET

AT_EADR:
	PUSH	DE
	EX	DE,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(_MAXCYL-1)
	LD	C,0
	ADD	HL,BC
	LD	B,00DH
	OUT	(C),C
	INC	C
	OUT	(C),L
	INC	C
	OUT	(C),H
	INC	C
	EX	DE,HL
	POP	DE
	INC	DE
	XOR	A
	RET

AT_EMME:

INITE:
	DS	0CC06H-INITE

BDOS:
	JP	BDOS0
	DS	37	;Reserved

;LDIO2.ASM

;	LSX-Dodgers IO2

_SYS03:		;(BDOS)外部入力
	DI
	PUSH	BC
SIOAD:	LD	BC,01F91H
	LD	A,5
	OUT	(C),A
	LD	A,0EAH		;RTS ON
	OUT	(C),A
REC1:
	CALL	BREAK2
	IN	A,(C)
	RRCA			;Arrival
	JR	NC,REC1
BREAK2X:
	CCF
	LD	A,5
	OUT	(C),A
	LD	A,0E8H		;RTS OFF
	OUT	(C),A

	DEC	C
	IN	A,(C)		;Read data
	POP	BC
	EI
	RET

BREAK2:
	LD	A,01AH
	IN	A,(1)
	RRCA
	RET	C
	POP	BC		;PC
SIOAD0:	LD	BC,01F91H
	JR	BREAK2X

_SYS04:		;(BDOS)外部出力
	PUSH	BC
SIOAD1:	LD	BC,01F91H
XMIT1:
	CALL	BREAK2
	LD	A,010H		;Reset status
	OUT	(C),A
	IN	A,(C)
	CPL
	AND	024H		;CTS Send Empty
	JR	NZ,XMIT1
	DEC	C
	OUT	(C),E
	POP	BC
	RET


;LDDISK2.ASM

;	LSX-Dodgers DISK2


;	GRAPHIC RAM DISK DRIVER


GDRD:
	CALL	GADR
GDRDC1:
	INI
	INC	B
	INC	C
	JR	NZ,GDRDC1
	JR	S1FD0

GDWT:
	CALL	GADR
GDWTC1:
	INC	B
	OUTI
	INC	C
	JR	NZ,GDWTC1
	JR	S1FD0

GADR:
	LD	C,0
	LD	A,E
	ADD	A,040H
	LD	B,A
	INC	DE
	LD	A,(WK1FD0)
	OR	010H		;BANK1
S1FD0:
	PUSH	BC
	LD	(WK1FD0),A
	LD	BC,01FD0H
	OUT	(C),A
	POP	BC
	AND	0EFH		;BANK0
	RET


;	BANK RAM DISK DRIVER


BDRDC:
	LD	(BANKSP+1),SP
	LD	A,(BANKSP+2)
	ADD	A,A
	JR	C,BDRDC1
	LD	SP,EXTSP
BDRDC1:
	PUSH	DE
	EXX
	 PUSH	 BC
	 PUSH	 DE
	 CALL	 BADR
	CALL	BTFR
	EXX
BDWTCE:
	 POP	 DE
	 POP	 BC
	 EXX
	POP	DE
	INC	DE
	EI
BANKSP:	LD	SP,0
	XOR	A
	RET

BDWTC:
	LD	(BANKSP+1),SP
	LD	A,(BANKSP+2)
	ADD	A,A
	JR	C,BDWTC1
	LD	SP,EXTSP
BDWTC1:
	PUSH	DE
	EXX
	 PUSH	 BC
	 PUSH	 DE
	 CALL	 BADR
	EXX
	 LD	D,E
	 LD	E,A
	 EXX
	EX	DE,HL
	CALL	BTFR
	EX	DE,HL
	EXX
	 OUT	 (C),D	 ;MAIN
	 JR	 BDWTCE

BADR:
	 EXX
	LD	A,E
	ADD	A,A
	RL	D
	ADD	A,A
	RL	D
	PUSH	AF
	ADD	A,A
	LD	A,D
	ADC	A,A
	AND	00FH
	EXX
	 LD	 BC,00B00H
	 LD	 D,A	  ;BANK
	 LD	 E,010H	  ;MAIN
	 EXX
	POP	DE
	LD	B,0
	LD	E,B
	RES	7,D
	RET

BTFR:
	PUSH	DE
	DI

BTFR1:
	EXX
	 OUT	 (C),D	 ;BANK(MAIN)
	 EXX
	EX	(SP),HL
	LD	A,(HL)
	INC	HL
	LD	C,(HL)
	INC	HL
	LD	D,(HL)
	INC	HL
	LD	E,(HL)
	INC	HL
	EX	(SP),HL
	EXX
	 OUT	 (C),E	 ;MAIN(BANK)
	 EXX
	LD	(HL),A
	INC	HL
	LD	(HL),C
	INC	HL
	LD	(HL),D
	INC	HL
	LD	(HL),E
	INC	HL
	DJNZ	BTFR1
	POP	DE
	RET


;	EMM DRIVER(DMA)


EDWTC:
	LD	A,17
	DB	1
EDRDC:
	LD	A,15
EDWTC1:
	PUSH	DE
	LD	(EDMAD+12),HL
	EX	DE,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(_MAXCYL-1)
	LD	C,0
	ADD	HL,BC
	LD	BC,(_DRIVE)
	LD	B,00DH
	OUT	(C),C
	INC	C
	OUT	(C),L
	INC	C
	OUT	(C),H

	LD	HL,EDMAD
	CALL	SETDMA
	LD	A,0B3H
	OUT	(C),A
	OUT	(C),C		;OUT 01F87H,087H
	EX	DE,HL
	INC	H
	INC	H
	INC	H
	INC	H
	POP	DE
	INC	DE
	XOR	A
	RET

EDMAD:	DB	0C3H,07DH,003H,00DH,0FFH,003H,02CH,050H,002H
	DB	080H,09AH,0ADH,000H,000H,0CFH,001H,0CFH

EMME:

AT_RE	EQU	EDWTC-AT_EDWTC


;LDCCP.ASM

;	LSX-Dodgers CCP

PATHX	EQU	64
PATHD:	DS	PATHX
PATHE:	DB	0

OK:	DB	"OK$"
SKIP:	DB	"Skip$"
KBFREE:	DB	"k bytes free",9,'$'
DIRMES:	DB	"    dir $"
COMERM:	DB	7,"Error!$"

COMS	EQU	9
COMTB:
	DB	"D   "	;1
	DW	C_DIR
	DB	"DIR "	;2
	DW	C_DIR
	DB	"COPY"	;3
	DW	C_COPY
	DB	"CD  "	;4
	DW	C_CD
	DB	"DEL "	;5
	DW	C_DEL
	DB	"PATH"	;6
	DW	C_PATH
	DB	"REN "	;7
	DW	C_REN
	DB	"TYPE"	;8
	DW	C_TYPE
	DB	"REM "	;9
	DW	C_REM

WBOOT1:
	DI
	LD	SP,STACK

	LD	A,INTVEC/256
	LD	I,A

	LD	A,0E4H
	CALL	COMOUT
	LD	A,INTVEC
	CALL	OT49SB

	LD	A,(CRTCD+12)
	OR	A
	JR	NZ,SETCRT0
	LD	HL,0-80*LINE
	LD	(CRTCD+10),HL
	LD	HL,0-80
	LD	(CRTCD+12),HL
SETCRT0:
	LD	HL,CRTCD
	XOR	A
SETCRT2:
	LD	BC,01800H
	OUT	(C),A
	INC	C
	INC	B
	OUTI
	INC	A
	CP	12
	JR	NZ,SETCRT2
	DEC	C
	OUT	(C),A
	INC	C
;	OUT	(C),0		;未定義命令ニーモニック
	DB	0EDH,071H
	DEC	C
	INC	A
	OUT	(C),A
	INC	C
;	OUT	(C),0		;未定義命令ニーモニック
	DB	0EDH,071H
	INC	HL
	INC	HL
	LD	BC,01A03H+00100H
	OUTI
	LD	BC,01FD0H+00100H
	OUTI
	CALL	LTNL
COMMAND:
	CALL	SETDTA1
	PUSH	DE
	LD	A,(_DVSW)
	ADD	A,'A'
	LD	E,A
	CALL	_PRINT
	LD	E,'>'
	CALL	_PRINT
	POP	DE		;DE=DTA1
	LD	A,80
	LD	(DE),A
	CALL	_SYS0A		;(BDOS)文字列入力
	CALL	LTNL

	LD	DE,DTA1+2
	CALL	_COMANL
	JR	NC,COMMAND
	CALL	KEYBC
	LD	DE,COMERM
	CALL	_SYS09		;(BDOS)文字列出力
	RST	0

COMANL:
	CALL	FILE
	PUSH	DE
	LD	DE,FNAME
	LD	A,(DE)
	CP	020H
	JR	Z,SDVSW
	DEC	DE
	LD	A,(DE)
	ADD	A,0FFH
	JR	C,COMB
	INC	DE

	LD	HL,COMTB
	LD	A,COMS
	LD	B,A
	CALL	CPNAME
COMB:
	POP	DE
	JP	NC,JP_HL
	EX	DE,HL
	LD	(COMPAT+1),HL
	LD	(BATPAT+1),HL
	PUSH	AF
	CALL	CEXE4
	POP	AF
	LD	HL,FNAME
	LD	DE,FCB2+1	;COMMAND NAME
	LD	BC,11
	LDIR
	LD	DE,PATHD
CEX1:
	LD	A,(DE)
	CP	020H
	RET	C
	CALL	FILEC
	PUSH	DE
	LD	HL,FCB2+1	;COMMAND NAME
	LD	DE,FNAME
	LD	BC,11
	LDIR
	CALL	CEXE4
	POP	DE
	INC	DE
	JR	CEX1

SDVSW:
	POP	AF
	LD	A,(FDRV)
	DEC	A
	LD	E,A
	LD	C,00EH		;(BDOS)カレント・ドライブの設定
	JR	SYSTEM0

OPEN1:
	LD	HL,FDRV
OPEN:
	LD	C,011H		;(BDOS)最初のファイルの検索
OPEN3:
	PUSH	DE
	LD	DE,DTA
	CALL	SETDTA
	EX	DE,HL
	CALL	SYSTEM
	POP	DE
	OR	A
	RET

OPEN2:
	LD	C,012H
	JR	OPEN3

DEFCB:				;Z=Ok NZ=Error
	LD	DE,DTA
	CALL	SYSC0F

	LD	HL,0
	LD	(DTA+33),HL
	LD	(DTA+35),HL
	LD	DE,00100H
SETDTA:
	JP	_SYS1A		;(BDOS)DTAの設定

SETDTA1:
	LD	DE,DTA1
	JR	SETDTA

SYSC0F:
	LD	C,00FH		;(BDOS)ファイルのオープン
SYSTEM0:
	CALL	SYSTEM
	OR	A
	RET

C_CD:
	CALL	FILEC
	LD	HL,0
	LD	DE,FDRV
	JR	S27

S27DTA:
	LD	DE,DTA
S27:
	LD	C,027H		;(BDOS)ランダム・ブロック・リード
	JR	SYSTEM0

CEXE4:
	LD	A,(FDRV)
	LD	(00057H),A
	LD	HL,(FDRV+14)
	LD	(00058H),HL

	LD	HL,FNAME+8
	LD	A,(HL)
	CP	020H
	JR	NZ,CEXE7
	LD	A,'?'
	LD	(HL),A
	INC	HL
	LD	(HL),A
	INC	HL
	LD	(HL),A
CEXE7:
	CALL	OPEN1
CEXE5:
	RET	NZ
	LD	HL,(DTA+1+9)
	LD	A,H
	CALL	CAP
	LD	H,A
	LD	A,L
	CALL	CAP
	LD	L,A
	LD	A,(DTA+1+8)
	CALL	CAP
	SUB	'B'
	JR	Z,C_BAT
	DEC	A		;'C'
	JR	Z,C_EXE
CEXE6:
	CALL	OPEN2
	JR	CEXE5

C_EXE:
	LD	A,H
	CP	'M'
	JR	NZ,CEXE6

	CALL	DEFCB
	LD	HL,(SYSTEM+1)
	DEC	H
	CALL	S27DTA
	DEC	A
	SCF
	RET	NZ
	LD	A,H
	OR	L
	SCF
	RET	Z
	CALL	SETDTA1
COMPAT:	LD	DE,0
	CALL	SETFCB
	XOR	A
	LD	H,A
	LD	L,A	;HL=0x0000
	LD	SP,HL	;STACK=0
	PUSH	HL
	INC	H	;HL=0x0100
	JP	(HL)

C_BAT:
	LD	DE,'A'+'T'*256
	SBC	HL,DE
	JR	NZ,CEXE6

	POP	AF
	POP	AF
	CALL	DEFCB
	LD	HL,00200H
	CALL	S27DTA
	ADD	A,0FEH
	RET	C
	LD	A,L
	OR	A
	SCF
	RET	Z
	INC	A
	PUSH	AF

	CALL	KEYBC
	LD	E,01AH
	CALL	_PRINT
	POP	BC
	LD	HL,00100H
BAT1:
	AND	A
	DEC	B
	RET	Z
	LD	A,(HL)
	CP	'%'
	JR	Z,BAT2
BAT1X:
	LD	A,(HL)
	INC	HL
	CP	01AH
	RET	Z
	CP	00AH
	CALL	NZ,KEYBS
	JR	BAT1

BAT2:
	INC	HL
	LD	A,(HL)
	DEC	HL
	SUB	'1'
	JR	C,BAT1X
	CP	9
	JR	NC,BAT1X
	INC	HL
	INC	HL
	INC	A
	LD	C,A
BATPAT:	LD	DE,0
BAT3:
	LD	A,(DE)
	OR	A
	JR	Z,BAT1
	CALL	SPCUT
	DEC	C
	JR	Z,BAT5
BAT4:
	LD	A,(DE)
	CP	021H
	JR	C,BAT3
	INC	DE
	JR	BAT4
BAT5:
	LD	A,(DE)
	CP	021H
	JR	C,BAT1
	INC	DE
	CALL	KEYBS
	JR	BAT5

SWITCH:
	LD	A,(DE)
SW1:
	INC	DE
	CP	C
	LD	A,(DE)
	RET	Z
	CP	020H
	JR	NC,SW1
C_REM:
	XOR	A
	RET

C_DEL:
	CALL	SETFCB
	CALL	_SYS08		;(BDOS)エコーなしコンソール入力

	LD	C,013H
	JR	CDEL1

C_REN:
	CALL	SETFCB
	LD	A,010H		;ディレクトリも対象にする
	LD	(FCB1+13),A	;属性
	LD	C,017H		;(BDOS)ファイル名の変更
CDEL1:
	LD	DE,FCB1
	CALL	SYSTEM
	ADD	A,0FFH
	RET

C_DIR:
	CALL	FILEC
	LD	HL,FDRV+1
	CALL	CWILD1
	LD	A,0F1H
	LD	(FDRV+13),A
	CALL	OPEN1
CDIR1:
	OR	A
	JR	NZ,PDSKF
	CALL	P_NAME
	CALL	OPEN2
	JR	CDIR1

PDSKF:
	LD	A,(FDRV)
	LD	E,A
	LD	C,01BH		;(BDOS)ディスク情報の獲得
	CALL	SYSTEM
	LD	C,A
	ADD	A,001H
	RET	C
	XOR	A
PDS1:
	RR	C
	JR	C,PDS2
	ADD	HL,HL
	ADC	A,A
	JR	PDS1
PDS2:
	BIT	2,B
	JR	NZ,PDSKF1
	SRL	A
	RR	H
	RR	L
	RL	B
	JR	PDS2
PDSKF1:
	CALL	PRDEC
	LD	DE,KBFREE
	CALL	_SYS09		;(BDOS)文字列出力
	CALL	PUTDRV
	LD	A,05CH
	CALL	MSG_
	LD	HL,(FDRV+14)
	LD	A,H
	OR	L
	JR	Z,LTNL
	DEC	HL
	LD	A,H
	OR	L
	CALL	NZ,PRDEC0
	JR	LTNL

P_NAME:
	LD	A,(DTA+1)
	CP	'.'
	RET	Z
	LD	A,020H
	CALL	MSG_
	CALL	MSG_
	LD	A,':'
	CALL	MSG_
	LD	A,(DTA+1+00BH)
	PUSH	AF
	RRCA
	SBC	A,A
	AND	'*'-020H
	ADD	A,020H
	CALL	MSG_
	CALL	PUTDRV
	LD	HL,DTA+1
	CALL	FPRNT

	POP	AF
	BIT	4,A
	JR	Z,DIR3
	LD	DE,DIRMES
	CALL	_SYS09		;(BDOS)文字列出力
	JR	DIR6
DIR3:
	LD	A,(DTA+1+01EH)
	LD	HL,(DTA+1+01CH)
	CALL	PRDEC
DIR6:
	LD	A,(CRTCD+1)
	CP	40+1
	CALL	NC,PRTTMS

LTNL:
	LD	E,00DH
	CALL	PRINTX
	LD	E,00AH
	JP	PRINTX

C_PATH:
	CALL	SPCUT
	LD	HL,PATHD
	CP	021H
	JR	NC,CPATH0
	DEC	HL
	DEC	HL
CPATHP:
	LD	A,(HL)
	INC	HL
	CP	020H
	CCF
	JR	NC,LTNL
	CALL	MSG_
	JR	CPATHP
CPATH0:
	CP	';'
	JR	NZ,CPATH1
	INC	DE
CPATH1:
	EX	DE,HL
	LD	BC,PATHX
	LDIR
	RET

PUTDRV:
	LD	A,(FDRV)
	ADD	A,'A'-1
	CALL	MSG_
	LD	A,':'
MSGR:
	JP	MSG_

PRDEC0:
	XOR	A
PRDEC:
	LD	E,A
	LD	BC,0
	LD	(DECBF),BC
	LD	(DECBF+2),BC

	LD	C,24
DEC1:
	ADD	HL,HL
	LD	A,E
	ADC	A,A
	LD	E,A
	PUSH	HL
	LD	HL,DECBF+3
	LD	B,4
DEC2:
	LD	A,(HL)
	ADC	A,A
	DAA
	LD	(HL),A
	DEC	HL
	DJNZ	DEC2
	POP	HL
	DEC	C
	JR	NZ,DEC1

	LD	HL,DECBF
	LD	A,020H
	LD	B,3
DEC3:
	CALL	DEC4
	CALL	DEC4
	INC	HL
	DJNZ	DEC3
DECX:
	CALL	DEC4
	XOR	A
DEC4:
	RLD
	CP	020H
	JR	Z,DEC5
	OR	030H
DEC5:
	JR	MSGR

FPRNT:
	LD	B,8
	CALL	P_N1
	LD	A,(HL)
	ADD	A,0A0H-020H
	CP	0A0H
	JR	Z,FPR1
	LD	A,'.'
FPR1:
	CALL	MSG_
	LD	B,3

P_N1:
	PUSH	BC
	PUSH	HL
	LD	A,(HL)
	CALL	CAP3
	CALL	MSG_
	POP	HL
	POP	BC
	INC	HL
	DJNZ	P_N1
	RET

PRTTMS:
	LD	A,020H
	CALL	MSG_

	LD	HL,(DTA+1+24)
	LD	A,L
	OR	A
	RET	Z
	SRL	H
	RLA
	RLA
	RLA
	RLA
	AND	00FH
	LD	D,A
	LD	A,H
	ADD	A,80
	CALL	PRTA
	LD	A,'-'
	CALL	MSG_
	LD	A,D
	CALL	PRTA
	LD	A,'-'
	CALL	MSG_
	LD	A,L
	AND	01FH
	CALL	PRTA

	LD	HL,(DTA+1+22)

	LD	A,020H
	CALL	MSG_
	LD	A,H
	LD	H,L
	RRA
	RR	L
	RRA
	RR	L
	RRA
	RR	L
	AND	01FH
	CALL	PRTA
	LD	A,':'
	CALL	MSG_
	LD	A,L
	RRCA
	RRCA
	AND	03FH
	CALL	PRTA
	LD	A,':'
	CALL	MSG_
	LD	A,H
	AND	01FH
	ADD	A,A

;	PRINT10

PRTA:
	PUSH	HL
	LD	B,8
	LD	C,A
	XOR	A
PRTA1:
	RLC	C
	ADC	A,A
	DAA
	DJNZ	PRTA1
	LD	HL,DECBF
	LD	(HL),A
	XOR	A
	CALL	DECX
	POP	HL
	RET

SETFCB:
	CALL	SPCUT
	LD	A,(DE)
	CP	020H
	JR	C,SETFCBA
	DEC	DE
SETFCBA:
	PUSH	DE
	LD	HL,FCB1
	LD	DE,FCB1+1
	LD	BC,00023H
	LD	(HL),B		;B=0
	LDIR
	POP	DE
	PUSH	DE
	LD	HL,FCB1
	CALL	_SYS29		;(BDOS)ファイル名の解析
	LD	HL,FCB2
	CALL	_SYS29		;(BDOS)ファイル名の解析
	POP	HL
	LD	BC,05000H
	LD	DE,00081H
SETFCB1:
	LD	A,(HL)
	INC	HL
	CP	020H
	JR	C,SETFCB2
	LD	(DE),A
	INC	DE
	INC	C
	DJNZ	SETFCB1
SETFCB2:
	LD	A,C
	LD	(DTA1),A
	INC	B
	XOR	A
SETFCB3:
	LD	(DE),A
	INC	DE
	DJNZ	SETFCB3
	RET

C_COPY:
	CALL	SETFCB
	LD	DE,DTA1+1
	LD	C,'/'
	CALL	SWITCH
	CALL	CAP
	LD	(SW+1),A

	LD	DE,BEEPD
	CALL	FILEC2
	LD	HL,FCB2
	CALL	S29X1

	LD	A,010H
	LD	(FCB1+13),A
	LD	HL,FCB2+1
	CALL	CWILD1
COPY0:
	CALL	CWILD
	LD	HL,FCB1
	CALL	OPEN
	SCF
COPY1:
	RET	NZ
	CALL	DEFCB

	LD	A,(DTA+13)
	BIT	4,A
	JR	Z,COPY1A

	LD	HL,FCB1+1
	CALL	CHKWILD
	JR	C,COPY9

	LD	A,020H
	LD	(FCB1+1),A
	LD	HL,(DTA+26)
	INC	HL
	LD	(FCB1+14),HL
	JR	COPY0

COPYS:
	LD	DE,SKIP
COPY8:
	CALL	_SYS09		;(BDOS)文字列出力
	CALL	LTNL
COPY9:
	CALL	OPEN2
	JR	COPY1

COPY1A:
	LD	HL,FCB2
	LD	DE,FDRV
	LD	BC,DTA+2
	LDI
	LD	A,11
COPY2:
	PUSH	AF
	LD	A,(HL)
	CP	'?'
	JR	NZ,COPY3
	LD	A,(BC)
COPY3:
	LD	(DE),A
	INC	BC
	INC	DE
	INC	HL
	POP	AF
	DEC	A
	JR	NZ,COPY2
	LD	BC,16-11
	LDIR
PUTNAME:
	LD	HL,FCB1+1
	CALL	CHKWILD
	JR	NC,PUTN1
	LD	HL,FDRV+1
	CALL	FPRNT
	LD	A,020H
	CALL	MSG_
PUTN1:
SW:	LD	A,000H
	CP	'T'
	JR	NZ,CSW1
	LD	HL,SWNE
	JR	SWT1
CSW1:
	CP	'N'
	JR	NZ,SWNE
	LD	HL,COPYS
SWT1:
	LD	DE,FDRV
	CALL	SYSC0F
	JR	Z,SWN1
	JP	(HL)
SWN1:
	CALL	CTIME
	JR	NC,COPYS
SWNE:
	LD	DE,FDRV
	LD	C,016H		;(BDOS)ファイルの作成
	CALL	SYSTEM0
	JR	NZ,COPYE2
	LD	H,A		;A=0
	LD	L,A
	LD	(FDRV+33),HL
	LD	(FDRV+35),HL
COPY6:
	CALL	BUFSIZ
	CALL	S27DTA
	LD	B,A
	INC	A
	JR	Z,COPYE
	LD	A,H
	OR	L
	JR	Z,COPY7
	LD	DE,FDRV
	LD	C,026H		;(BDOS)ランダム・ブロック・ライト
	CALL	SYSTEM
	OR	A
	JR	NZ,COPYE
	DEC	B
	JR	NZ,COPY6
COPY7:
	LD	A,(DTA+13)
	LD	(FDRV+13),A
	LD	HL,DTA+20
	LD	DE,FDRV+20
	LD	BC,4
	LDIR

	LD	DE,FDRV
	LD	C,010H		;(BDOS)ファイルのクローズ
	CALL	SYSTEM0
	JR	NZ,COPYE

	LD	DE,OK
	JP	COPY8

COPYE:
	LD	DE,FDRV
	LD	C,013H		;(BDOS)ファイルの削除
	CALL	SYSTEM
COPYE2:
	SCF
	RET

CTIME:
	LD	DE,(DTA+20)
	LD	HL,(FDRV+20)
	AND	A
	SBC	HL,DE
	RET	NZ
	LD	DE,(DTA+22)
	LD	HL,(FDRV+22)
	SBC	HL,DE
	RET

C_TYPE:
	CALL	SETFCB
	LD	HL,FCB1
	CALL	OPEN
	SCF
TYPE1:
	RET	NZ
	CALL	DEFCB
	LD	E,01AH
	CALL	_PRINT
TYPE2:
	CALL	BUFSIZ
	CALL	S27DTA
	ADD	A,0FEH
	RET	C
	LD	A,H
	OR	L
	JR	Z,TYPEE
	LD	BC,00100H
TYPE3:
	LD	A,(BC)
	INC	BC
	CP	01AH
	JR	Z,TYPEE
	LD	E,A
	CALL	_SYS02		;(BDOS)コンソール出力
	DEC	HL
	LD	A,H
	OR	L
	JR	NZ,TYPE3
	JR	TYPE2
TYPEE:
	CALL	OPEN2
	JR	TYPE1

CWILD:
	LD	HL,FCB1+1
CWILD1:
	LD	A,(HL)
	CP	020H
	RET	NZ
CWILD2:
	LD	D,H
	LD	E,L
	INC	DE
	LD	BC,10
	LD	(HL),'?'
	LDIR
	RET

BUFSIZ:
	LD	A,(SYSTEM+2)
	SUB	3
	AND	0F8H
	LD	H,A
	LD	L,0
	RET


;LDOS.ASM

;	LSX-Dodgers OS

BOOT:
	JP	0
_SYS00:		;(BDOS)プログラム終了
WBOOT:
	JP	WBOOT1
CONST_:
	JP	CONSTX
_SYS07:		;(BDOS)コンソール直接入力
CONIN:
	JP	FLGET
CONOUT:
	JP	CONOUT1

BDOS0:
	PUSH	HL
	LD	HL,00100H
	ADD	HL,SP
	JR	C,BDOS1X	;EXTSP = 0FFD4H
BDOS2:
	POP	HL
	LD	(BDSP+1),SP
	LD	SP,EXTSP
	CALL	BDOS1
BDSP:	LD	SP,0
	RET
BDOS1:
	PUSH	HL
BDOS1X:
	LD	A,C
	CP	031H
	JR	NC,OVERFN
	ADD	A,A
	LD	L,A
	LD	H,STABLE/256
	LD	A,(HL)
	INC	L
	LD	H,(HL)
	LD	L,A
	EX	(SP),HL
	RET
OVERFN
	POP	HL
_ERROR:
_SYS2B:		;(BDOS)日付の設定
_SYS2D:		;(BDOS)時刻の設定
_SYS05:		;(BDOS)プリンタ出力
	SCF			;CF=1
	SBC	A,A		;A=0FFH
	RET
_SYS1C:		;(BDOS)ディスクの書き込み禁止化
_SYS1E:		;(BDOS)ファイル属性の設定
_SYS20:		;(BDOS)利用者番号の設定と読み出し
_SYS2E:		;(BDOS)ベリファイ・フラグの設定
	XOR	A
	RET

_SYS09:		;文字列出力
	PUSH	DE
_SX09:
	LD	A,(DE)
	INC	DE
	CP	'$'
	JR	Z,SX0E2
	PUSH	DE
	LD	E,A
	CALL	_SYS02
	POP	DE
	JR	_SX09

_SYS0C:		;(BDOS)バージョン番号の獲得
	LD	HL,00022H
	XOR	A
	LD	A,L
	RET

_SYS0D:		;(BDOS)ディスク・リセット
	CALL	_FFLUSH
	PUSH	HL
	LD	HL,00080H
	LD	(_DTA),HL
	POP	HL
	PUSH	DE
	LD	E,0
	DB	03EH

_SYS0E:		;(BDOS)カレント・ドライブの設定
	PUSH	DE
	LD	A,E
	PUSH	IX
	CALL	_GETDPB
	POP	IX
	JR	C,SX0E2
	LD	A,E
	LD	(_DVSW),A
SX0E2:
	LD	A,8
	POP	DE
	RET

_SYS0F:		;(BDOS)ファイルのオープン
	CALL	SETDRV
	LD	A,(IY+28)	;(FCB)オープン・モード
	ADD	A,002H		;Write
	JR	Z,FEND0F
	CALL	CHKWILDX

	CALL	NC,SOPENX
_S16XX:
	JR	C,FEND0F
				;Directory location
	LD	A,(_FILEN)
	LD	(IY+25),A	;(FCB)ディレクトリ・ロケーション
;				_DIRF
	LD	A,(_DIRF)
	LD	(IY+29),A	;(FCB)ディレクトリ・モード
;				_FBPS
	LD	(IY+30),E	;(FCB)ディレクトリ・ポジション
	LD	(IY+31),D
;				Open(Read)
	LD	(IY+28),0FFH	;(FCB)オープン・モード
;				FILENAME
	PUSH	IY
	POP	DE
	INC	DE
	LD	BC,11
	LDIR
;				Attribute
	LD	A,(HL)
	LD	(IY+13),A	;(FCB)属性(アトリビュート)
	LD	DE,11		;Reserved
	ADD	HL,DE
					;(FCB)ファイルを最後に変更した時刻
	LD	DE,SDDATA		;(FCB)ファイルを最後に変更した日付
	LD	B,SDDATAE-SDDATA	;(FCB)ファイルの先頭クラスタ
S16LOOP:				;(FCB)ファイルのサイズ(バイト単位)
	LD	A,(DE)
	INC	DE
	LD	(S16PAT+2),A
	LD	A,(HL)
	INC	HL
S16PAT:	LD	(IY+0),A
	DJNZ	S16LOOP

	XOR	A
	LD	(IY+12),A	;(FCB)カレント・ブロック
	LD	(OFCB+1),IY
FEND0F:
	JP	FEND

_SYS10:		;(BDOS)ファイルのクローズ
	CALL	SETDRV
	LD	A,(IY+28)	;(FCB)オープン・モード
	SUB	0FEH
	SCF
	CCF
	JR	NZ,FEND10
_S10A:				;Write
	LD	(IY+14),A	;(FCB)レコード・サイズ/アクセスするディレクトリのクラスタ番号+1
	LD	(IY+15),A

	INC	(IY+28)		;0FEH->0FFH ;オープン・モード
	CALL	SETTMS

	LD	A,(IY+29)	;(FCB)ディレクトリ・モード
	LD	(_DIRF),A
	LD	E,(IY+30)	;(FCB)ディレクトリ・ポジション
	LD	D,(IY+31)
	CALL	DC
	JR	C,FEND

	LD	A,(IY+25)	;(FCB)ディレクトリ・ロケーション
SDECM1:	AND	01FH		;自己書き換え(1セクタ辺りのディレクトリエントリ数-1) 1024=01FH / 512=00FH / 256=7
	LD	L,A
	LD	H,0
	ADD	HL,HL		;*2
	ADD	HL,HL		;*4
	ADD	HL,HL		;*8
	ADD	HL,HL		;*16
	ADD	HL,HL		;*32
	LD	BC,(_DTBUF)
	ADD	HL,BC

	CALL	SDIRENT
FEND10:
	JR	FEND

OPENDD:
	LD	(IY+28),0FDH	;(FCB)オープン・モード
	LD	(IY+13),020H	;(FCB)属性(アトリビュート)
	CALL	SETTMSX
	JR	FEND

_SYS11:		;(BDOS)最初のファイルの検索
	CALL	SETDRV
	CALL	CHKDDX
	JR	C,_S11A
	PUSH	IY
	POP	HL
	LD	DE,(_DTA)
	LD	BC,12
	LDIR
	LD	A,020H
	LD	(DE),A
	INC	DE
	LD	H,D
	LD	L,E
	INC	DE
	LD	C,19
	LD	(HL),B
	JR	_S11B
_S11A:
	CALL	SOPEN
_S12X1:
	JR	C,FEND
	CALL	SOPENE2
	LD	DE,(_DTA)
	LD	A,(_DRV)
	INC	A
	LD	(DE),A
	PUSH	DE
	INC	DE
	LD	BC,32
	LDIR
	LD	L,(IY+14)	;(FCB)レコード・サイズ/アクセスするディレクトリのクラスタ番号+1
	LD	H,(IY+15)
	LD	(SCDIR),HL
	LD	HL,(_FBPS)
	LD	(SFBPS),HL
	LD	HL,(_FILEN)
	LD	(SFNDF),HL	;Directory position and Flags
	POP	HL
	LD	DE,SFILE
	LD	C,33
_S11B:
	LDIR
FEND:
	SBC	A,A		;CF=0 A=0 : CF=1 A=0FFH
FENDE:
	POP	IY
	POP	BC
	POP	DE
	POP	HL
	RET

_SYS12:		;(BDOS)次のファイルの検索
	PUSH	HL
	PUSH	DE
	PUSH	BC
	PUSH	IY
	CALL	NOPEN
	JR	_S12X1

_S16K:
	LD	A,(IY+28)	;(FCB)オープン・モード
	CP	0FDH		;Device(0FDH)
	SCF
	RET	Z

OFCB:	LD	DE,0
	PUSH	DE
	LD	B,26		;First cluster
S16K1:
	INC	DE
	INC	HL
	DJNZ	S16K1

	LD	A,(DE)
	CP	(HL)
	JR	NZ,S16K2
	INC	DE
	INC	HL
	LD	A,(DE)
	CP	(HL)
	JR	NZ,S16K2

	POP	HL
	PUSH	IY
	POP	DE
	LD	A,(DE)		;Drive
	CP	(HL)
	JR	NZ,S16K2
				;ここはCFが必ず0
	SBC	HL,DE		;CP HL,DE
	SCF
	RET	NZ
	PUSH	HL
S16K2:
	POP	HL
	PUSH	IY
	POP	DE
_SYS13:		;(BDOS)ファイルの削除
	CALL	SETDRV
	CALL	KILL
FEND13:
	JR	FEND

_SYS14:		;(BDOS)シーケンシャルな読み出し
	CALL	SETDRV
	CALL	PUSHRR
	CALL	GETSEQ

	CALL	RB_READ
	PUSH	HL
	CALL	SETSEQ
SREAD:
	POP	HL

	ADD	A,001H
	JR	C,FEND

	LD	A,L
	SUB	001H
FENDX:
	SBC	A,A
	AND	3
	RRA
	JR	FENDE

_SYS15:		;(BDOS)シーケンシャルな書き込み
	CALL	SETDRV
	CALL	PUSHRR
	CALL	GETSEQ

	CALL	RB_WRITE
	PUSH	HL
	CALL	SETSEQ
SWRITE:
	POP	HL

	ADD	A,0FFH
	JR	FENDX

_SYS17:		;(BDOS)ファイル名の変更
	CALL	SETDRV
	CALL	NAME
	JR	FEND13

_SYS16:		;(BDOS)ファイルの作成
	CALL	SETDRV

	CALL	CHKWILDX
	JR	C,FEND13
	LD	A,(IY+1)	;(FCB)主ファイル名
	CP	5
	JR	Z,_S16X2
	CP	021H
	JP	C,FEND13
_S16X2:
;				Clear FCB
	PUSH	IY
	POP	HL
	LD	BC,16
	ADD	HL,BC
_S16X1:
	LD	(HL),B		;B=0
	INC	HL
	DEC	C
	JR	NZ,_S16X1

	CALL	SETTMSX
	LD	(IY+13),0FFH	;(FCB)Attribute
	CALL	SOPENX
	CCF
	CALL	Z,_S16K
	CALL	NC,COPEN
	CALL	NC,SDIRENT
	JP	_S16XX

_SYS21:		;(BDOS)ランダムな読み出し

	CALL	SETDRV
	CALL	PUSHRR
	LD	L,(IY+33)	;(FCB)Random record
	LD	H,(IY+34)

	CALL	RB_READ
	PUSH	HL
	CALL	POPRR
	JR	SREAD

_SYS22:		;(BDOS)ランダムな書き込み
_SYS28:		;(BDOS)ランダムな書き込み・その2
	CALL	SETDRV
	CALL	PUSHRR
	LD	L,(IY+33)	;(FCB)Random record
	LD	H,(IY+34)

	CALL	RB_WRITE
	PUSH	HL
	CALL	POPRR
	JR	SWRITE

_SYS18:		;(BDOS)ログイン・ベクトルの獲得
	LD	HL,000FFH
	XOR	A
	RET

_SYS19:		;(BDOS)カレント・ドライブ番号の獲得
	LD	A,(_DVSW)
	AND	A
	RET

_SYS1A:		;(BDOS)DTAの設定
	LD	(_DTA),DE
	XOR	A
	RET

_SYS1B:		;(BDOS)ディスク情報の獲得
	LD	A,E
	CALL	GETDRV
	CALL	_GETDPB
	CALL	NC,_RDFATX
	LD	HL,0
	CALL	NC,DSKF

	LD	DE,(MAXCLP+1)	;DPB_08_MAXCL-1
	DEC	DE		;DE←クラスタの総数
	LD	IY,(_FATBF)	;IY←メモリ上のFATの先頭アドレス
	SBC	A,A
	RET	C
	LD	C,A		;C=0
	LD	A,(IX+00FH)	;DPB_0F_BPS
	AND	00FH
	LD	B,A
	LD	A,(IX+7)	;DPB_07_SECPCL
	RET

_SYS1D:		;(BDOS)書き込みが禁止されているディスクの調査
	XOR	A
	LD	H,A
	LD	L,A
	RET

_SYS1F:		;(BDOS)ディスク装置のパラメータの読み出し
	LD	HL,DEVICE
	LD	A,E
	JP	_GETDPB

_SYS23:		;(BDOS)ファイル・サイズの獲得
	PUSH	HL
	LD	HL,(STABLE+2*00FH)	;ファイルのオープン
	CALL	JP_HL
	JR	C,_S23X1

	PUSH	DE		;EX DE,IY
	EX	(SP),IY		;
;	POP	DE		;
;	PUSH	DE		;DEを破壊しないように注意vv
	CALL	GETSIZE
_S24X1:
	LD	(IY+33),L	;(FCB)Random record
	LD	(IY+34),H
	LD	(IY+35),0
;	POP	DE		;^^^^^^^^^^^^^^^^^^^^^^^^
;	PUSH	DE		;EX DE,IY
	EX	(SP),IY		;
	POP	DE		;

	XOR	A
_S23X1:
	POP	HL
	RET

_SYS24:		;(BDOS)ランダム・レコード・フィールドの設定
	PUSH	HL
	PUSH	DE		;EX DE,IY
	EX	(SP),IY		;
;	POP	DE		;
;	PUSH	DE		;DEを破壊しないように注意vv
	CALL	GETSEQ
	JR	_S24X1		;^^^^^^^^^^^^^^^^^^^^^^^^

_SYS29:		;(BDOS)ファイル名の解析
	PUSH	BC
	PUSH	HL
	CALL	FILE
	POP	HL
	POP	BC
S29X1:
	PUSH	BC
	PUSH	DE
	PUSH	HL
	EX	DE,HL
	LD	HL,FDRV
	LD	BC,13
	LDIR
	LD	(HL),B
	LD	C,3
	LDIR
	POP	HL
	POP	DE
	POP	BC
	XOR	A
	RET

_SYS30:		;(BDOS)論理セクタを用いた書き込み
	PUSH	BC
	LD	BC,DWT16
	JR	S2FX
_SYS2F:
	PUSH	BC
	LD	BC,DRD16
S2FX:
	LD	(S2FPAT+1),BC
	CALL	_FFLUSH

	PUSH	DE
	PUSH	HL
	LD	A,L		;Drive
	CALL	_CHGDRV
	JR	C,S30X2
	LD	B,H		;Number of clusters
	LD	HL,(_DTA)
S30X:
	PUSH	BC
S2FPAT:	CALL	DRD16
	POP	BC
	JR	C,S30X2
	DJNZ	S30X
S30X2:
	POP	HL
	POP	DE
	POP	BC
	SBC	A,A
	RET

;LDIO.ASM

;	LSX-Dodgers IO


BIOS:
	PUSH	HL
	LD	HL,08100H
	ADD	HL,SP
	POP	HL
	JR	NC,BIOS2
BIOS1:
	CALL	BIOS3
	LD	B,01EH
	OUT	(C),A
	RET
BIOS3:
	PUSH	BC
	LD	B,01DH
	OUT	(C),A
	RET
BIOS2:
	LD	(SPPAT+1),SP	;スタックがBIOS-ROMと被っている場合
	LD	SP,EXTSP
	CALL	BIOS1
SPPAT:	LD	SP,0
	RET

INT:
	PUSH	AF
	PUSH	HL
	LD	HL,00100H
	ADD	HL,SP
	JR	C,INTP1X
	LD	(INTSP+1),SP
	CALL	INTP1
INTSP:	LD	SP,0
	JR	INTPE
INTP1X:
	CALL	INTP1
INTPE:
	POP	HL
INTPE2:
	POP	AF
INTCTCE:
	EI
	RETI
INTP1:
	PUSH	BC

	CALL	IN49SB
	LD	H,A
	CALL	IN49SB
	LD	L,A

	BIT	4,H		;[GRAPH]
	JR	NZ,SCEXE
	LD	A,L
	XOR	9
	JR	Z,DIAN
	LD	A,H
	RRCA			;[CTRL]
	JR	NC,SCL
	RRCA			;[SHIFT]
	JR	C,SCEXE
	LD	A,080H
	JR	SCG1
SCEXE:
	LD	(_KEYD),HL
	CALL	KEYSET1

	POP	BC
	RET
SCL:
	LD	A,L
	CP	008H
	JR	Z,RESET

	LD	A,002H
SCG1:
	PUSH	HL
	LD	HL,WK1FD0
	XOR	(HL)
	CALL	S1FD0
	POP	HL
	JR	SCEXE

RESET:
	LD	A,01DH
	OUT	(0),A
	RST	0

DIAN:
	LD	L,A
	PUSH	BC
	LD	BC,01FB0H
	IN	A,(C)
	XOR	080H
	OUT	(C),A
	POP	BC
	JR	SCEXE

INTCTC2:
	PUSH	AF
INTCPAT:LD	A,000H
	DEC	A
	LD	(INTCPAT+1),A
	JR	NZ,INTPE2

	LD	A,(_KEYD)
	OR	A
	JR	Z,INTPE2
KEYSET0:
	PUSH	HL
	LD	HL,(_KEYPS)
	LD	A,H
	XOR	L
	JR	NZ,INTC2A

	LD	HL,(_KEYD)
	CALL	KEYSET
INTC2A:
	LD	A,(_KEYSP)
	AND	00FH
	LD	(INTCPAT+1),A

	JR	INTPE

KEYSET1:
	BIT	5,H
	PUSH	AF
	LD	BC,(_CTC)
	LD	A,B
	OR	C
	JR	NZ,KEYS10E

	POP	AF
	JR	NZ,KEYSET
	PUSH	AF
	JR	KEYSET0
KEYS10E:
	POP	AF
	RET	Z
	PUSH	AF
	LD	A,3		;CTC STOP
	OUT	(C),A
	POP	AF

	OR	A
	RET	Z

	PUSH	HL
	LD	HL,(_KEYSP)
	LD	A,0A7H
	OUT	(C),A
	OUT	(C),L
	LD	A,H
	LD	(INTCPAT+1),A
	POP	HL

KEYSET:
	LD	A,L
	BIT	7,H
	CALL	Z,FKEY
	BIT	6,H
	RET	NZ
KEYBS:
	OR	A
	RET	Z
KEYBS1:
	CP	3
	CALL	Z,KEYBC
	PUSH	HL
	PUSH	AF
	LD	HL,(_KEYPS)
	INC	L
	LD	A,L
	CP	H
	JR	Z,POP_AF_HL_SCF_RET
	LD	(_KEYPS),A
	LD	H,KEYBF/256
	POP	AF
	LD	(HL),A
	POP	HL
	RET

KEYBC:
	PUSH	HL
	LD	HL,0
	LD	(_KEYPS),HL
	POP	HL
	RET

POP_AF_HL_SCF_RET:
	POP	AF
	POP	HL
	SCF
	RET

FKEY:
	BIT	6,L
	RET	Z
	LD	A,01BH
	CALL	KEYBS1
	LD	A,L
	ADD	A,020H-'q'
	BIT	7,L
	RET	Z
	LD	L,'P'
	SUB	0E1H+020H-'q'
	JR	Z,KEYBSL
	INC	L
	DEC	A
	JR	Z,KEYBSL
	INC	L
	SUB	0EBH-0E2H
	JR	Z,KEYBSL
	LD	L,'C'
	DEC	A
	JR	Z,KEYBSL
	LD	L,'X'
KEYBSL:
	LD	A,L
	JR	KEYBS1

_SYS01:		;(BDOS)コンソール入力
	CALL	_SYS07
MSG_:
	PUSH	AF
	PUSH	DE
	LD	E,A
	CALL	_SYS02
	POP	DE
	POP	AF
	RET

_SYS02:		;(BDOS)コンソール出力
	CALL	BREAK
	JR	PRINTX

_SYS06:		;(BDOS)コンソール直接入出力
	LD	A,E
	INC	A
	JP	Z,_INKEY
PRINTX:
	JP	_PRINT

_SYS08:		;(BDOS)エコーなしコンソール入力
	CALL	_SYS07
	JR	BREAK1
BREAK:
	EI
	LD	A,(_KEYD)
BREAK1:
	CP	3
	JP	Z,0
	CP	013H
	RET	NZ

PAUSE:
	CALL	KEYBC

FLGET:
	CALL	_FFLUSH
	PUSH	BC
	PUSH	HL
	LD	BC,(_TXADR)
	SET	5,B
	IN	H,(C)
FLGET1:
	LD	A,(_KEYD+1)
	RRCA
	RRCA
	AND	010H
	OR	8
	IN	L,(C)
	OR	L
	OUT	(C),A
	CALL	_INKEY
	JR	Z,FLGET1
	OUT	(C),H
	POP	HL
	POP	BC
	RET

_SYS0A:		;(BDOS)文字列入力
	PUSH	BC
	PUSH	HL
	PUSH	DE
	CALL	GETL
	LD	DE,KBUF
	POP	HL
	PUSH	HL
	LD	C,0
	JR	NC,SAX0
	INC	HL
	INC	HL
	JR	SAX4
SAX0:
	LD	B,(HL)
	INC	HL
SAX1:
	INC	HL
	LD	A,(DE)
	INC	DE
	OR	A
	JR	NZ,SAX2
SAX4:
	LD	(HL),00DH
	JR	SAX3
SAX2:
	LD	(HL),A
	INC	C
	DJNZ	SAX1
SAX3:
	POP	DE
	LD	A,C
	INC	DE
	LD	(DE),A
	DEC	DE
	POP	HL
	POP	BC
	AND	A
	RET

_SYS0B:		;(BDOS)コンソール状態のチェック
	CALL	BREAK
	LD	A,(_KEYD)
	OR	A
	RET	Z
CONSTX:
	CALL	_FFLUSH
	PUSH	HL
	LD	HL,(_KEYPS)
	LD	A,H
	XOR	L
	POP	HL
	ADD	A,0FFH
	SBC	A,A
	RET

_SYS2A:		;(BDOS)日付の獲得
	PUSH	BC
	LD	A,0EDH		;Read calendar
	CALL	COMOUT
	CALL	IN49SB_BCD	;YY
	LD	L,A
	LD	H,0
;	LD	DE,1900		;0076CH
;	CP	90		;90以上は1900年代 1990-1999
;	JR	NC,RDDATE1	;90未満は2000年代 2000-2089
;	LD	E,0D0H		;2000 & 0FFH D=007H
	LD	DE,2000		;すべて2000年代で処理 2000-2099
RDDATE1:
	ADD	HL,DE
	CALL	IN49SB		;MM
	LD	D,A
	CALL	IN49SB_BCD	;DD
	LD	E,A
	LD	A,D
	AND	7
	LD	B,4
RDDATE2:
	SRL	D
	DJNZ	RDDATE2
	POP	BC
	RET
IN49SB_BCD:
	CALL	IN49SB
;------------------------
;BCDの10進数化
;in
;	A  : BCD
;out
;	A  : 10進数
;------------------------
	LD	C,A
	AND	0F0H	;10の位
	RRCA
	LD	B,A
	RRCA
	RRCA
	ADD	A,B
	LD	B,A
	LD	A,C
	AND	00FH	;1の位
	ADD	A,B
	RET

_SYS2C:		;(BDOS)時刻の獲得
	PUSH	BC
	LD	A,0EFH		;Read time
	CALL	COMOUT
	CALL	IN49SB_BCD	;TT
	LD	H,A
	CALL	IN49SB_BCD	;MM
	LD	L,A
	CALL	IN49SB_BCD	;SS
	LD	D,A
	POP	BC
	XOR	A
	RET

MSX1:
	LD	E,A
	CALL	_PRINT
MSX:
	LD	A,(HL)
	INC	HL
	OR	A
	JR	NZ,MSX1
	RET

ESC1:
	LD	A,E
	CP	'A'
	JP	Z,CTRL1E
	CP	'B'
	JP	Z,CTRL1F
	CP	'C'
	JP	Z,CTRL1C
	CP	'D'
	JP	Z,CTRL1D
	CP	'E'
	JR	Z,CT0CX
	CP	'j'
CT0CX:
	JP	Z,CTRL0C
	CP	'H'
	JP	Z,CTRL0B
	CP	'J'
	JP	Z,CTRL1A
	CP	'K'
	JP	Z,CTRL05
	CP	'L'
	JP	Z,CTRL0E
	CP	'x'
	JR	Z,ESC1X
	CP	'y'
	JR	NZ,ESC1Y
ESC1X:
	LD	(HL),1
ESC1Y:
	CP	'='
	JR	Z,ESC1W
	CP	'Y'
	JR	NZ,ESC1Z
ESC1W:
	LD	(HL),2
ESC1Z:
	CP	020H
	JR	C,ESC1C
	ADD	A,A
	RET	NC
ESC1C:
	POP	HL
	JR	ANK

ESC:
	LD	HL,PRINTE5
	PUSH	HL
	LD	HL,ESCFLG+1
	LD	(HL),0
	DEC	A
	JR	Z,ESC1
	DEC	A
	JR	NZ,ESC2
	LD	(HL),3
	LD	A,E
	SUB	020H
	LD	(ESCYP+1),A
	RET
ESC2:
	DEC	A
	RET	NZ
ESCYP:	LD	H,0
	LD	A,E
	SUB	020H
	LD	L,A
	JP	_LOC

PRINT:
	PUSH	BC
	PUSH	HL
ESCFLG:	LD	A,000H
	OR	A
	JR	NZ,ESC

	LD	A,01FH
	CP	E
	JR	NC,CTRL
PRINTC:
INSFLG:	AND	A
	CALL	C,CTRL12

KANFLG:	LD	A,000H
	OR	A
	JR	NZ,KANJI2
X1KPAT:	LD	A,E
	CP	080H
	JR	C,ANK
	CP	0A0H
	JR	C,KANJI1
	CP	0E0H
	JR	C,ANK
KANJI1:
	LD	(KANFLG+1),A
	JR	PRINTE5
ANK:
	LD	BC,(_TXADR)
	LD	A,B
	OR	038H
	LD	B,A
	DB	0EDH,071H	;OUT (C),0	Z80未定義命令	kanji
	RES	3,B
	OUT	(C),E		;Text
KANJIE:
	CALL	PRINTE7
PRINTE5:
	POP	HL
	POP	BC
	XOR	A
	RET

CTRL:
	CALL	KANCLR
	LD	A,0A7H		;AND	A
	LD	(INSFLG),A
	LD	A,E
	ADD	A,A
	OR	080H
	LD	L,A
	LD	H,CTRLTB/256
	LD	A,(HL)
	INC	L
	LD	H,(HL)
	LD	L,A
	CALL	JP_HL
	JR	PRINTE5

KANJI2:
	PUSH	DE
	LD	D,A
	LD	BC,02F81H	;SFTJIS
	RST	018H
	LD	BC,02FC3H	;Instead or JISVRM
	RST	018H

	LD	BC,(_TXADR)
	LD	A,B
	OR	038H
	LD	B,A
	OUT	(C),D		;kanji
	RES	3,B
	OUT	(C),E		;Text
	CALL	PRINTE7
	LD	BC,(_TXADR)
	LD	A,B
	OR	038H
	LD	B,A
	SET	6,D
	OUT	(C),D		;Kanji
	RES	3,B
	OUT	(C),E		;Text
	POP	DE
	XOR	A
	LD	(KANFLG+1),A
	JR	KANJIE

KANCLR:
	LD	A,(KANFLG+1)
	OR	A
	RET	Z
	LD	BC,(_TXADR)
	LD	A,B
	OR	038H
	LD	B,A
	XOR	A
	LD	(KANFLG+1),A
	OUT	(C),A		;Kanji
	RES	3,B
	LD	A,020H
	OUT	(C),A		;Text
PRINTE7:
	RES	4,B
PRINTE6:
	LD	A,(_COLORF)
PRINTE4:
	OUT	(C),A		;Color
	LD	A,B
	AND	7
	LD	B,A
PRINTE2:
	INC	BC
PRINTE3:
	LD	HL,(CRTCD+10)
	AND	A
	ADC	HL,BC
PRINTE8:
	JR	Z,PRINT2
PRINTE1:
	LD	(_TXADR),BC
PRINTE:
	RET

PRINT2:
	CALL	SCR
	LD	HL,(CRTCD+12)
	ADD	HL,BC
	LD	(_TXADR),HL
	RET

CTRL08:
CTRL1D:
	LD	BC,(_TXADR)
	LD	A,B
	OR	C
	RET	Z
	DEC	BC
	JR	PRINTE1

CTRL1E:
	LD	BC,(_TXADR)
	LD	HL,(CRTCD+12)
	ADD	HL,BC
	RET	NC
	LD	B,H
	LD	C,L
	JR	PRINTE1

CTRL1C:
	LD	BC,(_TXADR)
	JR	PRINTE2

CTRL09:
	LD	BC,(_TXADR)
	LD	A,C
	AND	0F8H
	ADD	A,8
	LD	C,A
	ADC	A,B
	SUB	C
	LD	B,A
	JR	PRINTE3

CTRL02:
	LD	HL,(_TXADR)
	LD	A,H
	OR	L
	RET	Z
	DEC	HL
	LD	(_TXADR),HL
	PUSH	DE
	CALL	_POS
	LD	A,(CRTCD+1)
	SUB	L
	LD	L,A
	DEC	L
	LD	H,038H
	LD	BC,(_TXADR)
	ADD	HL,BC
	LD	B,H
	LD	C,L
	LD	DE,02000H	;D:Text E:kanji
	LD	HL,(_COLORF)	;L:Color
C8X1:
	CALL	C12S
	DEC	BC
	JR	NZ,C8X1
	POP	DE
	RET

CTRL05:
	CALL	_POS
	LD	A,(CRTCD+1)
	SUB	L
	LD	L,A
	LD	H,020H
	LD	BC,(_TXADR)
C05X1:
	LD	A,B
	OR	038H
	LD	B,A
	DB	0EDH,071H	;OUT (C),0	Z80未定義命令	kanji
	RES	3,B
	OUT	(C),H		;Text
	RES	4,B
	LD	A,(_COLORF)
	OUT	(C),A		;Color
	INC	BC
	DEC	L
	JR	NZ,C05X1
	RET

CTRL0D:
	CALL	_POS
	LD	L,0
LOC:
	PUSH	BC
	PUSH	HL
	CALL	KANCLR
	CALL	LOC1
	LD	(_TXADR),BC
	POP	HL
	POP	BC
	RET

CTRL01:
	LD	A,037H		;SCF
	LD	(INSFLG),A
	RET

CTRL0B:
	LD	HL,0
	LD	(_TXADR),HL
	RET

PRINTS:
	CALL	BREAK
	JP	_PRINT

CTRL1B:
	LD	A,1
	LD	(ESCFLG+1),A
	RET

LOC1:
	LD	B,H
	LD	C,L
	INC	B
	DEC	B
	RET	Z
	PUSH	DE
	LD	DE,(CRTCD+1)
	LD	HL,0
	LD	D,L
LOC2:
	ADD	HL,DE
	DJNZ	LOC2
	ADD	HL,BC
	POP	DE
LOC3:
	LD	B,H
	LD	C,L
	RET

CONOUT1:
	CALL	CURSOR
	LD	E,C
	CALL	_PRINT
	LD	A,E
	CP	00AH
	JR	NZ,CURSOR
	CALL	CTRL0D
	CALL	CTRL05
CURSOR:
	PUSH	BC
	LD	BC,(_TXADR)
	SET	5,B
	IN	A,(C)
	XOR	018H
	OUT	(C),A
	POP	BC
	RET

CTRL07:
	LD	HL,BEEPD
BEEP1:
	LD	A,(HL)
	INC	HL
	CP	0FFH
	RET	Z
	DI
	LD	B,01CH
	OUT	(C),A
	OUTI
	EI
	JR	BEEP1

OT49SB:
	PUSH	BC
	CALL	CANW
	LD	BC,01900H
	OUT	(C),A
	POP	BC
	RET

IN49SB:
	PUSH	BC
	LD	BC,01A01H
CANR:
	IN	A,(C)
	AND	020H
	JR	NZ,CANR
	LD	BC,01900H
	IN	A,(C)
	POP	BC
	RET

CANW:
	LD	BC,01A01H
	IN	C,(C)
	BIT	6,C
	JR	NZ,CANW
	RET

COMOUT:
	EI
	CALL	OT49SB
	CALL	CANW
	DI
	RET

CTRL12:
	PUSH	DE
	CALL	_POS
	LD	A,(CRTCD+1)
	SUB	L
	LD	BC,(_TXADR)
	LD	DE,02000H	;D:Text E:Kanji
	LD	HL,(_COLORF)	;L:Color
	SET	5,B
C12X1:
	CALL	C12S
	INC	BC
	JR	NZ,C12X1
	POP	DE
	RET

C12S:
	SET	4,B
	SET	3,B
	IN	H,(C)
X1PAT:	OUT	(C),E
	LD	E,H
	RES	3,B
	IN	H,(C)
	OUT	(C),D
	LD	D,H
	RES	4,B
	IN	H,(C)
	OUT	(C),L
	LD	L,H
	DEC	A
	RET

CTRL0C:
	CALL	CTRL0B
CTRL1A:
	LD	BC,(_TXADR)
C1AX1:
	LD	A,B
	OR	038H
	LD	B,A
	DB	0EDH,071H	;OUT (C),0	Z80未定義命令	kanji
	RES	3,B
	LD	A,020H
	OUT	(C),A		;Text
	RES	4,B
	LD	A,(_COLORF)
	OUT	(C),A		;Color
	INC	BC
	RES	5,B
	LD	HL,(CRTCD+10)
	ADD	HL,BC
	JR	NC,C1AX1
	RET

CTRL04:
	CALL	_POS
	LD	A,L
	OR	A
	RET	Z
CTRL03:
	CALL	CTRL0D
CTRL0A:
CTRL1F:
	LD	BC,(_TXADR)
	LD	HL,(CRTCD+1)
	LD	H,0
	ADD	HL,BC
	LD	B,H
	LD	C,L
	LD	HL,(CRTCD+10)
	ADD	HL,BC
	CCF
	SBC	A,A
	JP	PRINTE8

CTRL0E:
	CALL	_POS
	LD	A,H
	JR	SCR1
SCR:
	LD	A,(_LINE)
	DEC	A
SCR1:
	PUSH	BC
	PUSH	DE
	LD	BC,01F80H	;DMA
	LD	E,0C3H
	OUT	(C),E
	LD	DE,0659AH
	OUT	(C),E
	OUT	(C),D
	LD	DE,79
	OUT	(C),E
	OUT	(C),D

	LD	HL,03800H
	LD	DE,01C18H
	OUT	(C),D
	OUT	(C),E

SCRUP1:
	OR	A
	JR	Z,SCRCL
	PUSH	AF
	CALL	UPSUB		;kanji
	LD	DE,(CRTCD+12)
	LD	D,0F7H
	ADD	HL,DE
	PUSH	DE
	CALL	UPSUB		;Text
	POP	DE
	ADD	HL,DE
	CALL	UPSUB		;Color
	SET	4,H
	POP	AF
	DEC	A
	JR	SCRUP1

UPSUB:
	LD	DE,(CRTCD+1)
	LD	D,0
	LD	A,0CDH
	OUT	(C),A
	OUT	(C),L		;SOURCE
	OUT	(C),H
	ADD	HL,DE
	LD	A,01DH
	OUT	(C),A		;DEST
	OUT	(C),L
	OUT	(C),H
	LD	DE,0CF87H
	OUT	(C),D
	OUT	(C),E
	RET

SCRCL:
	LD	B,H
	LD	C,L
	LD	HL,02000H+80
	LD	A,(_COLORF)
SCRCL1:
	DB	0EDH,071H	;OUT (C),0	Z80未定義命令
	RES	3,B
	OUT	(C),H
	RES	4,B
	OUT	(C),A
	SET	3,B
	SET	4,B
	INC	BC
	DEC	L
	JR	NZ,SCRCL1
	POP	DE
	POP	BC
	RET

SCRN:
	PUSH	DE
	IN	E,(C)		;Text
	SET	3,B
	IN	D,(C)		;Kanji
	JR	Z,SCRNE
	XOR	A
	PUSH	BC
	LD	BC,03037H	;VRMJIS
	RST	018H
	LD	BC,02F52H	;JISSFT
	RST	018H
	POP	BC
	IN	A,(C)
	RES	3,B
	AND	040H
	JR	NZ,SCRN1
	LD	A,D
	POP	DE
	RET
SCRN1:
	LD	A,E
	POP	DE
	RET

SCRNE:
	POP	DE
	RES	3,B
SCRNX:
	IN	A,(C)
	RET

POS:
	LD	HL,(_TXADR)
	PUSH	BC
	LD	BC,(CRTCD+12)
	XOR	A
POS1:
	ADD	HL,BC
	INC	A
	JR	C,POS1
	SBC	HL,BC
	DEC	A
	LD	H,A
	POP	BC
	AND	A
	RET

GETL:
	CALL	_POS
	PUSH	HL
GETL1:
	CALL	_POS
	POP	BC
	PUSH	BC
	LD	A,L
	SUB	C
	LD	L,C
	LD	C,A
	CALL	C,_LOC
GET1W:
	CALL	_SYS08
	CP	8
	JR	NZ,GETL1X
	DEC	C
	BIT	7,C
	JR	NZ,GETL1X
	LD	A,2
GETL1X:
	CP	01BH
	JR	NZ,GETL1V
	CALL	_SYS08
	CP	022H
	JR	NZ,GETL1Y
	LD	HL,KBUF
	CALL	MSX
	JR	GETL1Z
GETL1Y:
	PUSH	AF
	LD	E,01BH
	CALL	_PRINT
	POP	AF
GETL1V:
	LD	E,A
	CALL	CTRL01
	CALL	_PRINT
GETL1Z:
	LD	A,E
	CP	00DH
	JR	NZ,GETL1

	LD	HL,KBUF
	XOR	A
	LD	BC,(CRTCD)
GETL0:
	LD	(HL),A
	INC	HL
	DJNZ	GETL0

	POP	DE
	CALL	_POS
	LD	L,E
	LD	A,(CRTCD+1)
	SUB	L
	LD	D,A
	CALL	LOC1
	LD	A,B
	OR	030H
	LD	B,A
	LD	E,D
	LD	HL,KBUF
GETL2:
	CALL	_SCRN
	INC	BC
	LD	(HL),A
	INC	HL
	DEC	E
	JR	NZ,GETL2
GETL3:
	DEC	HL
	LD	A,(HL)
	CP	021H
	RET	NC
	LD	(HL),0
	DEC	D
	JR	NZ,GETL3
	RET

INKEY:
	EI
	PUSH	HL
	LD	HL,(_KEYPS)
	LD	A,H
	XOR	L
	JR	Z,INKEY1
	LD	A,H
	INC	A
	LD	(_KEYPS+1),A
	LD	L,A
	LD	H,KEYBF/256
	LD	A,(HL)
INKEY1:
	POP	HL
	OR	A
	RET

AT_RS	EQU	SCR1-AT_SCR1

;LDFILE.ASM

;	LSX-Dodgers FILE

FILEC:
	CALL	FILE
FILEC2:
	LD	A,(FDRV+1)
	CP	020H
	RET	Z
	JR	SETDIR1

FILE:
	XOR	A
	LD	(FDRV),A
	LD	H,A
	LD	L,A
	LD	(FDRV+14),HL
	CALL	SPCUT
	CALL	CCHK3
	JR	Z,DEVI1
	INC	DE
	LD	A,(DE)
	DEC	DE
	CP	':'
	JR	NZ,DEVI1
	LD	A,(DE)		;DRIVE
	CALL	CAP
	SUB	'@'
	INC	DE
	INC	DE
	LD	(FDRV),A
DEVI1:
	LD	A,(DE)
	SUB	05CH
	JR	NZ,NOROOT
	LD	HL,0
	LD	(FDRV+26),HL
	INC	L
	LD	(FDRV+14),HL
	INC	DE
NOROOT:

SETDIR:
	CALL	FILED
	LD	A,(DE)
	CP	05CH
	RET	NZ
	INC	DE
SETDIR1:
	LD	A,010H		;Directory
	LD	(FDRV+13),A
	PUSH	DE
	LD	DE,FDRV
	LD	HL,(STABLE+2*00FH)
	CALL	JP_HL
	POP	DE
	OR	A
	RET	NZ

	LD	A,(FDRV+13)
	BIT	4,A
	RET	Z

	CALL	FILEI
	LD	HL,(FDRV+26)
	INC	HL
	LD	(FDRV+14),HL
	JR	SETDIR

FILED:
	CALL	FILEI

	LD	B,8
FILE2:
	CALL	CCHKF
	RET	Z
	CP	'*'
	JR	Z,FILE9
	CP	'.'
	JR	Z,FILE4
	LD	(HL),A
	INC	HL
	DJNZ	FILE2

FILE3:
	CALL	CCHKF
	RET	Z
	CP	'.'
	JR	NZ,FILE3

FILE4:
	LD	HL,FNAME+8
	LD	B,3

FILE4L:
	CALL	CCHKF
	RET	Z
	CP	'.'
	JR	NZ,FILE12
	LD	(FNAME),A	;Parent directory(..)
	LD	(FNAME+1),A
	LD	A,020H
FILE12:
	CP	'*'
	JR	Z,FILE10
	LD	(HL),A
	INC	HL
	DJNZ	FILE4L
	RET

FILE9:
	CALL	FILE10
	JR	FILE3

FILE10:
	LD	A,'?'

FILE7:
	LD	(HL),A
	INC	HL
	DJNZ	FILE7
	RET

FILEI:
	LD	A,020H
	LD	BC,11*256
	LD	HL,FNAME
	PUSH	HL
	CALL	FILE7
	POP	HL
	RET

CCHKF:
	LD	A,(DE)
	CALL	CCHK2
	RET	Z
	JP	FKAN

CCHK2:
	INC	C
	DEC	C
	RET	NZ
CCHK3:
	CP	'+'
	RET	Z
	CP	','
	RET	Z
	CP	'/'
	RET	Z
	CP	':'
	RET	Z
	CP	';'
	RET	Z
	CP	'='
	RET	Z
	CP	05CH
	RET	Z
	CP	020H
	RET	NC
	CP	A		;Z=1
	RET

SS1:
	INC	DE
SPCUT:
	LD	A,(DE)
	CP	020H
	JR	Z,SS1
	RET

SETDRVF:
	LD	DE,FDRV
SETDRV0:
	CALL	SETDRV
	POP	IY
	POP	BC
	POP	DE
	POP	HL
	RET

SETDRV:
	EX	(SP),HL		;HL=RETRN ADDRESS
	PUSH	DE		;PUSH HL/DE/BC/IY
	PUSH	BC
	LD	A,(DE)
	PUSH	DE
	EX	(SP),IY

	CALL	GETDRV
	INC	A
	LD	(IY+0),A	;(FCB)ドライブ番号
	DEC	A
	CALL	_CHGDRV

	JP	(HL)

GETDRV:
	AND	07FH
	SUB	001H
	JR	NC,GETDRV1
	LD	A,(_DVSW)	;Current Drive
GETDRV1:
	LD	(_DRV),A
	RET

SOPENX:
	CALL	CHKDDX
	JR	C,SOPENX1
	POP	BC
	JP	(HL)
SOPENX1:
	LD	DE,SFILE
	LD	A,(DE)
	CP	(IY+0)		;(FCB)ドライブ番号
	JR	NZ,SOPEN
	INC	DE
	PUSH	IY
	POP	HL
	INC	HL
	CALL	CPFILE
	JR	NZ,SOPEN

	LD	HL,(SCDIR)
	LD	(IY+14),L	;(FCB)アクセスするディレクトリのクラスタ番号+1
	LD	(IY+15),H

	LD	HL,(SFNDF)	;Direcroty location and Flags
	LD	(_FILEN),HL

	LD	DE,(SFBPS)
	LD	HL,SFILE
	LD	(HL),0FFH
	INC	HL
	RET
SOPEN:
	LD	HL,FILESE
SOPENC:
	LD	(OPENPAT+1),HL

	CALL	_RDFATX		;Detect Media
	JR	C,RDDERR

	XOR	A
	LD	(_FILEN),A
SOPEN0:
	CALL	LDDIRX
	JR	Z,SDIRX1

	CALL	MULSPC
	CALL	DC		;Sub Directory
	JR	C,SDIRX0
	LD	HL,(_DTBUF)
	LD	A,(HL)
	CP	'.'
	JR	Z,SOPEN1
SDIRX0:
	XOR	A
	LD	(_DIRF),A
	LD	(IY+14),1	;(FCB)レコード・サイズ
	LD	(IY+15),0
SDIRX1:
	LD	DE,(_DIRPS)	;Root Directory

SOPEN1:
SDECPAT:LD	C,32		;自己書き換え 1セクタ辺りのディレクトリエントリ数  1024=32 / 512=16
SOPEN1X:
	CALL	DC		;FILE SEARCH
	JR	C,RDDERR
	LD	HL,(_DTBUF)
SOPEN2:
	PUSH	DE
OPENPAT:CALL	FILESE		;(Self-rewriting)
	POP	DE
	JR	C,SOPENE
	JR	Z,NOTSE
SOPEN3:
	LD	A,(_DIRF)
	OR	A
	JR	NZ,SOPEN5
	INC	DE		;ルートディレクトリ
	PUSH	HL
MD_PAT:	LD	HL,12		;(Self-rewriting)MAXDIR
	SBC	HL,DE		;CF=0 なので SUB HL,DE
	POP	HL
	JR	NZ,SOPEN1
	JR	SOPEN6
SOPEN5:
	CALL	GNCLX	;END DIR
	RET	C
	CALL	ENDCLX
SOPEN6:
	JR	C,SOPEN1
NOTSE:
	SCF			;CF=1
	SBC	A,A		;A=0FFH
	RET

RDDERR:
	CP	A		;READ ERR CF=1 ZF=1
	SCF
	RET

NOPEN:
	LD	HL,FILESE
	LD	(OPENPAT+1),HL
	LD	IY,(_FCB)
	CALL	CHKWILDX
	JR	NC,NOTSE
	LD	A,(IY+0)	;(FCB)ドライブ番号
	DEC	A
	LD	(_DRV),A
	CALL	_CHGDRV
	RET	C

	CALL	LDDIRX
	LD	DE,(_FBPS)
	CALL	DC
	JR	C,RDDERR
	LD	A,(_FBCNT)
	DEC	A
	JR	Z,SOPEN3
NOPEN2:
	LD	HL,(_FBAD)
	LD	BC,020H
	ADD	HL,BC
	LD	C,A
	JR	SOPEN2

SOPENE2:
	LD	(_FBAD),HL
	LD	A,C
	LD	(_FBCNT),A
	LD	(_FBPS),DE
	LD	(_FCB),IY
SOPENE:
	XOR	A
	RET

COPEN:
	LD	(IY+13),020H	;(FCB)属性(アトリビュート)

	LD	HL,NEXTSE
	CALL	SOPENC
	RET	NC
	RET	Z
	LD	A,(_DIRF)
	SUB	001H
	RET	C
	LD	B,1
	CALL	WRDF
	RET	C
	LD	DE,(_CLPS)
	PUSH	DE
	CALL	DCPAT
	CALL	DRDNX
	LD	HL,(_DTBUF)	;ディレクトリエントリを0クリア
	LD	E,L
	LD	D,H
	INC	DE		;DE,DTBUF+1
SECSZM1:LD	BC,003FFH	;自己書き換え セクタサイズ-1(0x3FF:1023 or 0x1FF:511 or 0xFF:255)
	XOR	A		;データバッファをセクタサイズ分ゼロクリア
	LD	(HL),A
	LDIR

	LD	A,(_DIRF)
	OR	A
	JR	Z,COPENE	;ルートディレクトリ

	POP	DE		;DE=(_CLPS)
	PUSH	DE
	LD	A,(SPCPAT+1)	;1クラスタの論理セクタ数
COPEN1:
	DEC	A
	JR	Z,COPENE	;1セクタ辺りのセクタ数が2以上の場合
	PUSH	AF		;データバッファに入らないセクタもゼロクリア
	INC	DE
	PUSH	DE
	PUSH	BC
	CALL	DCPAT
	CALL	DWT16
	POP	BC
	POP	DE
	POP	AF
	JR	COPEN1
COPENE:
	LD	HL,(_DTBUF)
	POP	DE
	RET

DC:
	LD	(_CLPS),DE
	PUSH	BC
	PUSH	DE
	CALL	DCPAT
	CALL	DRDX
	POP	DE
	POP	BC
	RET

FILESE:
	LD	A,(HL)
	OR	A
	RET	Z		;END:ZF=1 CF=0
	CP	0E5H
	JR	Z,FILESE1
	PUSH	IY
	POP	DE
	INC	DE
	PUSH	HL
	CALL	CPFILE
	CALL	Z,CPFILE2
	POP	HL
	SCF
	RET	Z		;!!!:(ZF=1) CF=1
FILESE1:
	CALL	FNEXT
	JR	NZ,FILESE
ZF0_CF0_AFF_RET:
	OR	0FFH		;ZF=0 CF=0
	RET

NEXTSE:
	LD	A,(HL)
	OR	A
	SCF
	RET	Z		;!!!:ZF=1 CF=1
	CP	0E5H
	SCF
	RET	Z		;!!!:(ZF=1) CF=1
	CALL	FNEXT
	JR	NZ,NEXTSE
	JR	ZF0_CF0_AFF_RET

FNEXT:
	PUSH	HL
	LD	HL,_FILEN
	INC	(HL)
	POP	HL
	LD	DE,020H
	ADD	HL,DE
	DEC	C
	RET

CHKDDX:
	CALL	CHKWILDX
	RET	C
	PUSH	IY
	POP	DE
	INC	DE
	LD	HL,DDTB
	LD	B,DDS
CPNAME:
	PUSH	BC
	PUSH	DE
	LD	DE,CPBUF
	LD	BC,4
	LDIR
	POP	DE
	PUSH	DE
	PUSH	HL
	LD	HL,CPBUF
	CALL	CPFILE
	POP	HL
	POP	DE
	POP	BC
	JR	NZ,CPNAME1
	LD	A,(HL)
	INC	HL
	LD	H,(HL)
	LD	L,A
	RET
CPNAME1:
	INC	HL
	INC	HL
	DJNZ	CPNAME
	SCF
	RET

CPFILE:
	PUSH	BC
	LD	BC,00B00H
CPSTR1:
	LD	A,(DE)
	CP	'?'		;Wild card
	JR	Z,CPSTR2
	LD	A,(HL)
	CALL	FKANC
	PUSH	HL
	LD	H,A
	LD	A,(DE)
	RLC	C
	CALL	FKANC
	RRC	C
	CP	H		;CP (HL),(DE)
	POP	HL
	JR	NZ,CPSTR3
CPSTR2:
	INC	DE
	INC	HL
	DJNZ	CPSTR1
CPSTR3:
	POP	BC
	RET

CPFILE2:
	LD	A,(IY+13)	;(FCB)属性(アトリビュート)
	OR	0E1H
	CPL
	AND	(HL)
	RET

DCPAT:
	LD	HL,(_DTBUF)
	LD	A,(_DIRF)
	OR	A
	RET	Z

CLUST:
	PUSH	HL
CLSPAT:	LD	HL,8	;+8 (2D)  !ADDCL (Self-rewriting)
	ADD	HL,DE
	EX	DE,HL
	POP	HL
	RET
;ADD_DE_A:
;	ADD	A,E	;DE=DE+A
;	LD	E,A
;	ADC	A,D
;	SUB	E
;	LD	D,A
;	RET

ENDCL:
	LD	A,D	;END CLUSTER
CLPAT1:	CP	1	;164=356	(Self-rewriting)
	RET	NZ
	LD	A,E
CLPAT2:	CP	064H	;		(Self-rewriting)
	RET

ENDCLX:
	PUSH	DE
	CALL	DIVSPC
	CALL	ENDCL
	POP	DE
	RET
CAP:
	CP	'a'
	RET	C
	CP	'z'+1
	RET	NC
	SUB	020H
	RET
CAP2:
	CALL	CAP
CAP3:
	CALL	CAP4
	CP	021H
	RET	NC
	LD	A,0A0H
	RET
CAP4:
	CP	5
	RET	NZ
	LD	A,0E5H
	RET

CHDIR:
	CALL	GETDPBD
	JR	C,CHDIR2
	LD	(IX+01AH),L		;_SDIR_
	LD	(IX+01BH),H		;_SDIR_+1
CHDIR2:
	POP	IX
	RET

LDDIR:
	CALL	GETDPBD
	LD	E,(IX+01AH)		;_SDIR_
	LD	D,(IX+01BH)		;_SDIR_+1
	INC	DE
	LD	(IY+14),E	;(FCB)アクセスするディレクトリのクラスタ番号+1
	LD	(IY+15),D
	DEC	DE
	JR	CHDIR2

LDDIRX:
	LD	E,(IY+14)	;(FCB)アクセスするディレクトリのクラスタ番号+1
	LD	D,(IY+15)
	DEC	DE
	CALL	ENDCL
	CALL	NC,LDDIR
LDDIRS:
	LD	A,D
	OR	E
	LD	(_DIRF),A
	RET

KILL:
	CALL	CHKWILDX
	JR	C,KILLW
	CALL	CHKDDX
	CCF
	CALL	NC,SOPENX1
KILLS:
	LD	A,01FH
	CALL	NC,CHKATT
	RET	C
KILLSX:
	LD	(HL),0E5H	;DIR
	CALL	WTDB
	LD	DE,01AH
	ADD	HL,DE
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	JR	KILLS2
KILLS1:
	LD	DE,(_CLPS)	;FAT
KILLS2:
	CALL	ENDCL
	RET	NC		;CF=0
	LD	HL,0-2
	ADD	HL,DE
	RET	NC		;DE= 0 or 1
	PUSH	DE
	CALL	_GNCL
	LD	(_CLPS),DE
	POP	DE
	LD	HL,0
	CALL	NC,_SNCL
	JR	NC,KILLS1
	RET

KILLW:
	CALL	SOPEN
KILLW1:
	JR	C,KILLW2
	CALL	SOPENE2
	CALL	KILLS
	CALL	NOPEN
	JR	KILLW1
KILLW2:
	RET	Z
	CCF
	RET

CHKATT:
	PUSH	HL
	LD	DE,00BH
	ADD	HL,DE
	AND	(HL)
	POP	HL
	RET	Z
	SCF
	RET

NAME:
	CALL	CHKWILDX
	RET	C
	LD	DE,4
	ADD	HL,DE
	LD	(NAMEP+2),HL
	INC	HL
	CALL	CHKWILD
	RET	C

	CALL	SOPENX1
	LD	A,00FH
	CALL	NC,CHKATT
	RET	C

	LD	A,(IY+0)
	PUSH	IY
NAMEP:	LD	IY,0
	LD	(IY+0),A
	CALL	SOPENX1
	EX	(SP),IY
	CCF
	CALL	NC,SOPEN
	EX	DE,HL
	POP	HL
	RET	C

SETNAME:
	LD	BC,11*256
	INC	HL
	LD	A,(HL)
	CP	0E5H
	JR	NZ,SNAME1
	LD	A,5
	JR	SNAME3
SNAME1:
	LD	A,(HL)
	INC	C
	DEC	C
	JR	NZ,SNAME3
	CALL	CAP
	CP	0A0H
	JR	NZ,SNAME3
	LD	A,020H
SNAME3:
	LD	(DE),A
	LD	A,(HL)
	INC	HL
	CALL	FKAN
	DJNZ	SNAME1
WTDB:
	LD	A,0FFH
	LD	(SFILE),A
SWTDBF:
	LD	A,1
	LD	(_WTDBF),A
	XOR	A
	RET

FKANC:
	BIT	0,C
	CALL	Z,CAP2
	JR	FKANX
FKAN:
	INC	DE
FKANX:
	BIT	0,C
	RES	0,C
	RET	NZ
	CP	080H
	RET	C
	CP	0A0H
	JR	C,FKAN1
	CP	0E0H
	RET	C
FKAN1:
	INC	C
	AND	A
	RET

CHKWILDX:
	PUSH	IY
	POP	HL
	INC	HL
CHKWILD:
	LD	B,11
	LD	A,'?'
CHKWIL1:
	CP	(HL)
	INC	HL
	SCF
	RET	Z
	DJNZ	CHKWIL1
	XOR	A
	RET

SDIRENT:		;IY=FCB HL=DIR
	PUSH	DE
	PUSH	HL
	PUSH	IY
	POP	DE
	EX	DE,HL
	CALL	SETNAME
;				Attribute
	LD	A,(IY+13)	;(FCB)属性(アトリビュート)
	LD	(DE),A
	INC	DE
;				Reserved
	XOR	A
	LD	B,10
SDE1:
	LD	(DE),A
	INC	DE
	DJNZ	SDE1
					;(FCB)ファイルを最後に変更した時刻
	LD	HL,SDDATA		;(FCB)ファイルを最後に変更した日付
	LD	B,SDDATAE-SDDATA	;(FCB)ファイルの先頭クラスタ
SDLOOP:					;(FCB)ファイルのサイズ(バイト単位)
	LD	A,(HL)
	INC	HL
	LD	(SDPAT+2),A
SDPAT:	LD	A,(IY+0)	;LD A,(IY+A)
	LD	(DE),A
	INC	DE
	DJNZ	SDLOOP

	XOR	A
	POP	HL
	POP	DE
	RET

WOPEN:
	LD	A,(IY+13)	;(FCB)属性(アトリビュート)
	AND	01FH
	SCF
	RET	NZ
	LD	(IY+28),0FEH	;(FCB)オープン・モード
TOPEN2:
	XOR	A
TOPEN:				;Initializes the time stamp
	LD	(IY+23),0FFH	;(FCB)ファイルを最後に変更した時刻
	RET

WRDFX:
	LD	A,(SPCPAT+1)	;1クラスタの論理セクタ
L_WRFX:
	RRA		;->CF
	JR	C,E_WRFX
	SRL	C	;C=C/2
	JR	L_WRFX
E_WRFX:
	LD	B,C
	INC	B
	LD	A,037H		;SCF
	LD	(DRDN1),A

WRDF:				;Bクラスタ分FATを確保する
	LD	DE,2
	CALL	MULSPC
WRDF1:
	PUSH	BC
	PUSH	DE
	CALL	DIVSPC
	CALL	_GNCL
	JR	C,WRDF3
	LD	A,D		;空いているかチェック
	OR	E
	JR	NZ,WRDF4
	POP	HL		;HL=空いているクラスタ
	PUSH	HL
	LD	DE,(_CLPS)	;DE=元の(_CLPS)
	LD	(_CLPS),HL
	LD	A,D		;元の(_CLPS)が 0 か?
	OR	E
	EX	DE,HL		;
	CALL	DIVSPC		;ここでフラグは変化しない
	EX	DE,HL		;
	JR	NZ,WRDF2
	LD	(IY+26),L	;(FCB)ファイルの先頭クラスタ
	LD	(IY+27),H	;元が空の場合はFCBにクラスタをセットする
	JR	WRDF3
WRDF2:
	CALL	DIVSPC
	CALL	_SNCL
WRDF3:
	POP	DE
	POP	BC
	RET	C
	DJNZ	WRDF5		;ここでループカウンタチェック
	LD	DE,(_CLPS)
	CALL	DIVSPC
	LD	HL,0FFFFH	;FATエントリ終了(EOCマーク)
	JP	_SNCL

WRDF4:				;DEクラスタが空じゃないので次に移動する
	POP	DE
	POP	BC
WRDF5:
	CALL	DIVSPC
	INC	DE
	CALL	ENDCL
	CALL	MULSPC
	JR	C,WRDF1
	SCF
	RET

RWXR:
	LD	A,(SECSZ+2)	;1024=4 / 512=2 / 256=1
L_RWX:
	RRA		;->CF
	JR	C,E_RWX
	SRL	B	;BC=BC/2
	RR	C	;
	JR	L_RWX
E_RWX:
	LD	E,(IY+26)	;(FCB)ファイルの先頭クラスタ
	LD	D,(IY+27)
	CALL	MULSPC
RWX1:
	LD	(_CLPS),DE
	LD	A,D
	OR	E
	SCF
	RET	Z	;RET DE==0

	LD	A,B
	OR	C
	RET	Z	;RET BC==0

	CALL	GNCLX
	RET	C
	DEC	BC

	CALL	ENDCLX
	JR	C,RWX1
	SCF
	RET

DSKF:
MAXCLP:	LD	DE,0
	LD	HL,0
DSKF1:
	PUSH	DE
	CALL	_GNCL
	JR	C,POPSCF
	LD	A,D
	OR	E
	JR	NZ,DSKF2
	INC	HL
DSKF2:
	POP	DE
	DEC	DE
	LD	A,D
	OR	E
	JR	NZ,DSKF1
	RET

POPSCF:
	POP	AF
	SCF
	RET

SETTMS:
	LD	A,(IY+23)	;(FCB)ファイルを最後に変更した時刻
	INC	A
	RET	NZ		;ファイルが更新されていない
SETTMSX:			;FCBに日付時刻をセットする
	CALL	_SYS2C		;(BDOS)時刻の獲得
				;H←時  L←分  D←秒
	SLA	L		;L=L/2
	SLA	L		;L=L/2
	ADD	HL,HL		;*2
	ADD	HL,HL		;*4
	ADD	HL,HL		;*8
	LD	A,D
	RRCA			;bit.0->7->->->0->C
	AND	01FH
	OR	L
	LD	(IY+22),A	;(FCB)ファイルを最後に変更した時刻
	LD	(IY+23),H

	CALL	_SYS2A		;(BDOS)日付の獲得
				;HL←年  D←月  E←日
	LD	BC,0-1980
	ADD	HL,BC
	LD	H,L

	LD	A,D
	ADD	A,A		;*2
	ADD	A,A		;*4
	ADD	A,A		;*8
	ADD	A,A		;*16
	LD	L,A
	ADD	HL,HL		;*32
	LD	A,L
	OR	E
	LD	(IY+20),A	;(FCB)ファイルを最後に変更した日付
	LD	(IY+21),H
	RET

PUSHRR:
	CALL	SUBRR
POPRR1:
	LDIR
	RET

SUBRR:
	PUSH	IY
	POP	HL
	LD	DE,33
	ADD	HL,DE
	LD	DE,HLBUF
	LD	BC,3
	RET

SETSEQ:
	PUSH	AF		;AHL=Random record
	LD	A,(IY+33)	;(FCB)ランダム・レコード
	LD	L,(IY+34)
	LD	H,(IY+35)

	CALL	SSQ1

	ADD	HL,HL
	SRL	L		;L=L/2
	LD	(IY+32),L	;(FCB)カレント・レコード
	LD	(IY+12),H	;(FCB)カレント・ブロック
	POP	AF

POPRR:
	CALL	SUBRR
	EX	DE,HL
	JR	POPRR1

GETSIZE:
	LD	A,(IY+16)	;(FCB)ファイルのサイズ(バイト単位)
	LD	L,(IY+17)
	LD	H,(IY+18)
SSQ1:				;バイト単位からCP/Mのレコード単位を求める（1レコード=128バイト）
	ADD	A,A		;in HLA => out HL
	ADC	HL,HL
	OR	A
	RET	Z
	INC	HL
	RET

GETSEQ:
	LD	L,(IY+32)	;(FCB)カレント・レコード
	LD	H,(IY+12)	;(FCB)カレント・ブロック

	SLA	L	;L=L*2

	SRL	H	;HL=HL/2
	RR	L	;
	RET

RB_WRITE:
	PUSH	BC
	LD	BC,(STABLE+2*026H)	;(BDOS)ランダム・ブロック・ライト
	JR	RBRW
RB_READ:
	PUSH	BC
	LD	BC,(STABLE+2*027H)	;(BDOS)ランダム・ブロック・リード
RBRW:
	XOR	A	;HLA = HL*128
	SRL	H	;HL=HL/2
	RR	L	;
	RRA			;HLA
	LD	(IY+33),A	;(FCB)ランダム・レコード
	LD	(IY+34),L
	LD	(IY+35),H
	LD	HL,128

	PUSH	IY
	POP	DE
	PUSH	DE
	CALL	JP_BC
	POP	IY
	POP	BC
	RET
JP_BC:
	PUSH	BC
	RET

SFILE:	DS	33		;DRV FILENAME
HLBUF:	DS	3		;Random record buffer

;LDFILE2.ASM

;	LSX-Dodgers FILE2

RBWDD:
	PUSH	HL
	POP	BC
	LD	HL,NUL
	CALL	DDX
	JR	NZ,RBWDD2
	LD	HL,(STABLE+2*4)
RBWDD2:
	CP	'C'
	JR	NZ,RBWDD3
	LD	HL,PRINTS
RBWDD3:
	CP	'P'
	JR	NZ,RBWDD4
	LD	HL,(STABLE+2*5)
RBWDD4:
	LD	(RBWDDP+1),HL
	LD	HL,(_DTA)
RBWDD1:
	LD	A,B
	OR	C
RBWDD5:
	JP	Z,RBW1
	LD	E,(HL)
	INC	HL
RBWDDP:	CALL	_SYS02
	JP	C,RBRERR
	LD	A,01AH
	CP	E
	JR	Z,RBWDD5
	DEC	BC
	JR	RBWDD1

				;Write random block
_SYS26:		;(BDOS)ランダム・ブロック・ライト
	XOR	A
	LD	(DRDN1),A	;NOP
	LD	(LEFT+1),HL	;HL←書き込むレコード数
	LD	(LEFTX),HL
	CALL	SETDRV

	CALL	RBX0
	JP	C,RBWERR
	JR	Z,RBWDD		;デバイスデスクプリタ
	CALL	WOPEN
	JP	C,RBWERR
	LD	A,H
	OR	L
	JP	Z,RBW1

	DEC	HL

	CALL	GET_RR_CDE	;CDE=Random record

	XOR	A	;AHL=HL+CDE
	ADD	HL,DE
	ADC	A,C

	LD	B,A
	LD	C,H

	CALL	RWXR
	CALL	C,WRDFX
	JP	C,RBWERR
	
	CALL	RBX2
	JR	Z,RBWB		;NZ=セクタ以下の端数がある
	CALL	RBXA		
	JR	C,RBWERR
	EX	DE,HL
	PUSH	BC
	LDIR
	LD	(DTAX),HL

	CALL	SWTDBF		;バッファデータは更新された

	LD	HL,(LEFTX)
	POP	DE
	SBC	HL,DE
	LD	(LEFTX),HL
	JR	Z,RBWEND

RBWB:
	CALL	RBXB
	JR	Z,RBWC
RBWB1:
	PUSH	BC
	PUSH	DE
	CALL	CLUST
	CALL	DWT16
	POP	DE
	POP	BC
	JR	C,RBWERR
	CALL	GNCLX
	JR	C,RBWERR
	DJNZ	RBWB1
RBWC:
	CALL	RBXC
	JR	Z,RBWEND

	CALL	CLUST
	CALL	DRDN
	JR	C,RBWERR
	LD	DE,(_DTBUF)
	LDIR
	CALL	SWTDBF		;バッファデータは更新された
RBWEND:
	CALL	RBXEND

	CALL	RBX1
	JR	NC,RBW1
	LD	HL,(LEFT+1)
	LD	E,(IY+16)	;(FCB)ファイルのサイズ(バイト単位)
	LD	D,(IY+17)	;CDE=File size
	LD	C,(IY+18)
	XOR	A
	ADD	HL,DE
	ADC	A,C
	LD	(IY+16),L	;(FCB)ファイルのサイズ(バイト単位)
	LD	(IY+17),H
	LD	(IY+18),A
RBW1:
	POP	IY
	POP	BC
	POP	DE
	POP	HL
NUL:
	XOR	A
	RET

RBWERR:
	PUSH	IY
	POP	DE
	LD	HL,(STABLE+2*010H)
	CALL	JP_HL
RBRERR1:
	LD	A,001H
RBRERR2:
	POP	IY
	POP	BC
	POP	DE
	POP	HL
	SCF
	LD	HL,0
	RET

RBRERR:
	LD	A,0FFH
	JR	RBRERR2

RBRFL:
RBRFLP:	LD	A,000H
	CP	00DH
	JR	NZ,RBRFL1
	PUSH	DE
	LD	E,00AH
	JR	RBRFL2
RBRFL1:
	PUSH	DE
	CALL	_SYS07
	LD	E,A
RBRFL2:
	CALL	_PRINT
	LD	A,E
	POP	DE
	LD	(RBRFLP+1),A
	RET
DDX:
	LD	A,(IY+1)	;(FCB)主ファイル名
	CALL	CAP
	CP	'A'
	RET

RBRDD:
	PUSH	HL
	POP	BC
	LD	HL,RBRFL
	CALL	DDX
	JR	NZ,RBRDD2
	LD	HL,(STABLE+2*3)
	JR	RBRDD3
RBRDD2:
	CP	'C'
	JR	NZ,RBRDERR
RBRDD3:
	LD	(RBRDDP+1),HL

	LD	DE,(_DTA)
	LD	HL,0
RBRDD1:
	LD	A,B
	OR	C
	JR	Z,RBRDDE1
	INC	HL
RBRDDP:	CALL	RBRFL
	JR	C,RBRDDE
	CP	01AH
	JR	Z,RBRDDE
	CP	3
	JR	Z,RBRDDE
	LD	(DE),A
	INC	DE
	DEC	BC
	JR	RBRDD1

RBRDDE:
	LD	A,01AH
	LD	(DE),A
RBRDDE2:
	XOR	A
	INC	A
RBRDDE1:
	LD	(RBRAP+1),A
	JP	RBREND0
RBRDERR:
	LD	HL,0
	JR	RBRDDE2

				;Read random block
_SYS27:		;(BDOS)ランダム・ブロック・リード
	LD	(LEFTX),HL
	CALL	SETDRV

	BIT	4,(IY+13)	;(FCB)属性(アトリビュート)
	JP	NZ,RBRDIR	;ディレクトリ
	CALL	RBX0
	JP	C,RBRERR
	JR	Z,RBRDD
	CALL	RBX1
	JP	C,RBRERR1
	LD	A,C
	EX	DE,HL
	SBC	HL,DE		;CP 0HL,CDE
	ADD	HL,DE
	SBC	A,000H
	JR	C,RBR1
	EX	DE,HL
RBR1:
	SBC	A,A
	AND	1
	LD	(RBRAP+1),A

	LD	A,H
	OR	L
	JP	Z,RBREND0

	LD	(LEFT+1),HL	;Read record byte
	LD	(LEFTX),HL

	CALL	RBX2
	JR	Z,RBRB
	CALL	RBXA
	JP	C,RBRERR
	PUSH	BC
	LDIR
	LD	(DTAX),DE
	LD	HL,(LEFTX)
	POP	DE
	AND	A
	SBC	HL,DE
	LD	(LEFTX),HL
	JR	Z,RBREND

RBRB:
	CALL	RBXB
	JR	Z,RBRC
RBRB1:
	PUSH	BC
	PUSH	DE
	CALL	CLUST
	CALL	DRD16
	POP	DE
	POP	BC
	CALL	NC,GNCLX
	JP	C,RBRERR
	DJNZ	RBRB1
RBRC:
	CALL	RBXC
	JR	Z,RBREND

	CALL	CLUST
	CALL	DRDX
	JP	C,RBRERR
	EX	DE,HL
	LD	HL,(_DTBUF)
	LDIR
RBREND:
	CALL	RBXEND
RBREND0:
	POP	IY
	POP	BC
	POP	DE
	POP	AF	;(HL)
	XOR	A
RBRAP:	LD	A,000H
	RET

RBRDIR:
	LD	L,(IY+26)	;(FCB)ファイルの先頭クラスタ
	LD	H,(IY+27)
	CALL	CHDIR
	XOR	A
	LD	H,A
	LD	L,A
	INC	A
	LD	(RBRAP+1),A
	JR	RBREND0

RBX0:
	LD	HL,(_DTA)
	LD	(DTAX),HL
	LD	HL,(LEFTX)
	LD	A,(IY+28)	;(FCB)オープン・モード
	SUB	0FDH
	RET

RBX1:
	PUSH	HL		;Record byte
				;AHL=File size
	LD	L,(IY+16)	;ファイルのサイズ(バイト単位)
	LD	H,(IY+17)
	LD	A,(IY+18)

	CALL	GET_RR_CDE	;CDE=Random record

	AND	A
	SBC	HL,DE
	SBC	A,C
	POP	DE

	RET	C
	LD	C,A
	EX	DE,HL	;CDE=File byte	HL=Record byte
	OR	D
	OR	E
	RET	NZ
	SCF
	RET

RBX2:				;Cluster settings
	LD	C,(IY+34)	;(+33)(FCB)ランダム・レコード
	LD	B,(IY+35)
	CALL	RWXR
	LD	A,(SECSZM1+2)	;1024=3 / 512=1 / 256=0
	AND	(IY+34)
	OR	(IY+33)
	RET

RBXA:
	PUSH	DE
	CALL	CLUST
	CALL	DRDX
	POP	DE
	RET	C
	CALL	GNCLX
	RET	C
	LD	(_CLPS),DE

	LD	C,(IY+33)	;(FCB)ランダム・レコード
SECSZ:	LD	HL,0400H	;自己書き換え 1024=0400H / 512=0200H ここに1セクタのサイズが格納される
	LD	A,H
	DEC	A		;1024=3 / 512=1
	AND	(IY+34)		;(FCB)ランダム・レコード
	LD	B,A		;BCに1セクタ以下の端数が入る
	SBC	HL,BC		;残りを計算

	LD	DE,(LEFTX)
	SBC	HL,DE		;CP HL,DE
	ADD	HL,DE		;
	JR	C,RBXA1		;DEとHLを比較して大きい方をHLに
	EX	DE,HL
RBXA1:
	PUSH	HL
	LD	HL,(_DTBUF)
	ADD	HL,BC
	LD	DE,(DTAX)
	POP	BC
	RET

RBXB:
	LD	HL,(DTAX)
	LD	DE,(_CLPS)
	LD	A,(LEFTX+1)
	LD	B,A
	LD	A,(SECSZ+2)	;1024=4 / 512=2 / 256=1
RBXB1:
	RRA		;->CF
	JR	C,RBXB2
	SRL	B	;B=B/2
	JR	RBXB1
RBXB2:
	LD	A,B
	OR	A
	RET

RBXC:
	LD	BC,(LEFTX)
	LD	A,(SECSZM1+2)	;1024=3 / 512=1 / 256=0
	AND	B
	LD	B,A		;1セクタ以下の端数がない場合はZ
	OR	C
	RET

RBXEND:
LEFT:	LD	DE,0
	XOR	A
	LD	L,(IY+33)	;(FCB)ランダム・レコード
	LD	H,(IY+34)
	ADD	HL,DE
	ADC	A,(IY+35)
	LD	(IY+33),L	;(FCB)ランダム・レコード
	LD	(IY+34),H
	LD	(IY+35),A
	EX	DE,HL		;HL=Read byte
	RET

GET_RR_CDE:			;CDE=Random record
	LD	E,(IY+33)	;(FCB)ランダム・レコード
	LD	D,(IY+34)
	LD	C,(IY+35)
	RET

CPBUF:
LEFTX:	DW	0
DTAX:	DW	0
	DB	020H	;DS 7,20h
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
;

;LDDIO.ASM

;	LSX-Dodgers DIO

DRDX:
	CALL	DRDY
	RET	Z
	CALL	DRDX1		;データバッファの情報を保存
	RET	C
	PUSH	HL
	PUSH	BC
	PUSH	DE
	LD	HL,(_DTBUF)
	CALL	DRD16
	CALL	C,DRDNE
POP_DE_BC_HL_RET:
	POP	DE
	POP	BC
	POP	HL
	RET

DRDN:
	XOR	A
DRDN1:	NOP			;自己書き換え NOP / SCF
	JR	NC,DRDX
DRDNX:
	CALL	DRDY
	RET	Z
DRDX1:				;データバッファの情報を保存
	CALL	DWTX
	LD	(_DBSEC),DE
	LD	A,(_DRV)
	LD	(_DBDRV),A
	CALL	_CHGDRV
	RET	NC
DRDNE:
	SBC	A,A		;CF=1ならばA=0FFH
	LD	(_DBDRV),A
	RET

DRDY:
	PUSH	HL
	LD	A,(_DRV)
	LD	HL,_DBDRV
	XOR	(HL)
	JR	NZ,POP_HL_RET

	LD	HL,(_DBSEC)
	SBC	HL,DE		;CF=0
POP_HL_RET:
	POP	HL
	RET

DWTX:
	LD	A,(_WTDBF)
	OR	A
	RET	Z
	XOR	A
	LD	(_WTDBF),A

	PUSH	HL
	PUSH	BC
	PUSH	DE
	LD	A,(_DBDRV)
	CALL	_CHGDRV
	LD	DE,(_DBSEC)
	LD	HL,(_DTBUF)
	CALL	NC,DWT16
	JR	POP_DE_BC_HL_RET

RDFATX:
	PUSH	HL
	LD	A,(_DRV)
	LD	HL,_FATDRV
	XOR	(HL)
	JR	Z,POP_HL_RET

	PUSH	BC
	PUSH	DE
	PUSH	IX
	CALL	WTFATX
	JR	C,POP_IX_DE_BC_HL_RET

	XOR	A
	LD	(_FATIX),A
	LD	A,(_DRV)
	LD	(_FATDRV),A
	CALL	_RDFAT
RDFATE2:
	JR	NC,POP_IX_DE_BC_HL_RET
	SBC	A,A		;A=0xFF
	LD	(_FATDRV),A
POP_IX_DE_BC_HL_RET:
	POP	IX
	JR	POP_DE_BC_HL_RET

WTFATX:
	LD	A,(_WTFATF)
	OR	A
	RET	Z
	PUSH	HL
	LD	A,(_FATDRV)
	LD	HL,_DBDRV
	XOR	(HL)
	CALL	Z,DWTX
	JR	C,POP_HL_RET
	PUSH	BC
	PUSH	DE
	PUSH	IX
	CALL	WTFAT
	XOR	A
	LD	(_WTFATF),A
	JR	POP_IX_DE_BC_HL_RET

NCL1:
	LD	A,D
	OR	E
	SCF
	RET	Z

	LD	A,D
	AND	8		;DE(targetCluster >= 0x800)
N16CL1X:
	PUSH	HL
	LD	(NCLPAT+2),A	;_FATIX
	LD	HL,(_FATDRV)	;L=_FATDRV H=_FATIX
	CP	H
	LD	A,(_DRV)	;この間でフラグは変化しない
	LD	(NCLPAT+1),A	;_FATDRV
	JR	NZ,NCL2		;FATIXが違う
	CP	L
	JR	NZ,NCL2		;ドライブが違う
	POP	HL
	RET
NCL2:
	PUSH	BC
	PUSH	DE
	PUSH	IX
	CALL	WTFATX
	JR	C,POP_IX_DE_BC_HL_RET
NCLPAT:	LD	BC,0		;自己書き換え C=_FATDRV B=_FATIX
	LD	(_FATDRV),BC
	CALL	RDFATS
	JR	RDFATE2

NCL3:
	RES	3,D
	LD	L,E
	LD	H,D
	SRL	H	;
	RR	L	;HLA=HLA/2
	RRA		;
	LD	BC,(_FATBF)
	ADD	HL,DE
	ADD	HL,BC
	RLA
	RET

N16CL1:
	LD	A,D
	OR	E
	SCF
	RET	Z

	LD	A,D
	SRL	A	;/2
	SRL	A	;/2
	JR	N16CL1X

GNCL:
	CALL	NCL1		;GET NEXT CLUSTER
	RET	C
	PUSH	BC
	PUSH	HL
	CALL	NCL3
	JR	C,GNC1
	LD	E,(HL)
	INC	HL
	LD	A,(HL)
	AND	00FH
	LD	D,A
	POP	HL
	POP	BC
	RET
GNC1:
	LD	A,(HL)
	INC	HL
	LD	D,(HL)
	LD	B,4
GNC1L:
	SRL	D	;DA=DA/2
	RRA		;
	DJNZ	GNC1L

	LD	E,A
	POP	HL
	POP	BC
	AND	A
	RET

SNCL:
	CALL	NCL1
	RET	C
;				SET NEXT CLUSTER
	PUSH	HL
	PUSH	BC
	PUSH	DE
	PUSH	HL
	CALL	NCL3
	POP	DE
;CF=ODD
	LD	A,(HL)
	LD	(HL),E
	JR	C,SNC1
;EVEN
;M[0] = E
;M[1] = (M[1] & 0xF0) | (D & 0x0F)
	INC	HL
	RRD		;M={A[3:0],E[3:0]}
	LD	A,D
	JR	SNC11
SNC1:
;ODD
;HL[0] = (HL[0]&0x0F) | (E<<4)
;HL[1] = DE>>4
	RLD		;M={D[3:0],E[7:4]}
	INC	HL
	LD	(HL),D	;M={D[3:0],E[7:4]}
SNC11:
	RLD		;M={M[7:4],D[3:0]}
	OR	A
	POP	DE
	POP	BC
	POP	HL
FAT_CHANGED:
	LD	A,1
	LD	(_WTFATF),A
	RET

N16CL3:
	PUSH	BC
	LD	L,E
	LD	A,D
	AND	3
	LD	H,A
	ADD	HL,HL
	LD	BC,(_FATBF)
	ADD	HL,BC
	POP	BC
	RET

GNCL16:
	CALL	N16CL1		;GET NEXT CLUSTER for FAT16
	RET	C
	PUSH	HL
	CALL	N16CL3
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	POP	HL
	RET

SNCL16:
	CALL	N16CL1		;GET NEXT CLUSTER for FAT16
	RET	C
	PUSH	DE
	PUSH	HL
	CALL	N16CL3
	POP	DE		;HL
	LD	(HL),E
	INC	HL
	LD	(HL),D
	LD	L,E
	LD	H,D
	POP	DE
	JR	FAT_CHANGED

;------------------------
;次のセクタを探す際に「1クラスタの論理セクタ数」を掛けてまとめて扱う
;in
;	DE : セクタ番号×1クラスタの論理セクタ数＋α
;out
;	DE : 次のセクタ番号×1クラスタの論理セクタ数＋α
;note
;	「FAT12」最大12ビット + 「1クラスタの論理セクタ数」4ビットで計16ビットとして扱う
;------------------------
GNCLX:
	LD	A,E
	INC	A
NCPAT:	AND	0	;自己書き換え　1クラスタの論理セクタ数-1
	JR	Z,GNCLX1
	INC	DE	;クラスタを跨がない場合は単純に+1する
	RET
GNCLX1:
	CALL	DIVSPC	;クラスタを跨ぐ場合は
	CALL	_GNCL	;次のクラスタを探す

;------------------------
;クラスタと「1クラスタの論理セクタ数」を掛ける
;in
;	DE : セクタ番号
;out
;	DE : 掛けられた値
;note
;	DE以外のレジスタとフラグは保持する
;------------------------
MULSPC:
	PUSH	AF
	EX	DE,HL
SPCPAT:	LD	A,1		;自己書き換え（1クラスタの論理セクタ数）
CLDBL:
	RRCA			;->CF
	JR	C,CLDBL_RET
	ADD	HL,HL		;*2
	JR	CLDBL
CLDBL_RET:
	EX	DE,HL
POP_AF_RET
	POP	AF
	RET

;------------------------
;「1クラスタの論理セクタ数」を割って論理セクタだけに戻す
;in
;	DE : 掛けられた値
;out
;	DE : セクタ番号
;note
;	DE以外のレジスタとフラグは保持する
;------------------------
DIVSPC:
	PUSH	AF
	LD	A,(SPCPAT+1)	;1クラスタの論理セクタ
CLDIV1:
	RRCA			;->CF
	JR	C,POP_AF_RET
	SRL	D		;DE=DE/2
	RR	E		;
	JR	CLDIV1

RDFAT:
	LD	A,080H
	LD	(CHECK),A
RDFAT1:
	LD	A,(_DRV)
	CALL	CHGDRVR
	RET	C
	LD	A,(IX+012H)	;DPB_12_DEVICE
	BIT	5,A
	JP	Z,RDFAT0X
	LD	HL,CHECK
	AND	(HL)
	LD	(HL),A
	LD	DE,0		;BPB
	LD	HL,(_FATBF)
	CALL	DRD16
	JR	NC,GET_BPB
	LD	HL,CHECK
	RLC	(HL)
	CCF
	RET	C
	RR	(IX+00AH)	;DPB_0A_FDMODE
	CCF			;フロッピーディスクのMFMモードを切り替える
	RL	(IX+00AH)	;DPB_0A_FDMODE
	LD	A,0FFH
	LD	(_DSK),A
	LD	A,(_DRIVE)
	AND	3
	OR	080H
	LD	L,A
	LD	H,_CYL0/256
	LD	A,0FFH
	LD	(HL),A
	JR	RDFAT1
GET_BPB:
	PUSH	IY
	LD	IY,(_FATBF)	;BPB

	LD	A,(IY+0)	;BS_JmpBoot
	CP	0EBH		;Short jump
	JR	Z,BPBOK
	CP	0E9H		;Near jump
	JR	Z,BPBOK
	CP	060H		;X68k
	JR	Z,BPBOK
NOT_BPB
	POP	IY
	SCF
	RET
BPBOK:
	LD	A,(IY+13)	;BPB_SecPerClus
	LD	(IX+7),A	;DPB_07_SECPCL

	LD	A,(IY+16)	;BPB_NumFATs
	CP	2		;>2:NC
	LD	A,(IY+12)	;BPB_BytsPerSec
	JR	C,BPBFAT1
	CP	5
	JR	NC,NOT_BPB	;1セクタ1024以上は無効
	OR	080H
BPBFAT1:
	LD	(IX+00FH),A	;DPB_0F_BPS

	LD	A,(IY+22)	;BPB_FATSz16
	LD	(IX+0),A	;DPB_00_FATLN
	LD	A,(IY+23)	;BPB_FATSz16
	LD	(IX+1),A	;DPB_00_FATLN

	LD	L,(IY+14)	;BPB_RsvdSecCnt
	LD	H,(IY+15)
	LD	(IX+00EH),L	;DPB_0E_FATPS
	LD	E,(IY+22)	;BPB_FATSz16
	LD	D,(IY+23)
	LD	B,(IY+16)	;BPB_NumFATs
BPBDP1:				;BPB_FATSz16 * BPB_NumFATs
	ADD	HL,DE
	DJNZ	BPBDP1
BPBDP2:
	LD	(IX+010H),L	;DPB_10_DIRPS
	LD	(IX+011H),H
	PUSH	HL

	LD	L,(IY+17)	;BPB_RootEntCnt
	LD	H,(IY+18)
	LD	A,(IY+12)	;BPB_BytsPerSec
	LD	B,6
BPBBPS1:
	DEC	B
	RRCA
	JR	NC,BPBBPS1
BPBDE1:
	ADD	HL,HL
	DJNZ	BPBDE1

	LD	A,H
	LD	(IX+00BH),A	;DPB_0B_DIRSCNT

	POP	DE		;DPB_10_DIRPS
	LD	L,H
	LD	H,0
	ADD	HL,DE		;MAXDIR
	PUSH	HL
	LD	C,(IY+13)	;BPB_SecPerClus
	SLA	C
	XOR	A
	LD	B,A
	SBC	HL,BC
	LD	(IX+014H),L	;DPB_14_ADDCL16
	LD	(IX+015H),H

	LD	L,(IY+19)	;BPB_TotSec16
	LD	H,(IY+20)
	POP	DE		;DE=DPB_0B_MAXDIR
	LD	A,H
	OR	L
	JR	Z,NOT_BPB	;セクタ数が16ビットを超えるものは危険なので扱わない
	SBC	HL,DE
	LD	B,(IY+13)	;BPB_SecPerClus
BPBTC1:				;総クラスタ数 = 総セクタ数 / セクタサイズ
	RR	B
	JR	C,BPBTC2
	SRL	H
	RR	L
	JR	BPBTC1
BPBTC2:
	INC	HL
	INC	HL
	LD	(IX+8),L	;DPB_08_MAXCL
	LD	(IX+9),H

	LD	A,(IY+21)	;BPB_Media
	LD	(IX+6),A	;DPB_06_FATID

	BIT	7,(IX+00AH)	;DPB_0A_FDMODE
	JR	Z,NOT_FD
	LD	L,40		;MAXCYLの設定（要検討）
	CP	0FDH	;2D
	JR	Z,SETCYL
	LD	L,77
	CP	0FEH	;2HD
	JR	Z,SETCYL
	LD	L,80	;その他2DD等
SETCYL:
	LD	(IX+00CH),L	;DPB_0C_MAXCYL
	LD	A,(IY+24)	;BPB_SecPerTr
	LD	(IX+00DH),A	;DPB_0D_MAXSEC
NOT_FD:
	POP	IY
	CALL	CHGDRV2
RDFAT0X:
	CALL	RDFATS
	RET	C
	CP	(IX+6)		;DPB_06_FATID
	RET	Z
	SCF
	RET

DRD16:
	LD	C,0
DRD24:
	PUSH	IX
	LD	IX,(_DPB)
DRDPAT:	CALL	FDRD		;自己書き換え（ディスク読み込み）
POP_IX_RET:
	POP	IX
	RET

RDFATS:
	CALL	FATSETUP
	RET	C
RDFATL:
	PUSH	BC
	CALL	DRD16
	POP	BC
	RET	C
	DJNZ	RDFATL
	LD	HL,(_FATBF)
	LD	A,(HL)
	RET

DWT16:
	LD	C,0
DWT24:
	PUSH	IX
	LD	IX,(_DPB)
DWTPAT:	CALL	FDWT		;自己書き換え（ディスク書き込み）
	JR	POP_IX_RET

WTFAT:
	CALL	FATSETUP
	CALL	NC,WTFATL
	RET	C
	BIT	7,(IX+00FH)	;DPB_0F_BPS
	RET	Z		;予備FATが無い
	CALL	FATS2
	LD	A,(IX+0)	;DPB_00_FATLN
WTFAT2:
	INC	DE
	DEC	A
	JR	NZ,WTFAT2
WTFATL:
	PUSH	BC
	CALL	DWT16
	POP	BC
	RET	C
	DJNZ	WTFATL
	RET
;------------------------
;FATのセットアップ
;out
;	B  : FATセクタ数
;	DE : FAT先頭セクタ番号
;	HL : FATバッファポインタ
;	CF : 1=ドライブ切り替えエラー
;note
;	FATサイズがFATバッファを超える場合は
;	対象クラスタ領域==(_FATIX)によって
;	FAT12:FATの前半3KBと後半3KBを切り替える
;	FAT16:対象クラスタ1024毎に2KBを切り替える
;------------------------
FATSETUP:
	LD	A,(_FATDRV)
	CALL	CHGDRVR		;ドライブ切り替え
	RET	C
FATS2:
	LD	DE,(_FATPS)	;fat sector pos
FATSX:	JP	FATSETUP12	;自己書き換え

FATSETUP12:
	LD	HL,(_FATBF)
	LD	A,24		;3072 / 256 FATバッファに読み込めるセクタ数
	LD	B,(IX+00FH)	;DPB_0F_BPS
L_FATS2:
	RRA			;CF=0 なので A=A/2
	RR	B		;->CF
	JR	NC,L_FATS2

	LD	B,(IX+0)	;DPB_00_FATLN
	CP	B
	RET	NC		;DPB_00_FATLN x sectorSize < fatBufSize
;targetCluster
	LD	C,A		;C = skipCount
	LD	A,(_FATIX)	;(targetCluster >= 0x800)
	OR	A
	JR	Z,FATS3
;(targerCluster>=0x800)
FAT_SKP:
	INC	DE		;FATPS++
	DEC	B		;FATSIZE--
	DEC	C		;skipCnt--
	JR	NZ,FAT_SKP
	LD	C,B
FATS3:
	LD	B,C		;3 or 6 or 12
	XOR	A
	RET

FATSETUP16:
	LD	A,(IX+00FH)	;DPB_0F_BPS 512=2 1024=4
	LD	B,16		;2048 / 256 FATバッファに読み込むセクタ数 512=4/1024=2
	LD	H,A		;DPB_0F_BPS
L_F16S2:
	SRL	B		;/2
	RRA			;->CF
	JR	NC,L_F16S2

	LD	A,H		;DPB_0F_BPS
	LD	HL,(_FATIX)	;範囲は0-63(0-03FH):65535*2/2048
	LD	H,0
	LD	C,L		;_FATIX
L_F16S3:
	ADD	HL,HL
	ADD	A,A
	BIT	3,A
	JR	Z,L_F16S3

	ADD	HL,DE
	EX	DE,HL

	LD	A,C		;_FATIX
	LD	L,(IX+0)	;DPB_00_FATLN
	DEC	L		;DPB_00_FATLN-1
	XOR	L		;Lと同じか比較してCFを0に
	JR	NZ,F16E		;FATバッファが最後の場合はFATセクタ数を調整
	LD	A,L		;DPB_00_FATLN-1
	DEC	B
	AND	B
	LD	B,A
	INC	B
F16E:
	LD	HL,(_FATBF)
	RET

CHGDRV:
	PUSH	HL
	LD	HL,_DSK
	CP	(HL)
	JR	Z,CHGDRVE
CHGDRV1:
	PUSH	IX
	CALL	CHGDRV0
	LD	A,(_DSK)
	POP	IX
CHGDRVE:
	POP	HL
	RET

CHGDRV0:
	LD	L,A
	CALL	_GETDPB
	RET	C
	LD	(_DPB),IX
	LD	A,L
	LD	(_DSK),A
CHGDRV2:
	DI
	PUSH	BC
	PUSH	DE
	LD	(SPPAT2+1),SP

	LD	SP,IX

	POP	HL		;L=DPB_00_FATLN
	POP	HL		;DPB_02_DRD
	LD	(DRDPAT+1),HL

	POP	HL
	LD	(DWTPAT+1),HL	;DPB_04_DWT

	POP	HL		;L=DPB_06_FATID H=DPB_07_SECPCL
	LD	A,H
	LD	(SPCPAT+1),A	;1クラスタの論理セクタ数
	DEC	A
	LD	(NCPAT+1),A

	POP	HL		;DPB_08_MAXCL
	LD	A,L
	LD	(CLPAT2+1),A
	LD	A,H
	LD	(CLPAT1+1),A
	DEC	HL
	LD	(MAXCLP+1),HL

	POP	HL		;L=DPB_0A_FDMODE H=DPB_0B_DIRSCNT
	LD	A,L
	OR	0FEH
	LD	(FDMODE+1),A
	RLCA
	AND	3
	LD	(FSPAT+1),A
	LD	C,H

	POP	HL		;L=DPB_0C_MAXCYL H=DPB_0D_MAXSEC
	LD	A,L
	LD	(_MAXCYL),A
	LD	A,H
	LD	(MAXSEC+1),A

	POP	HL		;L=DPB_0E_FATPS H=DPB_0F_BPS
	LD	A,H		;DPB_0F_BPS
	AND	7
	LD	(SECSZ+2),A	;1セクタのサイズの上位1バイト 0x400 - 0x200 - 0x100
	DEC	A		;1セクタ512 2D/2DD/2HC/2HQ(2HD1.44MB)等
				;1セクタ1024 2HD/EMM/BRAM
				;1セクタ256 GRAM等
				;1024	512	256
	LD	(SECSZM1+2),A	;3	1	0	1セクタのサイズ-1したものの上位1バイト (0x3FF - 0x1FF - 0xFF)
	INC	A		;4	2	1
	ADD	A,A		;8	4	2
	ADD	A,A		;010H	8	4
	ADD	A,A		;020H	010H	8
	LD	(SDECPAT+1),A	;1セクタ辺りのディレクトリエントリ数
	DEC	A		;01FH	00FH	7
	LD	(SDECM1+1),A	;1セクタ辺りのディレクトリエントリ数-1

	LD	H,0
	LD	(_FATPS),HL

	POP	HL		;L=DPB_10_DIRPS
	LD	(_DIRPS),HL

	POP	HL		;L=DPB_12_DEVICE H=DPB_13_UNITNO
	LD	A,H
	LD	(_DRIVE),A

	POP	HL		;DPB_14_ADDCL16
	LD	(CLSPAT+1),HL

SPPAT2:	LD	SP,0		;元のSPを復元
	EI
	LD	HL,(_DIRPS)
	LD	B,0
	ADD	HL,BC
	LD	(MD_PAT+1),HL

	LD	HL,(MAXCLP+1);
	LD	DE,4086
	OR	A
	SBC	HL,DE
	JR	NC,SETFAT16
	LD	HL,GNCL		;FAT12
	LD	DE,SNCL
	LD	BC,FATSETUP12
	RES	5,(IX+00FH)	;DPB_0F_BPS(FAT12)
	JR	EXTRA1
SETFAT16:
	LD	HL,GNCL16	;FAT16
	LD	DE,SNCL16
	LD	BC,FATSETUP16
	SET	5,(IX+00FH)	;DPB_0F_BPS(FAT16)
EXTRA1:
	LD	(GNCPAT+1),HL
	LD	(SNCPAT+1),DE
	LD	(FATSX+1),BC
	POP	DE
	POP	BC
	XOR	A
	RET

GETDPBD:
	EX	(SP),IX
	PUSH	IX
	LD	A,(_DRV)
	JR	GETDPB1

CHGDRVR:
	CALL	_CHGDRV
	RET	C
	LD	A,(_DSK)
GETDPB1:
	JP	_GETDPB

GETDPB:
	CP	8
	CCF
	RET	C
	RRCA
	RRCA
	RRCA
	DB	0DDH		;Z80未定義命令
	LD	L,A		;LD	IXL,A
	DB	0DDH		;Z80未定義命令
	LD	H,DEVICE/256	;LD	IXH,DEVICE/256
	LD	A,(IX+0)	;DPB_00_FATLN
	OR	A		;CF=0の為
	BIT	6,(IX+00FH)	;DPB_0F_BPS
	RET	NZ		;FAT16
	BIT	5,(IX+012H)	;DPB_12_DEVICE
	RET	NZ		;BPB
	CP	001H		;A=0 THEN CF=1
	RET

FFLUSH:
	PUSH	AF
	LD	A,0FFH
	LD	(SFILE),A
	CALL	DWTX
	LD	A,0FFH
	LD	(_DBDRV),A
	CALL	WTFATX
	XOR	A
	LD	(_FATIX),A
	CPL
	LD	(_FATDRV),A
	POP	AF
	RET


;LDDISK.ASM

;	LSX-Dodgers DISK


SEEK:
	LD	A,D
	OR	E
	LD	A,001H
	JR	Z,DIV3

	LD	B,16
MAXSEC:	LD	C,000H
	XOR	A
	EX	DE,HL
DIV1:
	ADD	HL,HL
	ADC	A,A
	CP	C
	JR	C,DIV2
	SUB	C
	INC	L
DIV2:
	DJNZ	DIV1

	INC	A	;最小のセクタは１固定
	LD	D,L	;Quotient(TRACK)
DIV3:
	LD	E,A	;Remainder
	SRL	D	;CYLINDER
	SBC	A,A
	AND	010H	;SIDE
	LD	C,A

	LD	A,(_DRIVE)
	CP	4
	CCF
	RET	C
	OR	C
	LD	(MOPAT+1),A	;Motor off data
	LD	BC,00FFCH
	OR	080H		;Mortor on
	OUT	(C),A

	CALL	SETMODE
	RET	C

	CALL	DRIVE
	CP	0FFH		;A=0FFH Unknown CYLINDER
	CALL	Z,FDCRES	;Restore
	LD	C,0F9H
	OUT	(C),A		;Currrent CYLINDER
	SUB	D
	RET	Z		;No seek

	LD	A,(_ISEEK)
	LD	C,A

	LD	A,(_MAXCYL)	;Max CYLINDER
	DEC	A
	CP	D		;Over CYLINDER
	RET	C

	CP	C		;for Built-in 2DD
	JR	C,SETM2
	LD	A,B		;B=00FH
	IN	A,(0FEH)		;2HD mode for 2DD seek
SETM2:
	LD	A,B
	IN	A,(0FDH)		;MFM mode

	LD	C,0FBH
	OUT	(C),D
	LD	(HL),D
	LD	C,018H		;Seek
FDCCMD2:
	LD	A,(_SEEKSP)
FSPAT:	AND	0FFH
	OR	C

FDCCMD:
	CALL	COMSET

FDCPAT:	LD	A,080H		;FDC COMMAND(Self-rewriting)
	AND	020H		;Write data Write track
	INC	A

SST:
	LD	C,0
SST1:
	DEC	C		; 4
	JR	NZ,SST1		;12 * 256 / 4 = About 1ms
	DEC	A
	JR	NZ,SST1

	INC	A		;A=1
	CALL	READY
SETMODE:
	LD	A,B		;B=00FH
FDMODE:	IN	A,(0FFH)		;Floppy mode(2D/2HD) (Self-rewriting)

	LD	A,B
	IN	A,(0FDH)		;MFM mode

	CALL	DELAY0		;Head select time
	LD	A,081H
READY:
	LD	(WAITA+1),A
	PUSH	HL
	LD	C,0F8H
	LD	H,C
READY2:
	IN	A,(C)
WAITA:	AND	081H		;NOT READY,BUSY
	JR	Z,READYE
	EX	(SP),HL		;wait 19clock
	EX	(SP),HL		; //
	DEC	HL
	LD	A,H
	OR	L
	JR	NZ,READY2
	SCF
READYE:
	POP	HL
	RET

FDCRES:
	LD	(HL),0
	LD	C,8
	JR	FDCCMD2

FDMOFF:
	PUSH	AF
	PUSH	BC
	LD	BC,00FFCH	;Motor off
MOPAT:	LD	A,000H		;(Self-rewriting)
	OUT	(C),A
	POP	BC
	POP	AF
	RET

SECSET:
	LD	BC,00FFAH
	OUT	(C),E
COMSET:
	LD	C,0F8H
	OUT	(C),A
DELAY0:
	LD	A,26
DELAY:
	DEC	A
	JR	NZ,DELAY
	RET

DRIVE:
	LD	HL,(_DRIVE)
	LD	H,_CYL0/256
	SET	7,L
	LD	A,(HL)
	RET

RNF:
	CALL	DRIVE
	LD	(HL),0FFH
	RET

RETRY:	DB	2


;	FLOPPY DISK DRIVER(DMA)


WTTRK:
	LD	A,0F4H
	JR	WTTRK1
FDWT:
	LD	A,0A0H
WTTRK1:
	LD	(FDCPAT+1),A
	LD	A,16
	JR	DISK

FDRD:
	LD	A,080H
	LD	(FDCPAT+1),A
	LD	A,14

DISK:
	LD	(DMAPAT+1),A

	LD	(DMAD+11),HL
DISKR:
	LD	A,2		;Retry count
	LD	(RETRY),A
DISK2:
	PUSH	DE
	CALL	SEEK
	JR	C,ERRF
	DI

DMAPAT:	LD	A,14		;自己書き換え
	LD	HL,DMAD
	CALL	SETDMA
	OUT	(C),C		;OUT 01F87H,087H
	LD	A,(FDCPAT+1)
	PUSH	BC
	CALL	SECSET
	LD	HL,(DMAD+11)
	INC	HL
	LD	DE,0BB06H	;READ DMA

	LD	A,3
	CALL	READY
	IN	A,(C)

	POP	BC
	OUT	(C),D
	OUT	(C),E
	IN	E,(C)
	IN	D,(C)
	ADD	HL,DE
	POP	DE
	INC	DE
	EI
	CALL	FDMOFF
	OR	A
	RET	Z
	DEC	DE
	BIT	4,A
	CALL	NZ,RNF
DISKE2:
	LD	HL,RETRY
	DEC	(HL)
	JR	NZ,DISK2
	OR	A
	JR	Z,ERR
	PUSH	DE
ERRF:
	POP	DE
DELP:
	CALL	RNF
	CALL	FDMOFF
	LD	A,(_SEEKSP)
	ADD	A,A
	SBC	A,A
	JR	C,ERR
DELP1:
	PUSH	DE
	LD	HL,DEMES
	CALL	MSX
	CALL	KEYBC
DELP2:
	CALL	_INKEY
	JR	Z,DELP2

	POP	DE
	CALL	CAP
	CP	'R'		;Retry
	JP	Z,DISKR
	CP	'I'		;Ignore
	JR	Z,IGNORE
	CP	'A'		;Abort
	JR	NZ,DELP1
	JP	BOOT
IGNORE:
	LD	A,0FFH
ERR:
	CP	A
	SCF
	RET

SETDMA:
	LD	BC,01F87H
SDMA:
	INC	B
	OUTI
	DEC	A
	JR	NZ,SDMA
	RET

DMAD:	DB	0C3H,07DH,0FBH,00FH,0FFH,0FFH,02CH,010H		;X1turbo
	DB	080H,092H,08DH,000H,000H,0CFH,001H,0CFH		;DISK DMA

DMAE:

AT_R	EQU	WTTRK-AT_WTTRK

;LDCALL.ASM

;	LSX-Dodgers TABLES

BEEPD:	DB	0,08EH,1,0,00BH,0,00CH,010H
	DB	007H,03EH,008H,010H,00DH,0,0FFH

CHECK:	DB	0

;	CTRLTB:アドレス下位1バイトが080Hになるように

CTRLTB:
	DW	PRINTE,CTRL01,CTRL02,CTRL03
	DW	CTRL04,CTRL05,CTRL1A,CTRL07
	DW	CTRL08,CTRL09,CTRL0A,CTRL0B
	DW	CTRL0C,CTRL0D,CTRL0E,PRINTE
	DW	PRINTE,PRINTE,CTRL01,PRINTE
	DW	PRINTE,PRINTE,PRINTE,PRINTE
	DW	PRINTE,PRINTE,CTRL1A,CTRL1B
	DW	CTRL1C,CTRL1D,CTRL1E,CTRL1F

DEMES:	DB	3,7
	DB	"Device I/O Error",5,3
	DB	"Abort Retry Ignore?",5,3,0

SDDATA:	DB	22,23		;(FCB)ファイルを最後に変更した時刻
	DB	20,21		;(FCB)ファイルを最後に変更した日付
	DB	26,27		;(FCB)ファイルの先頭クラスタ
	DB	16,17,18,19	;(FCB)ファイルのサイズ(バイト単位)
SDDATAE:

SCDIR:	DS	2		;+14 +15
SFBPS:	DS	2		;FBPS
SFNDF:	DS	2		;FILEN DIRF

_FATPS:	DW	0
_DIRPS:	DW	0
_CLPS:	DW	0

_PE:

;	LSX-Dodgers SYSTEM CALL
;	STABLE:アドレス下位1バイトが0になるように

STABLE:
;0
	DW	 00000H,_SYS01,_SYS02,_SYS03
	DW	_SYS04,_SYS05,_SYS06,_SYS07
	DW	_SYS08,_SYS09,_SYS0A,_SYS0B
	DW	_SYS0C,_SYS0D,_SYS0E,_SYS0F
;1
	DW	_SYS10,_SYS11,_SYS12,_SYS13
	DW	_SYS14,_SYS15,_SYS16,_SYS17
	DW	_SYS18,_SYS19,_SYS1A,_SYS1B
	DW	_SYS1C,_SYS1D,_SYS1E,_SYS1F
;2
	DW	_SYS20,_SYS21,_SYS22,_SYS23
	DW	_SYS24,_ERROR,_SYS26,_SYS27
	DW	_SYS28,_SYS29,_SYS2A,_SYS2B
	DW	_SYS2C,_SYS2D,_SYS2E,_SYS2F
;3
	DW	_SYS30

;LDWORK.ASM

;	LSX-Dodgers WORK

DDS	EQU	4
DDTB:
	DB	"CON "
	DW	OPENDD
	DB	"AUX "
	DW	OPENDD
	DB	"PRN "
	DW	OPENDD
	DB	"NUL "
	DW	OPENDD

	DS	2
_FATBF:	DW	FATBF
_DTBUF:	DW	DTBUF

;	_CYL0:アドレス下位1バイトが080Hになるように
_CYL0:	DB	0FFH	;Cylinder
_CYL1:	DB	0FFH	;Cylinder
_CYL2:	DB	0FFH	;Cylinder
_CYL3:	DB	0FFH	;Cylinder
_DRIVE:	DB	0	;unit number
_SEEKSP:DB	0	;Seek speed
_ISEEK:	DB	0FFH	;
_DVSW:	DB	0
_DRV:	DB	0
_DSK:	DB	0FFH
_DTA:	DW	00080H
_CTC:	DW	0
_TXADR:	DW	0
_KEYPS	DW	0
_KEYD	DW	0FF00H
_KEYSP:	DW	010C2H
_COLORF:DB	7
_LINE:	DB	LINE

_FCB:	DW	0
_FBPS:	DW	0	;SEARCH FILES
_FBAD:	DW	0	;    //
_FBCNT:	DB	0	;    //
_FILEN:	DB	0
_DIRF:	DB	0
_MAXCYL:DB	0
_WTFATF:DB	0	;FATバッファの更新フラグ
		DS	1
_WTDBF:	DB	0	;データバッファの更新フラグ
_DBDRV:	DB	0FFH	;データバッファにあるデータを読み込んだドライブ
_DBSEC:	DW	0	;データバッファにあるデータを読み込んだセクタ番号
_DPB:	DW	0
_FATDRV:DB	0FFH	;FATバッファに読み込んでいるドライブ
_FATIX:	DB	0	;FATバッファに読み込んでいるインデックス

	DS	4

CRTCD:	DB	06FH,050H,059H,038H,01FH,002H,019H,01CH
	DB	000H,007H
	DW	0-80*LINE,0-80
	DB	00CH
WK1FD0:	DB	0A0H

CTC0:	DW	INTCTCE
CTC1:	DW	INTCTCE
CTC2:	DW	INTCTC2
CTC3:	DW	INTCTCE
INTVEC:	DW	INT

;	JUMP

_INKEY:	JP	INKEY
_PRINT:	JP	PRINT
_SCRN:	JP	SCRN
_POS:	JP	POS
_LOC:	JP	LOC
_CHGDRV:JP	CHGDRV
_GETDPB:JP	GETDPB
_FFLUSH:JP	FFLUSH
_RDFATX:JP	RDFATX
_RDFAT:	JP	RDFAT
_WTTRK:	JP	WTTRK
_FDRD:	JP	FDRD
_FDWT:	JP	FDWT
_DRD:	JP	DRD16
_DWT:	JP	DWT16
_GNCL:
GNCPAT:	JP	GNCL		;自己書き換え
_SNCL:
SNCPAT:	JP	SNCL		;自己書き換え
_COMANL:JP	COMANL

WE:

;LDDPB.ASM

;	LSX-Dodgers DPB

DEVICE:

;	A:

	DW	2	;DPB_00_FATLN
	DW	_FDRD	;DPB_02_DRD
	DW	_FDWT	;DPB_04_DWT
	DB	0FDH	;DPB_06_FATID
	DB	2	;DPB_07_SECPCL
	DW	356	;DPB_08_MAXCL
	DB	0FFH	;DPB_0A_FDMODE	0FFH=2D / 0FEH=2HD
	DB	7	;DPB_0B_DIRSCNT
	DB	40	;DPB_0C_MAXCYL
	DB	9	;DPB_0D_MAXSEC	Number of sectors
	DB	1	;DPB_0E_FATPS
	DB	082H	;DPB_0F_BPS
	DW	5	;DPB_10_DIRPS
	DB	0A7H	;DPB_12_DEVICE	Device Number
	DB	0	;DPB_13_UNITNO
	DW	8	;DPB_14_ADDCL16
	DW	0	;DPB_16
	DW	0	;DPB_18
	DW	0	;DPB_1A_SDIR
	DB	"FDD0"	;DPB_1C_NAME

;	B:

	DW	2	;DPB_00_FATLN
	DW	_FDRD	;DPB_02_DRD
	DW	_FDWT	;DPB_04_DWT
	DB	0FDH	;DPB_06_FATID
	DB	2	;DPB_07_SECPCL
	DW	356	;DPB_08_MAXCL
	DB	0FFH	;DPB_0A_FDMODE	0FFH=2D / 0FEH=2HD
	DB	7	;DPB_0B_DIRSCNT
	DB	40	;DPB_0C_MAXCYL
	DB	9	;DPB_0D_MAXSEC	Number of sectors
	DB	1	;DPB_0E_FATPS
	DB	082H	;DPB_0F_BPS
	DW	5	;DPB_10_DIRPS
	DB	0A7H	;DPB_12_DEVICE	Device Number
	DB	1	;DPB_13_UNITNO
	DW	8	;DPB_14_ADDCL16
	DW	0	;DPB_16
	DW	0	;DPB_18
	DW	0	;DPB_1A_SDIR
	DB	"FDD1"	;DPB_1C_NAME

;	C:

	DW	2	;DPB_00_FATLN
	DW	_FDRD	;DPB_02_DRD
	DW	_FDWT	;DPB_04_DWT
	DB	0FDH	;DPB_06_FATID
	DB	2	;DPB_07_SECPCL
	DW	356	;DPB_08_MAXCL
	DB	0FFH	;DPB_0A_FDMODE	0FFH=2D / 0FEH=2HD
	DB	7	;DPB_0B_DIRSCNT
	DB	40	;DPB_0C_MAXCYL
	DB	9	;DPB_0D_MAXSEC	Number of sectors
	DB	1	;DPB_0E_FATPS
	DB	082H	;DPB_0F_BPS
	DW	5	;DPB_10_DIRPS
	DB	0A7H	;DPB_12_DEVICE	Device Number
	DB	2	;DPB_13_UNITNO
	DW	8	;DPB_14_ADDCL16
	DW	0	;DPB_16
	DW	0	;DPB_18
	DW	0	;DPB_1A_SDIR
	DB	"FDD2"	;DPB_1C_NAME

;	D:

	DW	2	;DPB_00_FATLN
	DW	_FDRD	;DPB_02_DRD
	DW	_FDWT	;DPB_04_DWT
	DB	0FDH	;DPB_06_FATID
	DB	2	;DPB_07_SECPCL
	DW	356	;DPB_08_MAXCL
	DB	0FFH	;DPB_0A_FDMODE	0FFH=2D / 0FEH=2HD
	DB	7	;DPB_0B_DIRSCNT
	DB	40	;DPB_0C_MAXCYL
	DB	9	;DPB_0D_MAXSEC	Number of sectors
	DB	1	;DPB_0E_FATPS
	DB	082H	;DPB_0F_BPS
	DW	5	;DPB_10_DIRPS
	DB	0A7H	;DPB_12_DEVICE
	DB	3	;DPB_13_UNITNO
	DW	8	;DPB_14_ADDCL16
	DW	0	;DPB_16
	DW	0	;DPB_18
	DW	0	;DPB_1A_SDIR
	DB	"FDD3"	;DPB_1C_NAME

;	E:

EMMFL:	DW	0	;DPB_00_FATLN
EMMRD:	DW	EDRDC	;DPB_02_DRD
EMMWR:	DW	EDWTC	;DPB_04_DWT
	DB	0FEH	;DPB_06_FATID
	DB	1	;DPB_07_SECPCL
EMMCL:	DW	0	;DPB_08_MAXCL
	DB	0	;DPB_0A_FDMODE
	DB	6	;DPB_0B_DIRSCNT
EMMBL:	DB	0	;DPB_0C_MAXCYL
	DB	1	;DPB_0D_MAXSEC
	DB	1	;DPB_0E_FATPS
	DB	4	;DPB_0F_BPS
	DW	5	;DPB_10_DIRPS
	DB	6	;DPB_12_DEVICE
EMMDV:	DB	0	;DPB_13_UNITNO
	DW	9	;DPB_14_ADDCL16
	DW	0	;DPB_16
	DW	0	;DPB_18
	DW	0	;DPB_1A_SDIR
	DB	"EMM0"	;DPB_1C_NAME

;	F:

BANKFL:	DW	0	;DPB_00_FATLN
	DW	BDRDC	;DPB_02_DRD
	DW	BDWTC	;DPB_04_DWT
	DB	0F9H	;DPB_06_FATID
	DB	1	;DPB_07_SECPCL
BANKCL:	DW	0	;DPB_08_MAXCL
	DB	0	;DPB_0A_FDMODE
	DB	4	;DPB_0B_DIRSCNT
	DB	0	;DPB_0C_MAXCYL
	DB	1	;DPB_0D_MAXSEC
	DB	0	;DPB_0E_FATPS
	DB	4	;DPB_0F_BPS
	DW	1	;DPB_10_DIRPS
	DB	00BH	;DPB_12_DEVICE
	DB	0	;DPB_13_UNITNO
	DW	3	;DPB_14_ADDCL16
	DW	0	;DPB_16
	DW	0	;DPB_18
	DW	0	;DPB_1A_SDIR
	DB	"BRAM"	;DPB_1C_NAME

;	G:

	DW	1	;DPB_00_FATLN
	DW	GDRD	;DPB_02_DRD
	DW	GDWT	;DPB_04_DWT
	DB	0F9H	;DPB_06_FATID
	DB	4	;DPB_07_SECPCL
	DW	48	;DPB_08_MAXCL
	DB	0	;DPB_0A_FDMODE
	DB	4	;DPB_0B_DIRSCNT
	DB	0	;DPB_0C_MAXCYL
	DB	1	;DPB_0D_MAXSEC
	DB	0	;DPB_0E_FATPS
	DB	1	;DPB_0F_BPS
	DW	4	;DPB_10_DIRPS
	DB	5	;DPB_12_DEVICE
	DB	1	;DPB_13_UNITNO
	DW	0	;DPB_14_ADDCL16
	DW	0	;DPB_16
	DW	0	;DPB_18
	DW	0	;DPB_1A_SDIR
	DB	"GRAM"	;DPB_1C_NAME



LDEND:	DB	0

	END
