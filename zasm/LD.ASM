.Z80
;	LSX-Dodgers for X1/turbo/Z
;	Programmed by
;	Gaku Nakagawa as Larn M.R.(Lovers)

RUN	EQU	0C600h

;	OFFSET	08000h-RUN	;BA00H?
	ORG	RUN		;C600H

MAC	EQU	01D80h		;X1
VER	EQU	00123h

;
;	$INCLUDE	LDDEF
;
;	LSX-Dodgers DEF
;
STACK	EQU	0000h
SYSTEM	EQU	0005h
[HL]	EQU	000Fh
FCB1	EQU	005Ch
FCB2	EQU	006Ch
DTA1	EQU	0080h
FDRV	EQU	0100h-37
FNAME	EQU	FDRV+1
DECBF	EQU	FDRV-5
FATBF	EQU	0EE00h
DTBUF	EQU	0FA00h
KEYBF	EQU	0FE00h
KBUF	EQU	0FF00h
DTA	EQU	KBUF+81
EXTSP	EQU	0FFD4h
LINE	EQU	24
;
;
;
;	$INCLUDE	LDINIT
;
;
;	LSX-Dodgers INIT
;

	JP	START
MACHINE:DW	MAC
VERSION:DW	VER

START:
	DI
	IM	2
	LD	SP,STACK
	LD	A,01Eh
	OUT	(0),A

	LD	BC,0
	LD	(_CTC),BC
	LD	BC,0A04h
	CALL	CHKCTC
	LD	BC,0704h
	CALL	CHKCTC
	LD	BC,1FA8h
	CALL	CHKCTC
	LD	BC,1FA0h
	CALL	CHKCTC
;
INISIO:
	LD	BC,1F91h	;INIT SIO
	LD	D,1
	OUT	(C),D
	DB	0EDh,71h
;	OUT	(C),0		;未定義命令ニーモニック
	LD	C,93h
	OUT	(C),D
	DB	0EDh,71h
;	OUT	(C),0		;未定義命令ニーモニック
	LD	C,99H		;INIT SIO
	LD	D,1
	OUT	(C),D
	DB	0EDh,71h
;	OUT	(C),0		;未定義命令ニーモニック
	LD	C,9BH
	OUT	(C),D
	DB	0EDh,71h
;	OUT	(C),0		;未定義命令ニーモニック

	LD	C,80H		;INIT DMA
	LD	HL,0C306H
INIDMA:
	OUT	(C),H
	DEC	L
	JR	NZ,INIDMA

	LD	A,0E4H
	CALL	COMOUT
	XOR	A
	CALL	OT49SB

	LD	A,INTVEC/256
	LD	I,A
	LD	BC,(_CTC)
	DEC	BC
	DEC	BC

	DB	0EDh,71h
;	OUT	(C),0		;未定義命令ニーモニック
	LD	A,CTC0
	OUT	(C),A

	INC	C
	LD	A,47H
	OUT	(C),A
	LD	A,13		;Baudrate 9600-13
	OUT	(C),A

	LD	A,C
	SUB	10H
	LD	C,A
	LD	(SIOAD+1),BC
	LD	(SIOAD0+1),BC
	LD	(SIOAD1+1),BC

	LD	HL,SIODATA
SINIT1:
	LD	A,(HL)
	INC	HL
	CP	0FFh
	JR	Z,SINIT2
	OUT	(C),A
	JR	SINIT1
SINIT2:
	LD	A,0E4H
	CALL	COMOUT
	LD	A,INTVEC
	CALL	OT49SB
;
	LD	BC,1FC4H
	LD	A,0CH
	OUT	(C),A

	LD	C,0C0H
	DB	0EDh,71h
;	OUT	(C),0		;未定義命令ニーモニック

	INC	C
	LD	A,40
	OUT	(C),A

	INC	C
	DB	0EDh,71h
;	OUT	(C),0		;未定義命令ニーモニック

	INC	C
	DB	0EDh,71h
;	OUT	(C),0		;未定義命令ニーモニック

	LD	C,0C5H
	DB	0EDh,71h
;	OUT	(C),0		;未定義命令ニーモニック

TEXT:
	LD	C,0B0h
	LD	A,80h
	OUT	(C),A
	LD	D,7
	LD	C,0B9h
	LD	HL,TEXTDT
TEXT1:
	INC	B
	OUTI
	INC	C
	DEC	D
	JR	NZ,TEXT1
	LD	BC,1FB0h
	DB	0EDh,71h
;	OUT	(C),0		;未定義命令ニーモニック

	LD	C,0C4h
	DB	0EDh,71h
;	OUT	(C),0		;未定義命令ニーモニック

	LD	BC,1A01h
	IN	A,(C)
	AND	8
	JR	Z,PRN
	LD	C,03h
	LD	A,0Fh
	OUT	(C),A
	LD	BC,0A04h
PRN:
	LD	DE,1
	LD	H,D
	LD	L,D
	LD	BC,7Fh
	LD	(HL),0FFh
	LDIR
	LD	BC,7Fh
	LD	(HL),0
	LDIR

	LD	A,0C3h		;JP
	LD	HL,WBOOT
	LD	(0000h),A
	LD	(0001h),HL	;IPL

	LD	HL,(MACHINE)	;3 bit7  DPB Original(1)
	LD	(0003h),HL	;  bit6-0 Machine X1(0)
;				;4 LSX-Dodgers($1D)
	LD	HL,BDOS
	LD	(0005h),A	;JP
	LD	(0006h),HL	;BDOS

	LD	HL,BIOS
	LD	(0018h),A	;JP
	LD	(0019h),HL	;BIOS

	LD	HL,0
	LD	(0038h),A	;RST$38
	LD	(0039h),HL

	LD	A,STABLE/256
	LD	(000Bh),A

	LD	A,0E9h		;JP (HL)
	LD	(000Fh),A

	LD	A,(_FATBF+1)
	LD	(0013h),A

	LD	A,(_DTBUF+1)
	LD	(0017h),A

	LD	A,KEYBF/256
	LD	(001Bh),A

	LD	A,KBUF/256
	LD	(001Fh),A

	LD	HL,(VERSION)
	LD	(005Ah),HL

	LD	A,0E6h
	CALL	COMOUT
	CALL	IN49SB
	PUSH	AF
	CALL	IN49SB
	POP	AF
	PUSH	AF
	AND	12h
	JR	NZ,KEYR
	LD	A,1
	LD	(KEYREP+1),A
KEYR:
	POP	AF
	AND	3
	JR	Z,NON

	LD	BC,3FD0h
	OUT	(C),C
	LD	A,37h
	OUT	(0D0h),A
	IN	A,(C)
	CP	C
	JR	Z,TURBO
NON:
	DEC	A		;A=0FFh
	LD	(0018h),A	;BIOS-ROM

	LD	HL,@SCR1
	LD	DE,SCR1
	LD	BC,@SCRE-@SCR1
	LDIR

	LD	HL,@WTTRK
	LD	DE,WTTRK
	LD	BC,@CPUE-@WTTRK
	LDIR

	LD	HL,@DRD+@R
	LD	(_FDRD+1),HL
	LD	HL,@DWT+@R
	LD	(_FDWT+1),HL
	LD	HL,@EDRDC+@R
	LD	(EMMRD),HL
	LD	HL,@EDWTC+@R
	LD	(EMMWR),HL

	LD	HL,DWTPAT+@R
	LD	(@FDCPAT+1),HL

	LD	HL,0
	LD	(X1PAT),HL

	LD	A,0AFH		;XOR	A
	LD	(X1KPAT),A

	LD	HL,SCRNX
	LD	(_SCRN+1),HL

	CALL	SETCRTC
	LD	B,10H		;PALET
	DB	0EDh,71h
;	OUT	(C),0		;未定義命令ニーモニック
	INC	B
	DB	0EDh,71h
;	OUT	(C),0		;未定義命令ニーモニック
	INC	B
	DB	0EDh,71h
;	OUT	(C),0		;未定義命令ニーモニック
	INC	B
	DB	0EDh,71h
;	OUT	(C),0		;未定義命令ニーモニック
	JP	NOBANK

TURBO:
	LD	A,1FH
	IN	A,(0F0H)
	RRCA
	JR	C,CRT1
	LD	HL,C8025H
	LD	DE,CRTCD
	LD	BC,16
	LDIR
CRT1:
	CALL	SETCRTC
	LD	BC,10AAH	;PALET
	OUT	(C),C
	LD	BC,11CCH
	OUT	(C),C
	LD	BC,12F0H
	OUT	(C),C
	INC	B
	DB	0EDh,71h
;	OUT	(C),0		;未定義命令ニーモニック

	LD	A,1FH
	IN	A,(0F0H)
	BIT	2,A
	JR	Z,BANK

	XOR	A
TZ1:
	PUSH	AF
	CALL	_GETDPB
	LD	A,(IX+12H)
	CP	87H
	JR	NZ,TZ2
	PUSH	IX
	POP	DE
	LD	HL,M2HD
	LDI
	LDI
	INC	DE
	INC	DE
	INC	DE
	INC	DE
	LD	BC,12
	LDIR
TZ2:
	POP	AF
	INC	A
	CP	8
	JR	C,TZ1

BANK:
	LD	BC,0B00H
	LD	HL,7F00H
	DI
BANK1:
	OUT	(C),L
	LD	E,(HL)
	LD	A,E
	ADD	A,0A5H
	LD	(HL),A
	CP	(HL)
	LD	(HL),E
	JR	NZ,BANK2
	INC	L
	BIT	4,L
	JR	Z,BANK1
BANK2:
	LD	A,10H
	OUT	(C),A
	LD	A,L
	OR	A
	JR	Z,NOBANK
	LD	H,0
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	DEC	HL
	DEC	HL
	DEC	HL
	LD	(BANKCL),HL
	LD	A,1
	LD	(BANKFL),A
NOBANK:
EMM:
	CALL	EADR0
	IN	A,(C)
	PUSH	AF

	LD	DE,0
ECHECK1:
	INC	DE
	CALL	EADR2
	IN	H,(C)
	CALL	EADR2
	LD	A,H
	ADD	A,0E5H
	OUT	(C),A
	INC	A
	CALL	EADR0
	OUT	(C),A
	DEC	A
	CALL	EADR2
	IN	L,(C)
	CALL	EADR2
	OUT	(C),H
	CP	L
	JR	NZ,ECHECK2
	BIT	3,D
	JR	Z,ECHECK1
ECHECK2:
	CALL	EADR0
	POP	AF
	OUT	(C),A

;	LD	HL,-9
	LD	HL, 0FFF7H
	ADD	HL,DE
	JR	NC,NOEMM
	LD	(EMMCL),HL
	LD	A,3
	LD	(EMMFL),A
NOEMM:
KEYREP:	LD	A,00H
	OR	A
	JR	Z,KEYR1
	LD	BC,0
	LD	(_CTC),BC
KEYR1:
;	LD	BC,-80*25
	LD	BC,0F830H	;-80x25
	LD	HL,(CRTCD+10)
	LD	(CRTCD+10),BC
	LD	E,0CH
	CALL	_PRINT
	LD	(CRTCD+10),HL

	LD	HL,INIMES
INIMES1:
	LD	A,(HL)
	INC	HL
	OR	A
	JR	Z,INIMES2
	LD	E,A
	CALL	_PRINT
	JR	INIMES1
INIMES2:
	LD	A,(0FF87H)
	CP	8
	JR	NC,INIT0
	LD	E,A
	ADD	A,'A'
	LD	(AUTODV),A
	LD	C,0EH
	CALL	SYSTEM
	INC	E
	LD	HL,_SEEKSP	;Disk error Ignore
	SET	7,(HL)
	LD	C,1BH
	CALL	SYSTEM
	LD	HL,_SEEKSP
	RES	7,(HL)

	INC	A
	JR	NZ,INIT1
INIT0:
	LD	E,0
	LD	C,0EH
	CALL	SYSTEM
	XOR	A
INIT1:
	LD	HL,0FF00H
	LD	DE,0FF01H
	LD	BC,00FFh
	LD	(HL),L
	LDIR

	LD	HL,0
	PUSH	HL
	OR	A
	RET	Z

	LD	A,0E6H
	CALL	COMOUT
	CALL	IN49SB
	CALL	IN49SB
	CP	1BH
	RET	Z
	LD	DE,AUTOD
	JP	_COMANL		;ECFD

EADR2:
	PUSH	DE
	EX	DE,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(EMMBL-1)
	LD	C,0
	ADD	HL,BC
	LD	BC,(EMMDV)
	LD	B,0DH
	OUT	(C),C
	INC	C
	OUT	(C),L
	INC	C
	OUT	(C),H
	INC	C
	EX	DE,HL
	POP	DE
	RET

EADR0:
	LD	BC,(EMMDV)
	LD	B,0DH
	DB	0EDh,71h
;	OUT	(C),0		;未定義命令ニーモニック
	INC	C
	DB	0EDh,71h
;	OUT	(C),0		;未定義命令ニーモニック
	INC	C
	DB	0EDh,71h
;	OUT	(C),0		;未定義命令ニーモニック
	INC	C
	RET

CHKCTC:
	PUSH	BC
	LD	DE,4703H
INICTC1:
	INC	C
	OUT	(C),D
	DB	0EDh,71h
;	OUT	(C),0		;未定義命令ニーモニック
	DEC	E
	JR	NZ,INICTC1
	POP	BC

	LD	DE,07FAH
	OUT	(C),D
	OUT	(C),E
	IN	A,(C)
	CP	E
	RET	NZ
	OUT	(C),D
	OUT	(C),D
	IN	A,(C)
	CP	D
	RET	NZ
	INC	BC
	INC	BC
	LD	(_CTC),BC
	RET

SETCRTC:
	LD	HL,CRTCD
	XOR	A
SETCRT1:
	LD	BC,01800H
	OUT	(C),A
	INC	C
	INC	B
	OUTI
	INC	A
	CP	12
	JR	NZ,SETCRT1
	INC	HL
	INC	HL
	LD	BC,1A03H+0100H
	OUTI
	LD	BC,1FD0H+0100H
	OUTI
	RET

AUTOD:
	DB	'AUTOEXEC '
AUTODV:
	DB	'A:',0

INIMES:
	DB	0A5h, 'LSX-Dodgers for X1/turbo version '
;	DB	'0'+VER/256(MOD)16,'.'			;なぜかうまく動かない
;	DB	'0'+VER/16(MOD)16,'0'+VER(MOD)16	;なぜかうまく動かない
	DB	'1.23'
	DB	0DH,0AH
	DB	0A5h, 'by Gaku Nakagawa as Larn M.R.(Lovers)',0DH,0AH
	DB	0

C8025H:
	DB	6BH,50H,59H,88H,1BH,01H,19H,1AH
	DB	00H,0FH
	DW	0F880H		;-80*LINE
	DW	0FFB0H		;-80
	DB	0CH,0A3H

TEXTDT:
	DB	03H,0CH,0FH,30H,33H,3CH,3FH

SIODATA:
	DB	18H
	DB	1,0
	DB	2,0
	DB	3,0C1H
	DB	4,44H
	DB	5,0E8H
	DB	0FFh

@SCR1:
	EXX
	PUSH	BC
	LD	BC,2000H+80
	EXX
	PUSH	BC
	LD	BC,2000H

	LD	H,A
	OR	A
@SCRUP1:
	JR	Z,@SCRCL
	PUSH	BC
	SET	4,B
	EXX
	PUSH	BC
	SET	4,B
	EXX
	CALL	@UPSUB+@R
	EXX
	POP	BC
	EXX
	POP	BC
	CALL	@UPSUB+@R
	DEC	H
	JR	@SCRUP1

@SCRCL:
	LD	HL,2000H+16
	LD	A,(_COLORF)
@SCRCL1:
	SET	4,B
	OUT	(C),H
	RES	4,B
	OUT	(C),A
	INC	BC
	SET	4,B
	OUT	(C),H
	RES	4,B
	OUT	(C),A
	INC	BC
	SET	4,B
	OUT	(C),H
	RES	4,B
	OUT	(C),A
	INC	BC
	SET	4,B
	OUT	(C),H
	RES	4,B
	OUT	(C),A
	INC	BC
	SET	4,B
	OUT	(C),H
	RES	4,B
	OUT	(C),A
	INC	BC
	DEC	L
	JR	NZ,@SCRCL1
	POP	BC
	EXX
	POP	BC
	EXX
	RET

@SCRE:

;	FLOPPY DISK DRIVER(CPU)

@WTTRK:
	LD	A,0F0H
	JR	@WTTRK1

@DWT:
	LD	A,0A0H
@WTTRK1:
	LD	(DWTPAT+1+@R),A

	LD	A,2		;Retry count
	LD	(RETRY),A

DWT0:
	PUSH	DE
	PUSH	HL
	LD	(DHLPAT+1+@R),HL
	CALL	SEEK		;Write disk
	POP	HL
	JR	C,ERRDW
	DI
DWTPAT:
	LD	A,0A0H
	CALL	SECSET
	LD	C,0FBH

DWT1:
	LD	D,(HL)
DWT2:
	LD	A,B
	IN	A,(0F8H)
	RRCA
	JR	NC,DWT4
	RRCA
	JR	NC,DWT2
DWT3:
	OUT	(C),D
	INC	HL
	JR	DWT1

DWT4:
	DEC	A
	JR	Z,DWT3
	INC	A
	EI
	POP	DE
	INC	DE
	CALL	FDMOFF
	RET	Z
	CALL	DISKC+@R
	JR	NZ,DWT0
	OR	A
	RET	Z
ERRW:
	LD	A,0FFh
ERRZ:
	CP	A
	SCF
	JP	FDMOFF

ERRDW:
	POP	DE
	CALL	@DELP+@R
	JR	NZ,DWT0
	OR	A
	JR	NZ,ERRW
	RET

@DRD:
	LD	A,80H
	LD	(DRDPAT+1+@R),A
	LD	(DWTPAT+1+@R),A

	LD	A,2		;Retry count
	LD	(RETRY),A

DRD0:
	PUSH	DE
	PUSH	HL
	LD	(DHLPAT+1+@R),HL
	CALL	SEEK		;Read disk
	POP	HL
	JR	C,ERRDR
	DI
DRDPAT:
	LD	A,80H
	CALL	SECSET
	LD	C,0FBH
DRD1:
	LD	A,B
	IN	A,(0F8H)
	RRCA
	JR	NC,DRD3
	RRCA
	JR	NC,DRD1
	INI
	INC	B
	JR	DRD1

DRD3:
	OR	A
	EI
	POP	DE
	INC	DE
	CALL	FDMOFF
	RET	Z
	CALL	DISKC+@R
	JR	NZ,DRD0
	OR	A
	JR	NZ,ERRW
	RET

ERRDR:
	POP	DE
	CALL	@DELP+@R
	JR	NZ,DRD0
	OR	A
	JR	NZ,ERRW
	RET

DISKC:
	DEC	DE
	BIT	3,A
	CALL	NZ,RNF
DISKD:
	PUSH	HL
	LD	HL,RETRY
	DEC	(HL)
	POP	HL
	JR	NZ,@ERR		;Retry
	OR	A
	JR	Z,@ERR		;Error

@DELP:
	CALL	RNF
	CALL	FDMOFF
	LD	A,(_SEEKSP)
	ADD	A,A
	JR	C,@ERRZ
@DELP1:
	PUSH	DE
	LD	HL,DEMES
	CALL	MSX
	CALL	KEYBC
@DELP2:
	CALL	INKEY
	JR	Z,@DELP2

	POP	DE
	CALL	CAP
	CP	'R'
	JR	NZ,@DELP3
DHLPAT:
	LD	HL,0
	LD	A,2
	LD	(RETRY),A
	OR	A
	RET
@DELP3:
	CP	'I'
	JR	Z,@IGNORE
	CP	'A'
	JR	NZ,@DELP1
	JP	BOOT
@IGNORE:
	LD	A,0FFh
@ERRZ:
	CP	A
@ERR:
	LD	A,0FFh
	RET


;	EMM DRIVER(CPU)


@EDRDC:
	CALL	@EADR+@R
@EDRDC1:
	INI
	INC	B
	INI
	INC	B
	INI
	INC	B
	INI
	INC	B
	DEC	A
	JR	NZ,@EDRDC1
	XOR	A
	RET

@EDWTC:
	CALL	@EADR+@R
@EDWTC1:
	INC	B
	OUTI
	INC	B
	OUTI
	INC	B
	OUTI
	INC	B
	OUTI
	DEC	A
	JR	NZ,@EDWTC1
	XOR	A
	RET

@EADR:
	PUSH	DE
	EX	DE,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(_MAXCYL-1)
	LD	C,0
	ADD	HL,BC
	LD	B,0DH
	OUT	(C),C
	INC	C
	OUT	(C),L
	INC	C
	OUT	(C),H
	INC	C
	EX	DE,HL
	POP	DE
	INC	DE
	XOR	A
	RET

@UPSUB:
	LD	L,10
@UPSUB1:
	EXX
	IN	A,(C)
	INC	BC
	EXX
	OUT	(C),A
	INC	BC
	EXX
	IN	A,(C)
	INC	BC
	EXX
	OUT	(C),A
	INC	BC
	EXX
	IN	A,(C)
	INC	BC
	EXX
	OUT	(C),A
	INC	BC
	EXX
	IN	A,(C)
	INC	BC
	EXX
	OUT	(C),A
	INC	BC
	EXX
	IN	A,(C)
	INC	BC
	EXX
	OUT	(C),A
	INC	BC
	EXX
	IN	A,(C)
	INC	BC
	EXX
	OUT	(C),A
	INC	BC
	EXX
	IN	A,(C)
	INC	BC
	EXX
	OUT	(C),A
	INC	BC
	EXX
	IN	A,(C)
	INC	BC
	EXX
	OUT	(C),A
	INC	BC
	DEC	L
	JP	NZ,@UPSUB1+@R
	RET

@CPUE:
INITE:
	DS	0CC06H-INITE


;
;
;
;	$INCLUDE	LDCCP
;
;	LSX-Dodgers CCP
;
;
BDOS:
	JP	BDOS0

	DB	20H,20H
PATHX	EQU	64
PATHD:	DS	PATHX
PATHE:	DB	0

OK:	DB	'Ok$'
SKIP:	DB	'Skip$'
KBFREE:	DB	'k bytes free',9,'$'
DIRMES:	DB	'    dir $'
COMERM:	DB	7,'Error!$'

COMS	DB	9
COMTB:
	DB	'D   '	;1
	DW	C_DIR
	DB	'DIR '	;2
	DW	C_DIR
	DB	'COPY'	;3
	DW	C_COPY
	DB	'CD  '	;4
	DW	C_CD
	DB	'DEL '	;5
	DW	C_DEL
	DB	'PATH'	;6
	DW	C_PATH
	DB	'REN '	;7
	DW	C_REN
	DB	'TYPE'	;8
	DW	C_TYPE
	DB	'REM '	;9
	DW	C_REM

_SYS00:
	DI
	LD	SP,STACK

	LD	A,INTVEC/256
	LD	I,A

	LD	A,0E4H
	CALL	COMOUT
	LD	A,INTVEC
	CALL	OT49SB

	LD	A,(CRTCD+12)
	OR	A
	JR	NZ,SETCRT0
;
;
	LD	HL,0F880H		;-80*LINE
	LD	(CRTCD+10),HL
	LD	HL,0FFB0H		;-80
	LD	(CRTCD+12),HL
SETCRT0:
	LD	HL,CRTCD
	XOR	A
SETCRT2:
	LD	BC,1800H
	OUT	(C),A
	INC	C
	INC	B
	OUTI
	INC	A
	CP	12
	JR	NZ,SETCRT2
	DEC	C
	OUT	(C),A
	INC	C
	DB	0EDh,71h
;	OUT	(C),0
	DEC	C
	INC	A
	OUT	(C),A
	INC	C
	DB	0EDh,71h
;	OUT	(C),0
	INC	HL
	INC	HL
	LD	BC,1A03H+0100H
	OUTI
	LD	BC,1FD0H+0100H
	OUTI
	CALL	LTNL
COMMAND:
	CALL	SETDTA1
	PUSH	DE
	LD	A,(_DVSW)
	ADD	A,'A'
	LD	E,A
	CALL	_PRINT
	LD	E,'>'
	CALL	_PRINT
	POP	DE		;DE=DTA1
	LD	A,80
	LD	(DE),A
	LD	C,0AH
	CALL	SYSTEM
	CALL	LTNL

	LD	DE,DTA1+2
	CALL	_COMANL
	JR	NC,COMMAND
	CALL	KEYBC
	LD	DE,COMERM
	CALL	_SYS09
	RST	0

COMANL:
	CALL	FILE
	PUSH	DE
	LD	DE,FNAME
	LD	A,(DE)
	CP	20H
	JR	Z,SDVSW
	DEC	DE
	LD	A,(DE)
	ADD	A,0FFh
	JR	C,COMB
	INC	DE

	LD	HL,COMTB
	LD	A,(COMS)
	LD	B,A
	CALL	CPNAME
COMB:
	POP	DE
	JP	NC,[HL]
	EX	DE,HL
	LD	(COMPAT+1),HL
	LD	(BATPAT+1),HL
	PUSH	AF
	CALL	CEXE4
	POP	AF
	LD	HL,FNAME
	LD	DE,FCB2+1	;COMMAND NAME
	LD	BC,11
	LDIR
	LD	DE,PATHD
CEX1:
	LD	A,(DE)
	CP	20H
	RET	C
	CALL	FILEC
	PUSH	DE
	LD	HL,FCB2+1	;COMMAND NAME
	LD	DE,FNAME
	LD	BC,11
	LDIR
	CALL	CEXE4
	POP	DE
	INC	DE
	JR	CEX1

SDVSW:
	POP	AF
	LD	A,(FDRV)
	DEC	A
	LD	E,A
	LD	C,0EH
	JR	SYSTEM0

OPEN1:
	LD	HL,FDRV
OPEN:
	LD	C,11H
OPEN3:
	PUSH	DE
	LD	DE,DTA
	CALL	SETDTA
	EX	DE,HL
	CALL	SYSTEM
	POP	DE
	OR	A
	RET

OPEN2:
	LD	C,12H
	JR	OPEN3

DEFCB:				;Z=Ok NZ=Error
	LD	DE,DTA
	CALL	SYSC0F

	LD	HL,0
	LD	(DTA+33),HL
	LD	(DTA+35),HL
	LD	DE,0100H
SETDTA:
	JP	_SYS1A

SETDTA1:
	LD	DE,DTA1
	JR	SETDTA

SYSC0F:
	LD	C,0FH
SYSTEM0:
	CALL	SYSTEM
	OR	A
	RET

C_CD:
	CALL	FILEC
	LD	HL,0
	LD	DE,FDRV
	JR	S27

S27DTA:
	LD	DE,DTA
S27:
	LD	C,27H
	JR	SYSTEM0

CEXE4:
	LD	A,(FDRV)
	LD	(0057H),A
	LD	HL,(FDRV+14)
	LD	(0058H),HL

	LD	HL,FNAME+8
	LD	A,(HL)
	CP	20H
	JR	NZ,CEXE7
	LD	A,'?'
	LD	(HL),A
	INC	HL
	LD	(HL),A
	INC	HL
	LD	(HL),A
CEXE7:
	CALL	OPEN1
CEXE5:
	RET	NZ
	LD	HL,(DTA+1+9)
	LD	A,H
	CALL	CAP
	LD	H,A
	LD	A,L
	CALL	CAP
	LD	L,A
	LD	A,(DTA+1+8)
	CALL	CAP
	SUB	'B'
	JR	Z,C_BAT
	DEC	A		;"C"
	JR	Z,C_EXE
CEXE6:
	CALL	OPEN2
	JR	CEXE5

C_EXE:
	LD	A,H
	CP	'M'
	JR	NZ,CEXE6

	CALL	DEFCB
	LD	HL,(SYSTEM+1)
	DEC	H
	CALL	S27DTA
	DEC	A
	SCF
	RET	NZ
	LD	A,H
	OR	L
	SCF
	RET	Z
	CALL	SETDTA1
COMPAT:	LD	DE,0
	CALL	SETFCB
	XOR	A
	LD	H,A
	LD	L,A
	LD	SP,STACK
	PUSH	HL
	JP	0100H

C_BAT:
	LD	DE,'A'+'T'*256
	SBC	HL,DE
	JR	NZ,CEXE6

	POP	AF
	POP	AF
	CALL	DEFCB
	LD	HL,0200H
	CALL	S27DTA
	ADD	A,0FEH
	RET	C
	LD	A,L
	OR	A
	SCF
	RET	Z
	INC	A
	PUSH	AF

	CALL	KEYBC
	LD	E,1AH
	CALL	_PRINT
	POP	BC
	LD	HL,0100H
BAT1:
	AND	A
	DEC	B
	RET	Z
	LD	A,(HL)
	CP	'%'
	JR	Z,BAT2
BAT1X:
	LD	A,(HL)
	INC	HL
	CP	1AH
	RET	Z
	CP	0AH
	CALL	NZ,KEYBS
	JR	BAT1

BAT2:
	INC	HL
	LD	A,(HL)
	DEC	HL
	SUB	'1'
	JR	C,BAT1X
	CP	9
	JR	NC,BAT1X
	INC	HL
	INC	HL
	INC	A
	LD	C,A
BATPAT:	LD	DE,0
BAT3:
	LD	A,(DE)
	OR	A
	JR	Z,BAT1
	CALL	SPCUT
	DEC	C
	JR	Z,BAT5
BAT4:
	LD	A,(DE)
	CP	21H
	JR	C,BAT3
	INC	DE
	JR	BAT4
BAT5:
	LD	A,(DE)
	CP	21H
	JR	C,BAT1
	INC	DE
	CALL	KEYBS
	JR	BAT5

SWITCH:
	LD	A,(DE)
SW1:
	INC	DE
	CP	C
	LD	A,(DE)
	RET	Z
	CP	20H
	JR	NC,SW1
C_REM:
	XOR	A
	RET

C_DEL:
	CALL	SETFCB
	LD	C,8
	CALL	SYSTEM

	LD	C,13H
	JR	CDEL1

C_REN:
	CALL	SETFCB
	LD	C,17H
CDEL1:
	LD	DE,FCB1
	CALL	SYSTEM
	ADD	A,0FFh
	RET

C_DIR:
	CALL	FILEC
	LD	HL,FDRV+1
	CALL	CWILD1
	LD	A,0F1H
	LD	(FDRV+13),A
	CALL	OPEN1
CDIR1:
	OR	A
	JR	NZ,PDSKF
	CALL	P_NAME
	CALL	OPEN2
	JR	CDIR1

PDSKF:
	LD	A,(FDRV)
	LD	E,A
	LD	C,1BH
	CALL	SYSTEM
	LD	C,A
	ADD	A,01H
	RET	C
	XOR	A
PDS1:
	DEC	C
	JR	Z,PDS2
	ADD	HL,HL
	ADC	A,A
	JR	PDS1
PDS2:
	BIT	2,B
	JR	NZ,PDSKF1
	SRL	A
	RR	H
	RR	L
PDSKF1:
	CALL	PRDEC
	LD	DE,KBFREE
	CALL	_SYS09
	CALL	PUTDRV
	LD	A,'\'
	CALL	MSG
	LD	HL,(FDRV+14)
	LD	A,H
	OR	L
	JR	Z,LTNL
	DEC	HL
	LD	A,H
	OR	L
	CALL	NZ,PRDEC0
	JR	LTNL

P_NAME:
	LD	A,(DTA+1)
	CP	'.'
	RET	Z
	LD	A,20H
	CALL	MSG
	CALL	MSG
	LD	A,':'
	CALL	MSG
	LD	A,(DTA+1+0Bh)
	PUSH	AF
	RRCA
	SBC	A,A
	AND	'*'-20H
	ADD	A,20H
	LD	B,7
MZX:
	PUSH	BC
	CALL	MSG
	POP	BC
	LD	A,20H
	DJNZ	MZX

	CALL	PUTDRV
	LD	HL,DTA+1
	CALL	FPRNT

	POP	AF
	BIT	4,A
	JR	Z,DIR3
	LD	DE,DIRMES
	CALL	_SYS09
	JR	DIR6
DIR3:
	LD	A,(DTA+1+1EH)
	LD	HL,(DTA+1+1CH)
	CALL	PRDEC
DIR6:
	LD	A,(CRTCD+1)
	CP	40+1
	CALL	NC,PRTTMS

LTNL:
	LD	E,0DH
	CALL	PRINTX
	LD	E,0AH
	JP	PRINTX

C_PATH:
	CALL	SPCUT
	LD	HL,PATHD
	CP	21H
	JR	NC,CPATH0
	DEC	HL
	DEC	HL
CPATHP:
	LD	A,(HL)
	INC	HL
	CP	20H
	CCF
	JR	NC,LTNL
	CALL	MSG
	JR	CPATHP
CPATH0:
	CP	';'
	JR	NZ,CPATH1
	INC	DE
CPATH1:
	EX	DE,HL
	LD	BC,PATHX
	LDIR
	RET

PUTDRV:
	LD	A,(FDRV)
	ADD	A,'A'-1
	CALL	MSG
	LD	A,':'
MSGR:
	JP	MSG

PRDEC0:
	XOR	A
PRDEC:
	LD	E,A
	LD	BC,0
	LD	(DECBF),BC
	LD	(DECBF+2),BC

	LD	C,24
DEC1:
	ADD	HL,HL
	LD	A,E
	ADC	A,A
	LD	E,A
	PUSH	HL
	LD	HL,DECBF+3
	LD	B,4
DEC2:
	LD	A,(HL)
	ADC	A,A
	DAA
	LD	(HL),A
	DEC	HL
	DJNZ	DEC2
	POP	HL
	DEC	C
	JR	NZ,DEC1

	LD	HL,DECBF
	LD	A,20h
	LD	B,3
DEC3:
	CALL	DEC4
	CALL	DEC4
	INC	HL
	DJNZ	DEC3
DECX:
	CALL	DEC4
	XOR	A
DEC4:
	RLD
	CP	20h
	JR	Z,DEC5
	OR	30h
DEC5:
	JR	MSGR

FPRNT:
	LD	B,8
	CALL	P_N1
	LD	A,(HL)
	ADD	A,0A0H-20H
	CP	0A0h
	JR	Z,FPR1
	LD	A,'.'
FPR1:
	CALL	MSG
	LD	B,3

P_N1:
	PUSH	BC
	PUSH	HL
	LD	A,(HL)
	CALL	CAP3
	CALL	MSG
	POP	HL
	POP	BC
	INC	HL
	DJNZ	P_N1
	RET

PRTTMS:
	LD	A,20H
	CALL	MSG

	LD	HL,(DTA+1+24)
	LD	A,L
	OR	A
	RET	Z
	SRL	H
	RLA
	RLA
	RLA
	RLA
	AND	0FH
	LD	D,A
	LD	A,H
	ADD	A,80
	CALL	PRTA
	LD	A,'-'
	CALL	MSG
	LD	A,D
	CALL	PRTA
	LD	A,'-'
	CALL	MSG
	LD	A,L
	AND	1FH
	CALL	PRTA

	LD	HL,(DTA+1+22)

	LD	A,20H
	CALL	MSG
	LD	A,H
	LD	H,L
	RRA
	RR	L
	RRA
	RR	L
	RRA
	RR	L
	AND	1FH
	CALL	PRTA
	LD	A,':'
	CALL	MSG
	LD	A,L
	RRCA
	RRCA
	AND	3FH
	CALL	PRTA
	LD	A,':'
	CALL	MSG
	LD	A,H
	AND	1FH
	ADD	A,A

;	PRINT10

PRTA:
	PUSH	HL
	LD	B,8
	LD	C,A
	XOR	A
PRTA1:
	RLC	C
	ADC	A,A
	DAA
	DJNZ	PRTA1
	LD	HL,DECBF
	LD	(HL),A
	XOR	A
	CALL	DECX
	POP	HL
	RET

SETFCB:
	CALL	SPCUT
	LD	A,(DE)
	CP	20H
	JR	C,SETFCBA
	DEC	DE
SETFCBA:
	PUSH	DE
	LD	HL,FCB1
	LD	DE,FCB1+1
	LD	BC,0023H
	LD	(HL),B		;B=0
	LDIR
	POP	DE
	PUSH	DE
	LD	HL,FCB1
	LD	C,29H
	CALL	SYSTEM
	LD	HL,FCB2
	LD	C,29H
	CALL	SYSTEM
	POP	HL
	LD	BC,5000H
	LD	DE,0081H
SETFCB1:
	LD	A,(HL)
	INC	HL
	CP	20H
	JR	C,SETFCB2
	LD	(DE),A
	INC	DE
	INC	C
	DJNZ	SETFCB1
SETFCB2:
	LD	A,C
	LD	(DTA1),A
	INC	B
	XOR	A
SETFCB3:
	LD	(DE),A
	INC	DE
	DJNZ	SETFCB3
	RET

C_COPY:
	CALL	SETFCB
	LD	DE,DTA1+1
	LD	C,'/'
	CALL	SWITCH
	CALL	CAP
	LD	(SW+1),A

	LD	DE,BEEPD
	CALL	FILEC2
	LD	HL,FCB2
	CALL	S29X1

	LD	A,10H
	LD	(FCB1+13),A
	LD	HL,FCB2+1
	CALL	CWILD1
COPY0:
	CALL	CWILD
	LD	HL,FCB1
	CALL	OPEN
	SCF
COPY1:
	RET	NZ
	CALL	DEFCB

	LD	A,(DTA+13)
	BIT	4,A
	JR	Z,COPY1A

	LD	HL,FCB1+1
	CALL	CHKWILD
	JR	C,COPY9

	LD	A,20H
	LD	(FCB1+1),A
	LD	HL,(DTA+26)
	INC	HL
	LD	(FCB1+14),HL
	JR	COPY0

COPYS:
	LD	DE,SKIP
COPY8:
	CALL	_SYS09
	CALL	LTNL
COPY9:
	CALL	OPEN2
	JR	COPY1

COPY1A:
	LD	HL,FCB2
	LD	DE,FDRV
	LD	BC,DTA+2
	LDI
	LD	A,11
COPY2:
	PUSH	AF
	LD	A,(HL)
	CP	'?'
	JR	NZ,COPY3
	LD	A,(BC)
COPY3:
	LD	(DE),A
	INC	BC
	INC	DE
	INC	HL
	POP	AF
	DEC	A
	JR	NZ,COPY2
	LD	BC,16-11
	LDIR
PUTNAME:
	LD	HL,FCB1+1
	CALL	CHKWILD
	JR	NC,PUTN1
	LD	HL,FDRV+1
	CALL	FPRNT
	LD	A,20H
	CALL	MSG
PUTN1:
SW:	LD	A,00H
	CP	'T'
	JR	NZ,CSW1
	LD	HL,SWNE
	JR	SWT1
CSW1:
	CP	'N'
	JR	NZ,SWNE
	LD	HL,COPYS
SWT1:
	LD	DE,FDRV
	CALL	SYSC0F
	JR	Z,SWN1
	JP	(HL)
SWN1:
	CALL	CTIME
	JR	NC,COPYS
SWNE:
	LD	DE,FDRV
	LD	C,16H
	CALL	SYSTEM0
	JR	NZ,COPYE2
	LD	H,A		;A=0
	LD	L,A
	LD	(FDRV+33),HL
	LD	(FDRV+35),HL
COPY6:
	CALL	BUFSIZ
	CALL	S27DTA
	LD	B,A
	INC	A
	JR	Z,COPYE
	LD	A,H
	OR	L
	JR	Z,COPY7
	LD	DE,FDRV
	LD	C,26H
	CALL	SYSTEM
	OR	A
	JR	NZ,COPYE
	DEC	B
	JR	NZ,COPY6
COPY7:
	LD	A,(DTA+13)
	LD	(FDRV+13),A
	LD	HL,DTA+20
	LD	DE,FDRV+20
	LD	BC,4
	LDIR

	LD	DE,FDRV
	LD	C,10H
	CALL	SYSTEM0
	JR	NZ,COPYE

	LD	DE,OK
	JP	COPY8

COPYE:
	LD	DE,FDRV
	LD	C,13H
	CALL	SYSTEM
COPYE2:
	SCF
	RET

CTIME:
	LD	DE,(DTA+20)
	LD	HL,(FDRV+20)
	AND	A
	SBC	HL,DE
	RET	NZ
	LD	DE,(DTA+22)
	LD	HL,(FDRV+22)
	SBC	HL,DE
	RET

C_TYPE:
	CALL	SETFCB
	LD	HL,FCB1
	CALL	OPEN
	SCF
TYPE1:
	RET	NZ
	CALL	DEFCB
	LD	E,1AH
	CALL	_PRINT
TYPE2:
	CALL	BUFSIZ
	CALL	S27DTA
	ADD	A,0FEH
	RET	C
	LD	A,H
	OR	L
	JR	Z,TYPEE
	LD	BC,0100H
TYPE3:
	LD	A,(BC)
	INC	BC
	CP	1AH
	JR	Z,TYPEE
	LD	E,A
	CALL	_SYS02
	DEC	HL
	LD	A,H
	OR	L
	JR	NZ,TYPE3
	JR	TYPE2
TYPEE:
	CALL	OPEN2
	JR	TYPE1

CWILD:
	LD	HL,FCB1+1
CWILD1:
	LD	A,(HL)
	CP	20H
	RET	NZ
CWILD2:
	LD	D,H
	LD	E,L
	INC	DE
	LD	BC,10
	LD	(HL),'?'
	LDIR
	RET

BUFSIZ:
	LD	A,(SYSTEM+2)
	SUB	3
	AND	0FCH
	LD	H,A
	LD	L,0
	RET
;
;
;
;	$INCLUDE	LDOS
;
;
;	LSX-Dodgers OS
;
BDOS0:
	LD	A,C
	CP	31H
	JR	NC,_ERROR
	LD	(BDSP+1),SP
	LD	SP,EXTSP
	PUSH	HL
	PUSH	BC
	SLA	C
	LD	B,STABLE/256
	LD	A,(BC)
	LD	L,A
	INC	BC
	LD	A,(BC)
	LD	H,A
	LD	(BDOS1+1),HL
	POP	BC
	POP	HL
BDOS1:	CALL	0

BDSP:	LD	SP,0
	RET

_ERROR:
	LD	BC,0132H
	LD	DE,VER
_SYS1C:
_SYS1E:
_SYS20:
_SYS2E:
	XOR	A
	RET

_SYS09:
	PUSH	DE
_SX09:
	LD	A,(DE)
	INC	DE
	CP	'$'
	JR	Z,SX0E2
	PUSH	DE
	LD	E,A
	CALL	_SYS02
	POP	DE
	JR	_SX09

_SYS0C:
	LD	HL,0022H
	XOR	A
	LD	A,L
	RET

_SYS0D:
	CALL	_FFLUSH
	PUSH	HL
	LD	HL,0080H
	LD	(_DTA),HL
	POP	HL
	PUSH	DE
	LD	E,0
	DB	3EH

_SYS0E:
	PUSH	DE
	LD	A,E
	PUSH	IX
	CALL	_GETDPB
	POP	IX
	JR	C,SX0E2
	LD	A,E
	LD	(_DVSW),A
SX0E2:
	LD	A,8
	POP	DE
	RET

_SYS0F:
	CALL	SETDRV
	LD	A,(IY+28)	;Open
	ADD	A,02H		;Write
	JR	Z,FEND0F
	CALL	CHKWILDX

	CALL	NC,SOPENX
_S16XX:
	JR	C,FEND0F
				;Directory location
	LD	A,(_FILEN)
	LD	(IY+25),A
;				_DIRF
	LD	A,(_DIRF)
	LD	(IY+29),A
;				_FBPS
	LD	(IY+30),E
	LD	(IY+31),D
;				Open(Read)
	LD	(IY+28),0FFh
;				FILENAME
	PUSH	IY
	POP	DE
	INC	DE
	LD	BC,11
	LDIR
;				Attribute
	LD	A,(HL)
	LD	(IY+13),A
;				TIME
	LD	DE,11
	ADD	HL,DE
	LD	A,(HL)
	INC	HL
	LD	(IY+22),A
	LD	A,(HL)
	INC	HL
	LD	(IY+23),A
;				DATE
	LD	A,(HL)
	INC	HL
	LD	(IY+20),A
	LD	A,(HL)
	INC	HL
	LD	(IY+21),A
;				First cluster
	LD	A,(HL)
	INC	HL
	LD	(IY+26),A
	LD	A,(HL)
	INC	HL
	LD	(IY+27),A
;				SIZE
	LD	A,(HL)
	INC	HL
	LD	(IY+16),A
	LD	A,(HL)
	INC	HL
	LD	(IY+17),A
	LD	A,(HL)
	INC	HL
	LD	(IY+18),A
	LD	A,(HL)
	LD	(IY+19),A
	XOR	A
	LD	(IY+12),A
	LD	(OFCB+1),IY
FEND0F:
	JP	FEND

_SYS10:
	CALL	SETDRV
	LD	A,(IY+28)	;Open
	SUB	0FEH
	SCF
	CCF
	JR	NZ,FEND10
_S10A:				;Write
	LD	(IY+14),A
	LD	(IY+15),A

	INC	(IY+28)		;$FE->$FF
	CALL	SETTMS

	LD	A,(IY+29)
	LD	(_DIRF),A
	LD	E,(IY+30)
	LD	D,(IY+31)
	CALL	DC
	JR	C,FEND

	LD	A,(IY+25)
	ADD	A,A
	ADD	A,A
	ADD	A,A
IBM2:	AND	0FFh		;ooo $7F
	LD	L,A
	LD	H,0
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(_DTBUF)
	ADD	HL,BC

	CALL	SDIRENT
FEND10:
	JR	FEND

OPENDD:
	LD	(IY+28),0FDH
	LD	(IY+13),20H
	CALL	SETTMSX
	JR	FEND

_SYS11:
	CALL	SETDRV
	CALL	CHKDDX
	JR	C,_S11A
	PUSH	IY
	POP	HL
	LD	DE,(_DTA)
	LD	BC,12
	LDIR
	LD	A,20H
	LD	(DE),A
	INC	DE
	LD	H,D
	LD	L,E
	INC	DE
	LD	C,19
	LD	(HL),B
	JR	_S11B
_S11A:
	CALL	SOPEN
_S12X1:
	JR	C,FEND
	CALL	SOPENE2
	LD	DE,(_DTA)
	LD	A,(_DRV)
	INC	A
	LD	(DE),A
	PUSH	DE
	INC	DE
	LD	BC,32
	LDIR
	LD	L,(IY+14)
	LD	H,(IY+15)
	LD	(SCDIR),HL
	LD	HL,(_FBPS)
	LD	(SFBPS),HL
	LD	HL,(_FILEN)
	LD	(SFNDF),HL	;Directory position and Flags
	POP	HL
	LD	DE,SFILE
	LD	C,33
_S11B:
	LDIR
FEND:
	SBC	A,A		;CF=0 A=0 : CF=1 A=$FF
FENDE:
	POP	IY
	POP	BC
	POP	DE
	POP	HL
	RET

_SYS12:
	PUSH	HL
	PUSH	DE
	PUSH	BC
	PUSH	IY
	CALL	NOPEN
	JR	_S12X1

_S16K:
	LD	A,(IY+28)	;Device
	CP	0FDH
	SCF
	RET	Z

OFCB:	LD	DE,0
	PUSH	DE
	LD	B,26		;First cluster
S16K1:
	INC	DE
	INC	HL
	DJNZ	S16K1

	LD	A,(DE)
	CP	(HL)
	JR	NZ,S16K2
	INC	DE
	INC	HL
	LD	A,(DE)
	CP	(HL)
	JR	NZ,S16K2

	POP	HL
	PUSH	IY
	POP	DE
	LD	A,(DE)		;Drive
	CP	(HL)
	JR	NZ,S16K2

	SBC	HL,DE		;CP HL,DE
	SCF
	RET	NZ
	PUSH	HL
S16K2:
	POP	HL
	PUSH	IY
	POP	DE
_SYS13:
	CALL	SETDRV
	CALL	KILL
FEND13:
	JR	FEND

_SYS14:
	CALL	SETDRV
	CALL	PUSHRR
	CALL	GETSEQ
	CALL	SETRBR

	CALL	[DE27]		;これはOHM-Z80のマクロ？

	PUSH	HL
	CALL	SETSEQ
SREAD:
	POP	HL

	ADD	A,01H
	JR	C,FEND

	LD	A,L
	SUB	01H
FENDX:
	SBC	A,A
	AND	3
	RRA
	JR	FENDE

_SYS15:
	CALL	SETDRV
	CALL	PUSHRR
	CALL	GETSEQ
	CALL	SETRBR

	CALL	[DE26]		;これはOHM-Z80のマクロ？
	PUSH	HL
	CALL	SETSEQ
SWRITE:
	POP	HL

	ADD	A,0FFh
	JR	FENDX

_SYS17:
	CALL	SETDRV
	CALL	NAME
	JR	FEND13

_SYS16:
	CALL	SETDRV

	CALL	CHKWILDX
	JR	C,FEND13
	LD	A,(IY+1)
	CP	5
	JR	Z,_S16X2
	CP	21H
	JP	C,FEND13
_S16X2:
;				Clear FCB
	PUSH	IY
	POP	HL
	LD	BC,16
	ADD	HL,BC
_S16X1:
	LD	(HL),B
	INC	HL
	DEC	C
	JR	NZ,_S16X1

	CALL	SETTMSX
	LD	(IY+13),0FFh	;Attribute
	CALL	SOPENX
	CCF
	CALL	Z,_S16K
	CALL	NC,COPEN
	CALL	NC,SDIRENT
	JP	_S16XX

_SYS21:
	CALL	SETDRV
	CALL	PUSHRR
	LD	L,(IY+33)	;Random record
	LD	H,(IY+34)
	CALL	SETRBR

	CALL	[DE27]		;これはOHM-Z80のマクロ？
	PUSH	HL
	CALL	POPRR
	JR	SREAD

_SYS22:
_SYS28:
	CALL	SETDRV
	CALL	PUSHRR
	LD	L,(IY+33)	;Random record
	LD	H,(IY+34)
	CALL	SETRBR

	CALL	[DE26]		;これはOHM-Z80のマクロ？
	PUSH	HL
	CALL	POPRR
	JR	SWRITE

_SYS18:
	LD	HL,00FFh
	XOR	A
	RET

_SYS19:
	LD	A,(_DVSW)
	AND	A
	RET

_SYS1A:
	LD	(_DTA),DE
	XOR	A
	RET

_SYS1B:
	LD	A,E
	CALL	GETDRV
	CALL	_GETDPB
	CALL	NC,_RDFATX
	LD	HL,0
	CALL	NC,DSKF

	LD	E,(IX+8)
	LD	D,(IX+9)	;審虎柔
	DEC	DE
	DEC	DE
	LD	IY,(_FATBF)
	SBC	A,A
	RET	C
	LD	A,(IX+7)
	OR	A
	LD	BC,0200H
	LD	A,B		;A=2
	RET	NZ
	DEC	A		;A=1
	BIT	7,(IX+0FH)
	RET	NZ
	LD	B,04H
	RET

_SYS1D:
	XOR	A
	LD	H,A
	LD	L,A
	RET

_SYS1F:
	LD	HL,DEVICE
	XOR	A
	RET

_SYS23:
	PUSH	HL
	LD	HL,(STABLE+2*0FH)
	CALL	[HL]		;CALL [HL]
	JR	C,FSIZE1
;	EX	DE,IY
	PUSH	DE
	EX	(SP),IY
	POP	DE
	PUSH	DE
	CALL	GETSIZE
	LD	(IY+33),L	;Random record
	LD	(IY+34),H
	POP	DE
;	EX	DE,IY
	PUSH	DE
	EX	(SP),IY
	POP	DE
	XOR	A
FSIZE1:
	POP	HL
	RET

_SYS24:
	PUSH	BC
;	EX	DE,IY
	PUSH	DE
	EX	(SP),IY
	POP	DE
	PUSH	DE
	CALL	GETSEQ
	LD	(IY+33),L	;Random record
	LD	(IY+34),H
	LD	(IY+35),0
	POP	DE
;	EX	DE,IY
	PUSH	DE
	EX	(SP),IY
	POP	DE
	POP	BC
	XOR	A
	RET

_SYS29:
	PUSH	BC
	PUSH	HL
	CALL	FILE
	POP	HL
	POP	BC
S29X1:
	PUSH	BC
	PUSH	DE
	PUSH	HL
	EX	DE,HL
	LD	HL,FDRV
	LD	BC,13
	LDIR
	LD	(HL),B
	LD	C,3
	LDIR
	POP	HL
	POP	DE
	POP	BC
	XOR	A
	RET

_SYS30:
	PUSH	BC
	LD	BC,_DWT
	JR	S2FX
_SYS2F:
	PUSH	BC
	LD	BC,_DRD
S2FX:
	LD	(S2FPAT+1),BC
	CALL	FFLUSH

	PUSH	DE
	PUSH	HL
	LD	A,L		;Drive
	CALL	_CHGDRV
	JR	C,S30X2
	LD	B,H		;Number of clusters
	LD	HL,(_DTA)
S30X:
	PUSH	BC
S2FPAT:	CALL	_DRD
	POP	BC
	JR	C,S30X2
	DJNZ	S30X
S30X2:
	POP	HL
	POP	DE
	POP	BC
	SBC	A,A
	RET
;
;
;
;	$INCLUDE	LDIO
;
;
;	LSX-Dodgers IO
;

BIOS:
	LD	(SPPAT+1),SP
	PUSH	AF
	LD	A,(SPPAT+2)
	INC	A
	JR	Z,BIOS2
	POP	AF
	LD	SP,EXTSP
	JR	BIOS3
BIOS2:
	POP	AF
BIOS3:
	CALL	BIOS1
	LD	B,1EH
	OUT	(C),A
SPPAT:	LD	SP,0
	RET
BIOS1:
	PUSH	BC
	LD	B,1DH
	OUT	(C),A
	RET

INT:
	PUSH	AF
	PUSH	HL
	PUSH	BC
	LD	HL,0100H
	ADD	HL,SP
	JR	C,INTP1
	LD	(INTSP+1),SP
	LD	SP,EXTSP
INTP1:
	CALL	IN49SB
	LD	H,A
	CALL	IN49SB
	LD	L,A

	BIT	4,H		;[GRAPH]
	JR	NZ,SCEXE
	LD	A,L
	XOR	9
	JR	Z,DIAN
	LD	A,H
	RRCA			;[CTRL]
	JR	NC,SCL
	RRCA			;[SHIFT]
	JR	C,SCEXE
	LD	A,80H
	JR	SCG1
SCEXE:
	LD	(_KEYD),HL
	CALL	KEYSET1

	LD	HL,EXTSP
	AND	A
	SBC	HL,SP
	JR	NZ,INTPE1

INTSP:	LD	SP,0
INTPE1:
	POP	BC
INTPE:
	POP	HL
INTPE2:
	POP	AF
INTCTCE:
	EI
	RETI

SCL:
	LD	A,L
	CP	08H
	JR	Z,RESET

	LD	A,02H
SCG1:
	PUSH	HL
	LD	HL,WK1FD0
	XOR	(HL)
	CALL	S1FD0
	POP	HL
	JR	SCEXE

RESET:
	LD	A,1DH
	OUT	(0),A
	RST	0

DIAN:
	LD	L,A
	PUSH	BC
	LD	BC,1FB0H
	IN	A,(C)
	XOR	80H
	OUT	(C),A
	POP	BC
	JR	SCEXE

INTCTC2:
	PUSH	AF
INTCPAT:LD	A,00H
	DEC	A
	LD	(INTCPAT+1),A
	JR	NZ,INTPE2

	LD	A,(_KEYD)
	OR	A
	JR	Z,INTPE2
KEYSET0:
	PUSH	HL
	LD	HL,(_KEYPS)
	LD	A,H
	XOR	L
	JR	NZ,INTC2A

	LD	HL,(_KEYD)
	CALL	KEYSET
INTC2A:
	LD	A,(_KEYSP)
	AND	0FH
	LD	(INTCPAT+1),A

	JR	INTPE

KEYSET1:
	BIT	5,H
	PUSH	AF
	LD	BC,(_CTC)
	LD	A,B
	OR	C
	JR	NZ,KEYS10E

	POP	AF
	JR	NZ,KEYSET
	PUSH	AF
	JR	KEYSET0
KEYS10E:
	POP	AF
	RET	Z
	PUSH	AF
	LD	A,3		;CTC STOP
	OUT	(C),A
	POP	AF

	OR	A
	RET	Z

	PUSH	HL
	LD	HL,(_KEYSP)
	LD	A,0A7H
	OUT	(C),A
	OUT	(C),L
	LD	A,H
	LD	(INTCPAT+1),A
	POP	HL

KEYSET:
	LD	A,L
	BIT	7,H
	CALL	Z,FKEY
	BIT	6,H
	RET	NZ
KEYBS:
	OR	A
	RET	Z
KEYBS1:
	CP	3
	CALL	Z,KEYBC
	PUSH	HL
	PUSH	AF
	LD	HL,(_KEYPS)
	INC	L
	LD	A,L
	CP	H
	JR	Z,KEYBE
	LD	(_KEYPS),A
	LD	H,KEYBF/256
	POP	AF
	LD	(HL),A
	POP	HL
	RET

KEYBC:
	PUSH	HL
	LD	HL,0
	LD	(_KEYPS),HL
	POP	HL
	RET

KEYBE:
	POP	AF
	POP	HL
	SCF
	RET

FKEY:
	BIT	6,L
	RET	Z
	LD	A,1BH
	CALL	KEYBS1
	LD	A,L
	ADD	A,20H-'q'
	BIT	7,L
	RET	Z
	LD	L,'P'
	SUB	0E1H+20H-'q'
	JR	Z,KEYBSL
	INC	L
	DEC	A
	JR	Z,KEYBSL
	INC	L
	SUB	0EBH-0E2H
	JR	Z,KEYBSL
	LD	L,'C'
	DEC	A
	JR	Z,KEYBSL
	LD	L,'X'
KEYBSL:
	LD	A,L
	JR	KEYBS1

_SYS01:
	CALL	_SYS07
MSG:
	PUSH	AF
	PUSH	DE
	LD	E,A
	CALL	_SYS02
	POP	DE
	POP	AF
	RET

_SYS02:
	CALL	BREAK
	JP	PRINTX

_SYS03:
	DI
	PUSH	BC
SIOAD:	LD	BC,1F91H
	LD	A,5
	OUT	(C),A
	LD	A,0EAH		;RTS ON
	OUT	(C),A
REC1:
	CALL	BREAK2
	IN	A,(C)
	RRCA			;Arrival
	JR	NC,REC1
BREAK2X:
	CCF
	LD	A,5
	OUT	(C),A
	LD	A,0E8H		;RTS OFF
	OUT	(C),A

	DEC	C
	IN	A,(C)		;Read data
	POP	BC
	EI
	RET

BREAK2:
	PUSH	BC
	LD	BC,1A01H
	IN	A,(C)
	POP	BC
	RRCA
	RET	C
	POP	BC		;PC
SIOAD0:	LD	BC,1F91H
	JR	BREAK2X

_SYS04:
	PUSH	BC
SIOAD1:	LD	BC,1F91H
XMIT1:
	CALL	BREAK2
	LD	A,10H		;Reset status
	OUT	(C),A
	IN	A,(C)
	CPL
	AND	24H		;CTS Send Empty
	JR	NZ,XMIT1
	DEC	C
	OUT	(C),E
	POP	BC
	RET

_SYS05:
	PUSH	BC
	LD	BC,1A01H
_S05X1:
	CALL	BREAK2
	IN	A,(C)
	AND	8
	JR	NZ,_S05X1
	DI
	DEC	C
	OUT	(C),E
	LD	C,3
	LD	A,0EH
	OUT	(C),A
	INC	A
	INC	BC
	DEC	BC
	OUT	(C),A
	EI
	POP	BC
	XOR	A
	RET

_SYS06:
	LD	A,E
	INC	A
	JP	Z,_INKEY
PRINTX:
	JP	_PRINT

_SYS08:
	CALL	_SYS07
	JR	BREAK1
BREAK:
	EI
	LD	A,(_KEYD)
BREAK1:
	CP	3
	JP	Z,0
	CP	13H
	RET	NZ

PAUSE:
	CALL	KEYBC

FLGET:
	CALL	_FFLUSH
	PUSH	BC
	PUSH	HL
	LD	BC,(_TXADR)
	SET	5,B
	IN	H,(C)
FLGET1:
	LD	A,(_KEYD+1)
	RRCA
	RRCA
	AND	10H
	OR	8
	IN	L,(C)
	OR	L
	OUT	(C),A
	CALL	_INKEY
	JR	Z,FLGET1
	OUT	(C),H
	POP	HL
	POP	BC
	RET

_SYS0A:
	PUSH	BC
	PUSH	HL
	PUSH	DE
	CALL	GETL
	LD	DE,KBUF
	POP	HL
	PUSH	HL
	LD	C,0
	JR	NC,SAX0
	INC	HL
	INC	HL
	JR	SAX4
SAX0:
	LD	B,(HL)
	INC	HL
SAX1:
	INC	HL
	LD	A,(DE)
	INC	DE
	OR	A
	JR	NZ,SAX2
SAX4:
	LD	(HL),0DH
	JR	SAX3
SAX2:
	LD	(HL),A
	INC	C
	DJNZ	SAX1
SAX3:
	POP	DE
	LD	A,C
	INC	DE
	LD	(DE),A
	DEC	DE
	POP	HL
	POP	BC
	AND	A
	RET

_SYS0B:
	CALL	BREAK
	LD	A,(_KEYD)
	OR	A
	RET	Z
CONSTX:
	CALL	_FFLUSH
	PUSH	HL
	LD	HL,(_KEYPS)
	LD	A,H
	XOR	L
	POP	HL
	ADD	A,0FFh
	SBC	A,A
	RET

_SYS2A:
	PUSH	BC
	LD	A,0EDH		;Read calendar
	CALL	COMOUT
	CALL	IN49SB		;YY
	CALL	BCD
	LD	L,A
	LD	H,0
	LD	DE,1900
	CP	90
	JR	NC,RDDATE1
	LD	E,2000		;****** このコード謎です。
RDDATE1:
	ADD	HL,DE
	CALL	IN49SB		;MM
	LD	D,A
	CALL	IN49SB		;DD
	CALL	BCD
	LD	E,A
	LD	A,D
	AND	7
	LD	B,4
RDDATE2:
	SRL	D
	DJNZ	RDDATE2
	POP	BC
	RET

BCD:
	LD	C,A
	AND	0F0H
	RRCA
	LD	B,A
	RRCA
	RRCA
	ADD	A,B
	LD	B,A
	LD	A,C
	AND	0FH
	ADD	A,B
	RET

_SYS2C:
	PUSH	BC
	LD	A,0EFH		;Read time
	CALL	COMOUT
	CALL	IN49SB		;TT
	CALL	BCD
	LD	H,A
	CALL	IN49SB		;MM
	CALL	BCD
	LD	L,A
	CALL	IN49SB		;SS
	CALL	BCD
	LD	D,A
	POP	BC
	XOR	A
	RET

MSX1:
	LD	E,A
	CALL	_PRINT
MSX:
	LD	A,(HL)
	INC	HL
	OR	A
	JR	NZ,MSX1
	RET

ESC1:
	LD	A,E
	CP	'A'
	JP	Z,CTRL1E
	CP	'B'
	JP	Z,CTRL1F
	CP	'C'
	JP	Z,CTRL1C
	CP	'D'
	JP	Z,CTRL1D
	CP	'E'
	JR	Z,CT0CX
	CP	'j'
CT0CX:
	JP	Z,CTRL0C
	CP	'H'
	JP	Z,CTRL0B
	CP	'J'
	JP	Z,CTRL1A
	CP	'K'
	JP	Z,CTRL05
	CP	'L'
	JP	Z,CTRL0E
	CP	'x'
	JR	Z,ESC1X
	CP	'y'
	JR	NZ,ESC1Y
ESC1X:
	LD	(HL),1
ESC1Y:
	CP	'='
	JR	Z,ESC1W
	CP	'Y'
	JR	NZ,ESC1Z
ESC1W:
	LD	(HL),2
ESC1Z:
	CP	20H
	JR	C,ESC1C
	ADD	A,A
	RET	NC
ESC1C:
	POP	HL
	JR	ANK

ESC:
	LD	HL,PRINTE5
	PUSH	HL
	LD	HL,ESCFLG+1
	LD	(HL),0
	DEC	A
	JR	Z,ESC1
	DEC	A
	JR	NZ,ESC2
	LD	(HL),3
	LD	A,E
	SUB	20H
	LD	(ESCYP+1),A
	RET
ESC2:
	DEC	A
	RET	NZ
ESCYP:	LD	H,0
	LD	A,E
	SUB	20H
	LD	L,A
	JP	_LOC

PRINT:
	PUSH	BC
	PUSH	HL
ESCFLG:	LD	A,00H
	OR	A
	JR	NZ,ESC

	LD	A,1FH
	CP	E
	JR	NC,CTRL
PRINTC:
INSFLG:	AND	A
	CALL	C,CTRL12

KANFLG:	LD	A,00H
	OR	A
	JR	NZ,KANJI2
X1KPAT:	LD	A,E
	CP	80H
	JR	C,ANK
	CP	0A0H
	JR	C,KANJI1
	CP	0E0H
	JR	C,ANK
KANJI1:
	LD	(KANFLG+1),A
	JR	PRINTE5
ANK:
	LD	BC,(_TXADR)
	LD	A,B
	OR	38H
	LD	B,A
	DB	0EDh,71h	;Kanji
;	OUT	(C),0		;未定義命令ニーモニック
	RES	3,B
	OUT	(C),E		;Text
KANJIE:
	CALL	PRINTE7
PRINTE5:
	POP	HL
	POP	BC
	XOR	A
	RET

CTRL:
	CALL	KANCLR
	LD	A,0A7H		;AND	A
	LD	(INSFLG),A
	LD	A,E
	ADD	A,A
	LD	C,A
	LD	B,0
	LD	HL,CTRLTB
	ADD	HL,BC
	LD	A,(HL)
	INC	HL
	LD	H,(HL)
	LD	L,A
	CALL	[HL]
	JR	PRINTE5

KANJI2:
	PUSH	DE
	LD	D,A
	LD	BC,2F81h	;SFTJIS
	RST	18H
	LD	BC,2FC3h	;Instead or JISVRM
	RST	18H

	LD	BC,(_TXADR)
	LD	A,B
	OR	38H
	LD	B,A
	OUT	(C),D		;kanji
	RES	3,B
	OUT	(C),E		;Text
	CALL	PRINTE7
	LD	BC,(_TXADR)
	LD	A,B
	OR	38H
	LD	B,A
	SET	6,D
	OUT	(C),D		;Kanji
	RES	3,B
	OUT	(C),E		;Text
	POP	DE
	XOR	A
	LD	(KANFLG+1),A
	JR	KANJIE

KANCLR:
	LD	A,(KANFLG+1)
	OR	A
	RET	Z
	LD	BC,(_TXADR)
	LD	A,B
	OR	38H
	LD	B,A
	XOR	A
	LD	(KANFLG+1),A
	OUT	(C),A		;Kanji
	RES	3,B
	LD	A,20H
	OUT	(C),A		;Text
PRINTE7:
	RES	4,B
PRINTE6:
	LD	A,(_COLORF)
PRINTE4:
	OUT	(C),A		;Color
	LD	A,B
	AND	7
	LD	B,A
PRINTE2:
	INC	BC
PRINTE3:
	LD	HL,(CRTCD+10)
	AND	A
	ADC	HL,BC
PRINTE8:
	JR	Z,PRINT2
PRINTE1:
	LD	(_TXADR),BC
PRINTE:
	RET

PRINT2:
	CALL	SCR
	LD	HL,(CRTCD+12)
	ADD	HL,BC
	LD	(_TXADR),HL
	RET

CTRL08:
CTRL1D:
	LD	BC,(_TXADR)
	LD	A,B
	OR	C
	RET	Z
	DEC	BC
	JR	PRINTE1

CTRL1E:
	LD	BC,(_TXADR)
	LD	HL,(CRTCD+12)
	ADD	HL,BC
	RET	NC
	LD	B,H
	LD	C,L
	JR	PRINTE1

CTRL1C:
	LD	BC,(_TXADR)
	JR	PRINTE2

CTRL09:
	LD	BC,(_TXADR)
	LD	A,C
	AND	0F8H
	ADD	A,8
	LD	C,A
	ADC	A,B
	SUB	C
	LD	B,A
	JR	PRINTE3

CTRL02:
	LD	HL,(_TXADR)
	LD	A,H
	OR	L
	RET	Z
	DEC	HL
	LD	(_TXADR),HL
	PUSH	DE
	CALL	_POS
	LD	A,(CRTCD+1)
	SUB	L
	LD	L,A
	DEC	L
	LD	H,38H
	LD	BC,(_TXADR)
	ADD	HL,BC
	LD	B,H
	LD	C,L
	LD	DE,2000H	;D:Text E:kanji
	LD	HL,(_COLORF)	;L:Color
C8X1:
	CALL	C12S
	DEC	BC
	JR	NZ,C8X1
	POP	DE
	RET

CTRL05:
	CALL	_POS
	LD	A,(CRTCD+1)
	SUB	L
	LD	L,A
	LD	H,20H
	LD	BC,(_TXADR)
C05X1:
	LD	A,B
	OR	38H
	LD	B,A
	DB	0EDh,71h	;kanji
;	OUT	(C),0		;未定義命令ニーモニック
	RES	3,B
	OUT	(C),H		;Text
	RES	4,B
	LD	A,(_COLORF)
	OUT	(C),A		;Color
	INC	BC
	DEC	L
	JR	NZ,C05X1
	RET

CTRL0D:
	CALL	_POS
	LD	L,0
LOC:
	PUSH	BC
	PUSH	HL
	CALL	KANCLR
	CALL	LOC1
	LD	(_TXADR),BC
	POP	HL
	POP	BC
	RET

CTRL01:
	LD	A,37H		;SCF
	LD	(INSFLG),A
	RET

CTRL0B:
	LD	HL,0
	LD	(_TXADR),HL
	RET

PRINTS:
	CALL	BREAK
	JP	_PRINT

CTRL1B:
	LD	A,1
	LD	(ESCFLG+1),A
	RET

LOC1:
	LD	B,H
	LD	C,L
	INC	B
	DEC	B
	RET	Z
	PUSH	DE
	LD	DE,(CRTCD+1)
	LD	HL,0
	LD	D,L
LOC2:
	ADD	HL,DE
	DJNZ	LOC2
	ADD	HL,BC
	POP	DE
LOC3:
	LD	B,H
	LD	C,L
	RET

BOOT:
	JP	0
WBOOT:
	JP	_SYS00
CONST:
	JP	CONSTX
_SYS07:
CONIN:
	JP	FLGET
CONOUT:
	CALL	CURSOR
	LD	E,C
	CALL	_PRINT
	LD	A,E
	CP	0AH
	JR	NZ,CURSOR
	CALL	CTRL0D
	CALL	CTRL05
CURSOR:
	PUSH	BC
	LD	BC,(_TXADR)
	SET	5,B
	IN	A,(C)
	XOR	18H
	OUT	(C),A
	POP	BC
	RET

CTRL07:
	LD	HL,BEEPD
BEEP1:
	LD	A,(HL)
	INC	HL
	CP	0FFh
	RET	Z
	DI
	LD	B,01CH
	OUT	(C),A
	OUTI
	EI
	JR	BEEP1

OT49SB:
	PUSH	BC
	CALL	CANW
	LD	BC,1900H
	OUT	(C),A
	POP	BC
	RET

IN49SB:
	PUSH	BC
	LD	BC,1A01H
CANR:
	IN	A,(C)
	AND	20H
	JR	NZ,CANR
	LD	BC,1900H
	IN	A,(C)
	POP	BC
	RET

CANW:
	LD	BC,1A01H
	IN	C,(C)
	BIT	6,C
	JR	NZ,CANW
	RET

COMOUT:
	EI
	CALL	OT49SB
	CALL	CANW
	DI
	RET

CTRL12:
	PUSH	DE
	CALL	_POS
	LD	A,(CRTCD+1)
	SUB	L
	LD	BC,(_TXADR)
	LD	DE,2000H	;D:Text E:Kanji
	LD	HL,(_COLORF)	;L:Color
	SET	5,B
C12X1:
	CALL	C12S
	INC	BC
	JR	NZ,C12X1
	POP	DE
	RET

C12S:
	SET	4,B
	SET	3,B
	IN	H,(C)
X1PAT:	OUT	(C),E
	LD	E,H
	RES	3,B
	IN	H,(C)
	OUT	(C),D
	LD	D,H
	RES	4,B
	IN	H,(C)
	OUT	(C),L
	LD	L,H
	DEC	A
	RET

CTRL0C:
	CALL	CTRL0B
CTRL1A:
	LD	BC,(_TXADR)
C1AX1:
	LD	A,B
	OR	38H
	LD	B,A
	DB	0EDh,71h	;kanji
;	OUT	(C),0		;未定義命令ニーモニック
	RES	3,B
	LD	A,20H
	OUT	(C),A		;Text
	RES	4,B
	LD	A,(_COLORF)
	OUT	(C),A		;Color
	INC	BC
	RES	5,B
	LD	HL,(CRTCD+10)
	ADD	HL,BC
	JR	NC,C1AX1
	RET

CTRL04:
	CALL	_POS
	LD	A,L
	OR	A
	RET	Z
CTRL03:
	CALL	CTRL0D
CTRL0A:
CTRL1F:
	LD	BC,(_TXADR)
	LD	HL,(CRTCD+1)
	LD	H,0
	ADD	HL,BC
	LD	B,H
	LD	C,L
	LD	HL,(CRTCD+10)
	ADD	HL,BC
	CCF
	SBC	A,A
	JP	PRINTE8

CTRL0E:
	CALL	_POS
	LD	A,H
	DB	01H
SCR:
	LD	A,(_LINE)
	DEC	A
SCR1:
	PUSH	BC
	PUSH	DE
	LD	BC,1F80H	;DMA
	LD	E,0C3H
	OUT	(C),E
	LD	DE,659AH
	OUT	(C),E
	OUT	(C),D
	LD	DE,79
	OUT	(C),E
	OUT	(C),D

	LD	HL,3800H
	LD	DE,1C18H
	OUT	(C),D
	OUT	(C),E

SCRUP1:
	OR	A
	JR	Z,SCRCL
	PUSH	AF
	CALL	UPSUB		;kanji
	LD	DE,(CRTCD+12)
	LD	D,0F7H
	ADD	HL,DE
	PUSH	DE
	CALL	UPSUB		;Text
	POP	DE
	ADD	HL,DE
	CALL	UPSUB		;Color
	SET	4,H
	POP	AF
	DEC	A
	JR	SCRUP1

UPSUB:
	LD	DE,(CRTCD+1)
	LD	D,0
	LD	A,0CDH
	OUT	(C),A
	OUT	(C),L		;SOURCE
	OUT	(C),H
	ADD	HL,DE
	LD	A,1DH
	OUT	(C),A		;DIST
	OUT	(C),L
	OUT	(C),H
	LD	DE,0CF87H
	OUT	(C),D
	OUT	(C),E
	RET

SCRCL:
	LD	B,H
	LD	C,L
	LD	HL,2000H+80
	LD	A,(_COLORF)
SCRCL1:
	DB	0EDh,71h
;	OUT	(C),0		;未定義命令ニーモニック
	RES	3,B
	OUT	(C),H
	RES	4,B
	OUT	(C),A
	SET	3,B
	SET	4,B
	INC	BC
	DEC	L
	JR	NZ,SCRCL1
	POP	DE
	POP	BC
	RET

SCRN:
	PUSH	DE
	IN	E,(C)		;Text
	SET	3,B
	IN	D,(C)		;Kanji
	JR	Z,SCRNE
	XOR	A
	PUSH	BC
	LD	BC,3037H	;VRMJIS
	RST	18H
	LD	BC,2F52H	;JISSFT
	RST	18H
	POP	BC
	IN	A,(C)
	RES	3,B
	AND	40H
	JR	NZ,SCRN1
	LD	A,D
	POP	DE
	RET
SCRN1:
	LD	A,E
	POP	DE
	RET

SCRNE:
	POP	DE
	RES	3,B
SCRNX:
	IN	A,(C)
	RET

POS:
	LD	HL,(_TXADR)
	PUSH	BC
	LD	BC,(CRTCD+12)
	XOR	A
POS1:
	ADD	HL,BC
	INC	A
	JR	C,POS1
	SBC	HL,BC
	DEC	A
	LD	H,A
	POP	BC
	AND	A
	RET

GETL:
	CALL	_POS
	PUSH	HL
GETL1:
	CALL	_POS
	POP	BC
	PUSH	BC
	LD	A,L
	SUB	C
	LD	L,C
	LD	C,A
	CALL	C,_LOC
GET1W:
	CALL	_SYS08
	CP	8
	JR	NZ,GETL1X
	DEC	C
	BIT	7,C
	JR	NZ,GETL1X
	LD	A,2
GETL1X:
	CP	1Bh
	JR	NZ,GETL1V
	CALL	_SYS08
	CP	22h
	JR	NZ,GETL1Y
	LD	HL,KBUF
	CALL	MSX
	JR	GETL1Z
GETL1Y:
	PUSH	AF
	LD	E,1Bh
	CALL	_PRINT
	POP	AF
GETL1V:
	LD	E,A
	CALL	_PRINT
GETL1Z:
	LD	A,E
	CP	0DH
	JR	NZ,GETL1

	LD	HL,KBUF
	XOR	A
	LD	BC,(CRTCD)
GETL0:
	LD	(HL),A
	INC	HL
	DJNZ	GETL0

	POP	DE
	CALL	_POS
	LD	L,E
	LD	A,(CRTCD+1)
	SUB	L
	LD	D,A
	CALL	LOC1
	LD	A,B
	OR	30H
	LD	B,A
	LD	E,D
	LD	HL,KBUF
GETL2:
	CALL	_SCRN
	INC	BC
	LD	(HL),A
	INC	HL
	DEC	E
	JR	NZ,GETL2
GETL3:
	DEC	HL
	LD	A,(HL)
	CP	21H
	RET	NC
	LD	(HL),0
	DEC	D
	JR	NZ,GETL3
	RET

INKEY:
	EI
	PUSH	HL
	LD	HL,(_KEYPS)
	LD	A,H
	XOR	L
	JR	Z,INKEY1
	LD	A,H
	INC	A
	LD	(_KEYPS+1),A
	LD	L,A
	LD	H,KEYBF/256
	LD	A,(HL)
INKEY1:
	POP	HL
	OR	A
	RET

CTRLTB:
	DW	PRINTE,CTRL01,CTRL02,CTRL03
	DW	CTRL04,CTRL05,CTRL1A,CTRL07
	DW	CTRL08,CTRL09,CTRL0A,CTRL0B
	DW	CTRL0C,CTRL0D,CTRL0E,PRINTE
	DW	PRINTE,PRINTE,CTRL01,PRINTE
	DW	PRINTE,PRINTE,PRINTE,PRINTE
	DW	PRINTE,PRINTE,CTRL1A,CTRL1B
	DW	CTRL1C,CTRL1D,CTRL1E,CTRL1F

BEEPD:
	DB	  0,8EH,  1,  0,0BH,0, 0CH,10H
	DB	07H,3EH,08H,10H,0DH,0,0FFh

REDDATA:DB	0

;
;
;
;	$INCLUDE	LDFILE
;
;
;	LSX-Dodgers FILE
;
FILEC:
	CALL	FILE
FILEC2:
	LD	A,(FDRV+1)
	CP	20H
	RET	Z
	JR	SETDIR1

FILE:
	XOR	A
	LD	(FDRV),A
	LD	H,A
	LD	L,A
	LD	(FDRV+14),HL
	CALL	SPCUT
	CALL	CCHK3
	JR	Z,DEVI1
	INC	DE
	LD	A,(DE)
	DEC	DE
	CP	':'
	JR	NZ,DEVI1
	LD	A,(DE)		;DRIVE
	CALL	CAP
	SUB	'@'
	INC	DE
	INC	DE
	LD	(FDRV),A
DEVI1:
	LD	A,(DE)
	SUB	'\'
	JR	NZ,NOROOT
	LD	HL,0
	LD	(FDRV+26),HL
	INC	L
	LD	(FDRV+14),HL
	INC	DE
NOROOT:

SETDIR:
	CALL	FILED
	LD	A,(DE)
	CP	'\'
	RET	NZ
	INC	DE
SETDIR1:
	LD	A,10H		;Directory
	LD	(FDRV+13),A
	PUSH	DE
	LD	DE,FDRV
	LD	HL,(STABLE+2*0Fh)
	CALL	[HL]
	POP	DE
	OR	A
	RET	NZ

	LD	A,(FDRV+13)
	BIT	4,A
	RET	Z

	CALL	FILEI
	LD	HL,(FDRV+26)
	INC	HL
	LD	(FDRV+14),HL
	JR	SETDIR

FILED:
	CALL	FILEI

	LD	B,8
FILE2:
	CALL	CCHKF
	RET	Z
	CP	'*'
	JR	Z,FILE9
	CP	'.'
	JR	Z,FILE4
	LD	(HL),A
	INC	HL
	DJNZ	FILE2

FILE3:
	CALL	CCHKF
	RET	Z
	CP	'.'
	JR	NZ,FILE3

FILE4:
	LD	HL,FNAME+8
	LD	B,3

FILE4L:
	CALL	CCHKF
	RET	Z
	CP	'.'
	JR	NZ,FILE12
	LD	(FNAME),A	;Parent directory(..)
	LD	(FNAME+1),A
	LD	A,20h
FILE12:
	CP	'*'
	JR	Z,FILE10
	LD	(HL),A
	INC	HL
	DJNZ	FILE4L
	RET

FILE9:
	CALL	FILE10
	JR	FILE3

FILE10:
	LD	A,'?'

FILE7:
	LD	(HL),A
	INC	HL
	DJNZ	FILE7
	RET

FILEI:
	LD	A,20H
	LD	BC,11*256
	LD	HL,FNAME
	PUSH	HL
	CALL	FILE7
	POP	HL
	RET

CCHKF:
	LD	A,(DE)
	CALL	CCHK2
	RET	Z
	JP	FKAN

CCHK2:
	INC	C
	DEC	C
	RET	NZ
CCHK3:
	CP	'+'
	RET	Z
	CP	','
	RET	Z
	CP	'/'
	RET	Z
	CP	':'
	RET	Z
	CP	';'
	RET	Z
	CP	'='
	RET	Z
	CP	'\'
	RET	Z
	CP	20H
	RET	NC
	CP	A		;Z=1
	RET

SS1:
	INC	DE
SPCUT:
	LD	A,(DE)
	CP	20H
	JR	Z,SS1
	RET

SETDRVF:
	LD	DE,FDRV
SETDRV0:
	CALL	SETDRV
	POP	IY
	POP	BC
	POP	DE
	POP	HL
	RET

SETDRV:
	EX	(SP),HL		;HL=RETRN ADDRESS
	PUSH	DE		;PUSH HL/DE/BC/IY
	PUSH	BC
	LD	A,(DE)
;	EX	DE,IY
	PUSH	DE
	EX	(SP),IY
	POP	DE
	PUSH	DE
	CALL	GETDRV
	INC	A
	LD	(IY),A
	DEC	A
	CALL	_CHGDRV

	JP	(HL)

GETDRV:
	AND	7FH
	SUB	01H
	JR	NC,GETDRV1
	LD	A,(_DVSW)	;Current Drive
GETDRV1:
	LD	(_DRV),A
	RET

SOPENX:
	CALL	CHKDDX
	JR	C,SOPENX1
	POP	BC
	JP	(HL)
SOPENX1:
	LD	DE,SFILE
	LD	A,(DE)
	CP	(IY)
	JR	NZ,SOPEN
	INC	DE
	PUSH	IY
	POP	HL
	INC	HL
	CALL	CPFILE
	JR	NZ,SOPEN

	LD	HL,(SCDIR)
	LD	(IY+14),L
	LD	(IY+15),H

	LD	HL,(SFNDF)	;Direcroty location and Flags
	LD	(_FILEN),HL

	LD	DE,(SFBPS)
	LD	HL,SFILE
	LD	(HL),0FFh
	INC	HL
	RET
SOPEN:
	LD	HL,FILESE
SOPENC:
	LD	(OPENPAT+1),HL

	CALL	_RDFATX		;Detect Media
	JR	C,RDDERR

	XOR	A
	LD	(_FILEN),A
SOPEN0:
	CALL	LDDIRX
	JR	Z,SDIRX1

	CALL	DC		;Sub Directory
	JR	C,SDIRX0
	LD	HL,(_DTBUF)
	LD	A,(HL)
	CP	'.'
	JR	Z,SOPEN1
SDIRX0:
	XOR	A
	LD	(_DIRF),A
	LD	(IY+14),1
	LD	(IY+15),0
SDIRX1:
	LD	DE,(_DIRPS)	;Root Directory

SOPEN1:
IBM1:	LD	C,32		;ooo 16
SOPEN1X:
	CALL	DC		;FILE SEARCH
	JR	C,RDDERR
	LD	HL,(_DTBUF)
SOPEN2:
	PUSH	DE
OPENPAT:CALL	FILESE		;(Self-rewriting)
	POP	DE
	JR	C,SOPENE
	JR	Z,NOTSE
SOPEN3:
	LD	A,(_DIRF)
	OR	A
	JR	NZ,SOPEN5

	CALL	ENDRDI
	JR	Z,SOPEN6
	INC	A
	JR	NZ,SOPEN6
	LD	C,16
	JR	SOPEN1X
SOPEN5:
	CALL	_GNCL	;END DIR
	RET	C
	CALL	ENDCL
SOPEN6:
	JR	C,SOPEN1

_SYS2B:
_SYS2D:
NOTSE:
	SCF			;CF=1
	SBC	A,A		;A=$FF
	RET

RDDERR:
	CP	A		;READ ERR CF=1 ZF=1
	SCF
	RET

NOPEN:
	LD	HL,FILESE
	LD	(OPENPAT+1),HL
	LD	IY,(_FCB)
	CALL	CHKWILDX
	JR	NC,NOTSE
	LD	A,(IY)
	DEC	A
	LD	(_DRV),A
	CALL	_CHGDRV
	RET	C

	CALL	LDDIRX
	LD	DE,(_FBPS)
	CALL	DC
	JR	C,RDDERR
	LD	A,(_FBCNT)
	DEC	A
	JR	Z,SOPEN3
NOPEN2:
	LD	HL,(_FBAD)
	LD	BC,20H
	ADD	HL,BC
	LD	C,A
	JR	SOPEN2

ENDRDI:
	LD	A,(DBLPAT)	;A=$29 or 0
	AND	1
	LD	C,A
	INC	A
	ADD	A,E
	LD	E,A
RTEPAT:	SUB	12		;(Self-rewriting)
	BIT	0,C
	RET

SOPENE2:
	LD	(_FBAD),HL
	LD	A,C
	LD	(_FBCNT),A
	LD	(_FBPS),DE
	LD	(_FCB),IY
SOPENE:
	XOR	A
	RET

COPEN:
	LD	(IY+13),20H		;Attribute

	LD	HL,NEXTSE
	CALL	SOPENC
	RET	NC
	RET	Z
	LD	A,(_DIRF)
	SUB	01h
	RET	C
	LD	B,1
	CALL	WRDF
	RET	C
	LD	DE,(_CLPS)
	PUSH	DE
	CALL	DCPAT
	CALL	DRDNX
	LD	HL,(_DTBUF)
	LD	E,L
	LD	D,H
	INC	DE		;DE,DTBUF+1
	LD	BC,1023		;なぜ1023?
	XOR	A
	LD	(HL),A
	PUSH	HL
	LDIR
	POP	HL
	POP	DE
	RET

DC:
	LD	(_CLPS),DE
	PUSH	BC
	PUSH	DE
	CALL	DCPAT
	CALL	DRDX
	POP	DE
	POP	BC
	RET

FILESE:
	LD	A,(HL)
	OR	A
	RET	Z		;END:ZF=1 CF=0
	CP	0E5H
	JR	Z,FILESE1
	PUSH	IY
	POP	DE
	INC	DE
	PUSH	HL
	CALL	CPFILE
	CALL	Z,CPFILE2
	POP	HL
	SCF
	RET	Z		;!!!:(ZF=1) CF=1
FILESE1:
	CALL	FNEXT
	JR	NZ,FILESE
ZFCF0:
	OR	0FFh		;ZF=0 CF=0
	RET

NEXTSE:
	LD	A,(HL)
	OR	A
	SCF
	RET	Z		;!!!:ZF=1 CF=1
	CP	0E5h
	SCF
	RET	Z		;!!!:(ZF=1) CF=1
	CALL	FNEXT
	JR	NZ,NEXTSE
	JR	ZFCF0

FNEXT:
	PUSH	HL
	LD	HL,_FILEN
	INC	(HL)
	POP	HL
	LD	DE,20h
	ADD	HL,DE
	DEC	C
	RET

CHKDDX:
	CALL	CHKWILDX
	RET	C
	PUSH	IY
	POP	DE
	INC	DE
	LD	HL,DDTB
	LD	B,DDS
CPNAME:
	PUSH	BC
	PUSH	DE
	LD	DE,CPBUF
	LD	BC,4
	LDIR
	POP	DE
	PUSH	DE
	PUSH	HL
	LD	HL,CPBUF
	CALL	CPFILE
	POP	HL
	POP	DE
	POP	BC
	JR	NZ,CPNAME1
	LD	A,(HL)
	INC	HL
	LD	H,(HL)
	LD	L,A
	RET
CPNAME1:
	INC	HL
	INC	HL
	DJNZ	CPNAME
	SCF
	RET

CPFILE:
	PUSH	BC
	LD	BC,0B00h
CPSTR1:
	LD	A,(DE)
	CP	'?'		;Wild card
	JR	Z,CPSTR2
	LD	A,(HL)
	CALL	FKANC
	PUSH	HL
	LD	H,A
	LD	A,(DE)
	RLC	C
	CALL	FKANC
	RRC	C
	CP	H		;CP (HL),(DE)
	POP	HL
	JR	NZ,CPSTR3
CPSTR2:
	INC	DE
	INC	HL
	DJNZ	CPSTR1
CPSTR3:
	POP	BC
	RET

CPFILE2:
	LD	A,(IY+13)
	OR	0E1h
	CPL
	AND	(HL)
	RET

DCPAT:
	LD	HL,(_DTBUF)
	LD	A,(_DIRF)
	OR	A
	RET	Z

CLUST:
	EX	DE,HL
CLSPAT:	LD	A,8	;DE=DE+8 (2D)  !ADDCL (Self-rewriting)
DBLPAT:	ADD	HL,HL	;DE=DE*2 (512) !DBLCL (Self-rewriting)
	EX	DE,HL
	ADD	A,E
	LD	E,A
	ADC	A,D
	SUB	E
	LD	D,A
	RET

ENDCL:
	LD	A,D	;END CLUSTER
CLPAT1:	CP	1	;164=356	(Self-rewriting)
	RET	NZ
	LD	A,E
CLPAT2:	CP	64h	;		(Self-rewriting)
	RET

CAP:
	CP	'a'
	RET	C
	CP	'z'+1
	RET	NC
	SUB	20h
	RET
CAP2:
	CALL	CAP
CAP3:
	CALL	CAP4
	CP	21h
	RET	NC
	LD	A,0A0h
	RET
CAP4:
	CP	5
	RET	NZ
	LD	A,0E5h
	RET

CHDIR:
	CALL	GETDPBD
	JR	C,CHDIR2
	LD	(IX+01AH),L		;!SDIR
	LD	(IX+01BH),H		;!SDIR+1
CHDIR2:
	POP	IX
	RET

LDDIR:
	CALL	GETDPBD
	LD	E,(IX+01AH)		;!SDIR
	LD	D,(IX+01BH)		;!SDIR+1
	INC	DE
	LD	(IY+00EH),E
	LD	(IY+00FH),D
	DEC	DE
	JR	CHDIR2

LDDIRX:
	LD	E,(IY+00EH)
	LD	D,(IY+00FH)
	DEC	DE
	CALL	ENDCL
	CALL	NC,LDDIR
LDDIRS:
	LD	A,D
	OR	E
	LD	(_DIRF),A
	RET

KILL:
	CALL	CHKWILDX
	JR	C,KILLW
	CALL	CHKDDX
	CCF
	CALL	NC,SOPENX1
KILLS:
	CALL	NC,CHKATT
	RET	C
KILLSX:
	LD	(HL),0E5h	;DIR
	CALL	WTDB
	LD	DE,1Ah
	ADD	HL,DE
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	JR	KILLS2
KILLS1:
	LD	DE,(_CLPS)	;FAT
KILLS2:
	CALL	ENDCL
	RET	NC		;CF=0
	LD	HL,0FFFEH	;-2
	ADD	HL,DE
	RET	NC		;DE= 0 or 1
	PUSH	DE
	CALL	_GNCL
	LD	(_CLPS),DE
	POP	DE
	LD	HL,0
	CALL	NC,_SNCL
	JR	NC,KILLS1
	RET

KILLW:
	CALL	SOPEN
KILLW1:
	JR	C,KILLW2
	CALL	SOPENE2
	CALL	KILLS
	CALL	NOPEN
	JR	KILLW1
KILLW2:
	RET	Z
	CCF
	RET

CHKATT:
	PUSH	HL
	LD	DE,0Bh
	ADD	HL,DE
	LD	A,(HL)
	POP	HL
	AND	1Fh
	RET	Z
	SCF
	RET

NAME:
	CALL	CHKWILDX
	RET	C
	LD	DE,4
	ADD	HL,DE
	LD	(NAMEP+2),HL
	INC	HL
	CALL	CHKWILD
	RET	C

	CALL	SOPENX1
	CALL	NC,CHKATT
	RET	C

	LD	A,(IY)
	PUSH	IY
NAMEP:	LD	IY,0
	LD	(IY),A
	CALL	SOPENX1
	EX	(SP),IY
	CCF
	CALL	NC,SOPEN
	EX	DE,HL
	POP	HL
	RET	C

SETNAME:
	LD	BC,11*256
	INC	HL
	LD	A,(HL)
	CP	0E5h
	JR	NZ,SNAME1
	LD	A,5
	JR	SNAME3
SNAME1:
	LD	A,(HL)
	INC	C
	DEC	C
	JR	NZ,SNAME3
	CALL	CAP
	CP	0A0h
	JR	NZ,SNAME3
	LD	A,20h
SNAME3:
	LD	(DE),A
	LD	A,(HL)
	INC	HL
	CALL	FKAN
	DJNZ	SNAME1
WTDB:
	LD	A,0FFh
	LD	(SFILE),A
SWTDBF:
	LD	A,1
	LD	(_WTDBF),A
	XOR	A
	RET

FKANC:
	BIT	0,C
	CALL	Z,CAP2
	JR	FKANX
FKAN:
	INC	DE
FKANX:
	BIT	0,C
	RES	0,C
	RET	NZ
	CP	80h
	RET	C
	CP	0A0h
	JR	C,FKAN1
	CP	0E0h
	RET	C
FKAN1:
	INC	C
	AND	A
	RET

CHKWILDX:
	PUSH	IY
	POP	HL
	INC	HL
CHKWILD:
	LD	B,11
	LD	A,'?'
CHKWIL1:
	CP	(HL)
	INC	HL
	SCF
	RET	Z
	DJNZ	CHKWIL1
	XOR	A
	RET

SDIRENT:		;IY=FCB HL=DIR
	PUSH	DE
	PUSH	HL
	PUSH	IY
	POP	DE
	EX	DE,HL
	CALL	SETNAME
;				Attribute
	LD	A,(IY+13)
	LD	(DE),A
	INC	DE
;				Reserved
	XOR	A
	LD	B,10
SDE1:
	LD	(DE),A
	INC	DE
	DJNZ	SDE1
;				TIME
	LD	A,(IY+22)
	LD	(DE),A
	INC	DE
	LD	A,(IY+23)
	LD	(DE),A
	INC	DE
;				DATE
	LD	A,(IY+20)
	LD	(DE),A
	INC	DE
	LD	A,(IY+21)
	LD	(DE),A
	INC	DE
;				First cluster
	LD	A,(IY+26)
	LD	(DE),A
	INC	DE
	LD	A,(IY+27)
	LD	(DE),A
	INC	DE
;				SIZE
	LD	A,(IY+16)
	LD	(DE),A
	INC	DE
	LD	A,(IY+17)
	LD	(DE),A
	INC	DE
	LD	A,(IY+18)
	LD	(DE),A
	INC	DE
	LD	A,(IY+19)
	LD	(DE),A

	XOR	A
	POP	HL
	POP	DE
	RET

WOPEN:
	LD	A,(IY+13)
	AND	1Fh
	SCF
	RET	NZ
	LD	(IY+28),0FEh	;Open
TOPEN2:
	XOR	A
TOPEN:
	LD	(IY+23),0FFh	;Initializes the time stamp
	RET

WRDFX:
	LD	B,C
	INC	B
	LD	A,37h
	LD	(DRDN1),A

WRDF:
	LD	DE,2
WRDF1:
	PUSH	BC
	PUSH	DE
	CALL	_GNCL
	JR	C,WRDF3
	LD	A,D
	OR	E
	JR	NZ,WRDF4
	POP	HL
	PUSH	HL
	LD	DE,(_CLPS)
	LD	(_CLPS),HL
	LD	A,D
	OR	E
	JR	NZ,WRDF2
	LD	(IY+26),L	;Start cluster
	LD	(IY+27),H
	JR	WRDF3
WRDF2:
	CALL	_SNCL
WRDF3:
	POP	DE
	POP	BC
	RET	C
	DJNZ	WRDF5
	LD	DE,(_CLPS)
	LD	HL,0FFFFh
	JP	_SNCL

WRDF4:
	POP	DE
	POP	BC
WRDF5:
	INC	DE
	CALL	ENDCL
	JR	C,WRDF1
	SCF
	RET

RWXR:
	SRL	B
	RR	C
IBM4:	SRL	B	;ooo
	RR	C

	LD	E,(IY+26)	;Cluster
	LD	D,(IY+27)
RWX1:
	LD	(_CLPS),DE
	LD	A,D
	OR	E
	SCF
	RET	Z

	LD	A,B
	OR	C
	RET	Z

	CALL	_GNCL
	RET	C
	DEC	BC
	CALL	ENDCL
	JR	C,RWX1
	SCF
	RET

DSKF:
MAXCLP:	LD	DE,0
	LD	HL,0
DSKF1:
	PUSH	DE
	CALL	_GNCL
	JR	C,POPSCF
	LD	A,D
	OR	E
	JR	NZ,DSKF2
	INC	HL
DSKF2:
	POP	DE
	DEC	DE
	LD	A,D
	OR	E
	JR	NZ,DSKF1
	RET

POPSCF:
	POP	AF
	SCF
	RET

SETTMS:
	LD	A,(IY+23)
	INC	A
	RET	NZ
SETTMSX:
	CALL	_SYS2C

	SLA	L
	SLA	L
	ADD	HL,HL	;*2
	ADD	HL,HL	;*4
	ADD	HL,HL	;*8
	LD	A,D
	RRCA
	AND	1Fh
	OR	L
	LD	L,A
	LD	(IY+22),L
	LD	(IY+23),H

	CALL	_SYS2A

	LD	BC,0F844H	;-1980
	ADD	HL,BC
	LD	H,L

	LD	A,D
	ADD	A,A	;*2
	ADD	A,A	;*4
	ADD	A,A	;*8
	ADD	A,A	;*16
	LD	L,A
	ADD	HL,HL
	LD	A,L
	OR	E
	LD	L,A
	LD	(IY+20),L
	LD	(IY+21),H
	RET

PUSHRR:
	CALL	SUBRR
POPRR1:
	LDIR
	RET

SUBRR:
	PUSH	IY
	POP	HL
	LD	DE,33
	ADD	HL,DE
	LD	DE,HLBUF
	LD	BC,3
	RET

SETSEQ:
	PUSH	AF
	LD	A,(IY+33)
	LD	L,(IY+34)
	LD	H,(IY+35)

	CALL	SSQ1

	ADD	HL,HL
	SRL	L
	LD	(IY+32),L
	LD	(IY+12),H
	POP	AF

POPRR:
	CALL	SUBRR
	EX	DE,HL
	JR	POPRR1

GETSIZE:
	LD	A,(IY+16)
	LD	L,(IY+17)
	LD	H,(IY+18)
SSQ1:
	ADD	A,A
	ADC	HL,HL
	OR	A
	RET	Z
	INC	HL
	RET

GETSEQ:
	LD	L,(IY+32)
	LD	H,(IY+12)

	SLA	L

	SRL	H
	RR	L
	RET

SETRBR:
	XOR	A	;HLA = HL*128
	SRL	H
	RR	L
	RRA
	LD	(IY+33),A
	LD	(IY+34),L
	LD	(IY+35),H
	LD	HL,128
	RET

[DE26]:
	LD	DE,(STABLE+2*26h)
	JR	[DE1]
[DE27]:
	LD	DE,(STABLE+2*27h)
[DE1]:
	CALL	[DE]
;	EX	DE,IY
	PUSH	DE
	EX	(SP),IY
	POP	DE
	RET
[DE]:
;	EX	DE,IY
	PUSH	DE
	EX	(SP),IY
	POP	DE
	JP	(IY)

SCDIR:	DS	2		;+14 +15
SFBPS:	DS	2		;FBPS
SFNDF:	DS	2		;FILEN DIRF
SFILE:	DS	33		;DRV FILENAME
HLBUF:	DS	3		;Random record buffer

_FATPS:	DW	0
_DIRPS:	DW	0
_CLPS:	DW	0

;
;
;
;	$INCLUDE	LDFILE2
;
;
;	LSX-Dodgers FILE2
;
RBWDD:
	PUSH	HL
	POP	BC
	LD	HL,NUL
	CALL	DDX
	JR	NZ,RBWDD2
	LD	HL,(STABLE+2*4)
RBWDD2:
	CP	'C'
	JR	NZ,RBWDD3
	LD	HL,PRINTS
RBWDD3:
	CP	'P'
	JR	NZ,RBWDD4
	LD	HL,(STABLE+2*5)
RBWDD4:
	LD	(RBWDDP+1),HL
	LD	HL,(_DTA)
RBWDD1:
	LD	A,B
	OR	C
RBWDD5:
	JP	Z,RBW1
	LD	E,(HL)
	INC	HL
RBWDDP:	CALL	_SYS02
	JP	C,RBRERR
	LD	A,1Ah
	CP	E
	JR	Z,RBWDD5
	DEC	BC
	JR	RBWDD1

				;Write random block
_SYS26:
	XOR	A
	LD	(DRDN1),A
	LD	(LEFT+1),HL	;Write record byte
	LD	(LEFTX),HL
	CALL	SETDRV

	CALL	RBX0
	JP	C,RBWERR
	JR	Z,RBWDD
	CALL	WOPEN
	JP	C,RBWERR
	LD	A,H
	OR	L
	JP	Z,RBW1

	DEC	HL

	CALL	CDERR		;CDE=Random record

	XOR	A
	ADD	HL,DE
	ADC	A,C
	LD	B,A
	LD	C,H
	CALL	RWXR
	CALL	C,WRDFX
	JP	C,RBWERR

	CALL	RBX2
	JR	Z,RBWB
	CALL	RBXA
	JR	C,RBWERR
	EX	DE,HL
	PUSH	BC
	LDIR
	LD	(DTAX),HL

	CALL	SWTDBF

	LD	HL,(LEFTX)
	POP	DE
	SBC	HL,DE
	LD	(LEFTX),HL
	JR	Z,RBWEND

RBWB:
	CALL	RBXB
	JR	Z,RBWC
RBWB1:
	PUSH	BC
	PUSH	DE
	CALL	CLUST
	CALL	DWTC
	POP	DE
	POP	BC
	JR	C,RBWERR
	CALL	_GNCL
	JR	C,RBWERR
	DJNZ	RBWB1
RBWC:
	CALL	RBXC
	JR	Z,RBWEND

	CALL	CLUST
	CALL	DRDN
	JR	C,RBWERR
	LD	DE,(_DTBUF)
	LDIR
	CALL	SWTDBF
RBWEND:
	CALL	RBXEND

	CALL	RBX1
	JR	NC,RBW1
	LD	HL,(LEFT+1)
	LD	E,(IY+16)	;CDE=File size
	LD	D,(IY+17)
	LD	C,(IY+18)
	XOR	A
	ADD	HL,DE
	ADC	A,C
	LD	(IY+16),L
	LD	(IY+17),H
	LD	(IY+18),A
RBW1:
	POP	IY
	POP	BC
	POP	DE
	POP	HL
NUL:
	XOR	A
	RET

RBWERR:
	PUSH	IY
	POP	DE
	LD	HL,(STABLE+2*10h)
	CALL	[HL]
RBRERR1:
	LD	A,01h
RBRERR2:
	POP	IY
	POP	BC
	POP	DE
	POP	HL
	SCF
	LD	HL,0
	RET

RBRERR:
	LD	A,0FFh
	JR	RBRERR2

RBRFL:
RBRFLP:	LD	A,00h
	CP	0Dh
	JR	NZ,RBRFL1
	PUSH	DE
	LD	E,0Ah
	JR	RBRFL2
RBRFL1:
	PUSH	DE
	CALL	_SYS07
	LD	E,A
RBRFL2:
	CALL	_PRINT
	LD	A,E
	POP	DE
	LD	(RBRFLP+1),A
	RET
DDX:
	LD	A,(IY+1)
	CALL	CAP
	CP	'A'
	RET

RBRDD:
	PUSH	HL
	POP	BC
	LD	HL,RBRFL
	CALL	DDX
	JR	NZ,RBRDD2
	LD	HL,(STABLE+2*3)
	JR	RBRDD3
RBRDD2:
	CP	'C'
	JR	NZ,RBRDERR
RBRDD3:
	LD	(RBRDDP+1),HL

	LD	DE,(_DTA)
	LD	HL,0
RBRDD1:
	LD	A,B
	OR	C
	JR	Z,RBRDDE1
	INC	HL
RBRDDP:	CALL	RBRFL
	JR	C,RBRDDE
	CP	1Ah
	JR	Z,RBRDDE
	CP	3
	JR	Z,RBRDDE
	LD	(DE),A
	INC	DE
	DEC	BC
	JR	RBRDD1

RBRDDE:
	LD	A,1Ah
	LD	(DE),A
RBRDDE2:
	XOR	A
	INC	A
RBRDDE1:
	LD	(RBRAP+1),A
	JP	RBREND0
RBRDERR:
	LD	HL,0
	JR	RBRDDE2

				;Read random block
_SYS27:
	LD	(LEFTX),HL
	CALL	SETDRV

	BIT	4,(IY+13)
	JP	NZ,RBRDIR
	CALL	RBX0
	JP	C,RBRERR
	JR	Z,RBRDD
	CALL	RBX1
	JP	C,RBRERR1
	LD	A,C
	EX	DE,HL
	SBC	HL,DE		;CP 0HL,CDE
	ADD	HL,DE
	SBC	A,00h
	JR	C,RBR1
	EX	DE,HL
RBR1:
	SBC	A,A
	AND	1
	LD	(RBRAP+1),A

	LD	A,H
	OR	L
	JP	Z,RBREND0

	LD	(LEFT+1),HL	;Read record byte
	LD	(LEFTX),HL

	CALL	RBX2
	JR	Z,RBRB
	CALL	RBXA
	JP	C,RBRERR
	PUSH	BC
	LDIR
	LD	(DTAX),DE
	LD	HL,(LEFTX)
	POP	DE
	AND	A
	SBC	HL,DE
	LD	(LEFTX),HL
	JR	Z,RBREND

RBRB:
	CALL	RBXB
	JR	Z,RBRC
RBRB1:
	PUSH	BC
	PUSH	DE
	CALL	CLUST
	CALL	DRDC
	POP	DE
	POP	BC
	CALL	NC,_GNCL
	JP	C,RBRERR
	DJNZ	RBRB1
RBRC:
	CALL	RBXC
	JR	Z,RBREND

	CALL	CLUST
	CALL	DRDX
	JP	C,RBRERR
	EX	DE,HL
	LD	HL,(_DTBUF)
	LDIR
RBREND:
	CALL	RBXEND
RBREND0:
	POP	IY
	POP	BC
	POP	DE
	POP	AF	;(HL)
	XOR	A
RBRAP:	LD	A,00h
	RET

RBRDIR:
	LD	L,(IY+26)
	LD	H,(IY+27)
	CALL	CHDIR
	XOR	A
	LD	H,A
	LD	L,A
	INC	A
	LD	(RBRAP+1),A
	JR	RBREND0

RBX0:
	LD	HL,(_DTA)
	LD	(DTAX),HL
	LD	HL,(LEFTX)
	LD	A,(IY+28)	;Open
	SUB	0FDh
	RET

RBX1:
	PUSH	HL		;Record byte

	LD	L,(IY+16)	;AHL=File size
	LD	H,(IY+17)
	LD	A,(IY+18)

	CALL	CDERR		;CDE=Random record

	AND	A
	SBC	HL,DE
	SBC	A,C
	POP	DE

	RET	C
	LD	C,A
	EX	DE,HL	;CDE=File byte	HL=Record byte
	OR	D
	OR	E
	RET	NZ
	SCF
	RET

RBX2:
	LD	C,(IY+34)	;Cluster settings
	LD	B,(IY+35)
	CALL	RWXR
IBM5:	LD	A,3		;ooo 1
	AND	(IY+34)
	OR	(IY+33)
	RET

RBXA:
	PUSH	DE
	CALL	CLUST
	CALL	DRDX
	POP	DE
	RET	C
	CALL	_GNCL
	RET	C
	LD	(_CLPS),DE

	LD	C,(IY+33)
	LD	A,(IBM5+1)		;ooo 1
	AND	(IY+34)
	LD	B,A
IBM7:	LD	HL,1024		;ooo 512
	SBC	HL,BC		;remaining cluster

	LD	DE,(LEFTX)
	SBC	HL,DE		;CP HL,DE
	ADD	HL,DE
	JR	C,RBXA1
	EX	DE,HL
RBXA1:
	PUSH	HL
	LD	HL,(_DTBUF)
	ADD	HL,BC
	LD	DE,(DTAX)
	POP	BC
	RET

RBXB:
	LD	HL,(DTAX)
	LD	DE,(_CLPS)
	LD	A,(LEFTX+1)
	SRL	A
IBM8:	SRL	A		;ooo
	LD	B,A
	RET

RBXC:
	LD	BC,(LEFTX)
	LD	A,(IBM5+1)
	AND	B
	LD	B,A
	OR	C
	RET

RBXEND:
LEFT:	LD	DE,0
	XOR	A
	LD	L,(IY+33)
	LD	H,(IY+34)
	ADD	HL,DE
	ADC	A,(IY+35)
	LD	(IY+33),L
	LD	(IY+34),H
	LD	(IY+35),A
	EX	DE,HL		;HL=Read byte
	RET

CDERR:
	LD	E,(IY+33)	;CDE=Random record
	LD	D,(IY+34)
	LD	C,(IY+35)
	RET

CPBUF:
LEFTX:	DW	0
DTAX:	DW	0
	DB	020H	;DS 7,20h
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
;
;
;
;	$INCLUDE	LDDIO
;

;	LSX-Dodgers DIO

DRDX:
	CALL	DRDY
	RET	Z
	CALL	DRDX1
	RET	C
	PUSH	HL
	PUSH	BC
	PUSH	DE
	LD	HL,(_DTBUF)
	CALL	DRDC
	CALL	C,DRDNE
DRDXE1:
	POP	DE
	POP	BC
DRDXE2:
	POP	HL
	RET

DRDN:
	XOR	A
DRDN1:	NOP
	JR	NC,DRDX
DRDNX:
	CALL	DRDY
	RET	Z
DRDX1:
	CALL	DWTX
	LD	(_DCLPS),DE
	LD	A,(_DRV)
	LD	(_DBDRV),A
	CALL	_CHGDRV
	RET	NC
DRDNE:
	SBC	A,A
	LD	(_DBDRV),A
	RET

DRDY:
	PUSH	HL
	LD	A,(_DRV)
	LD	HL,_DBDRV
	XOR	(HL)
	JR	NZ,DRDY1

	LD	HL,(_DCLPS)
	SBC	HL,DE		;CF=0
DRDY1:
	POP	HL
	RET

DWTX:
	LD	A,(_WTDBF)
	OR	A
	RET	Z
	XOR	A
	LD	(_WTDBF),A

	PUSH	HL
	PUSH	BC
	PUSH	DE
	LD	A,(_DBDRV)
	CALL	_CHGDRV
	LD	DE,(_DCLPS)
	LD	HL,(_DTBUF)
	CALL	NC,DWTC
	JR	DRDXE1

RDFATX:
	PUSH	HL
	LD	A,(_DRV)
	LD	HL,_FATDRV
	XOR	(HL)
	AND	7Fh
	JR	Z,DRDY1

	PUSH	BC
	PUSH	DE
	PUSH	IX
	CALL	WTFATX
	JR	C,RDFATE1

	LD	A,(_DRV)
	LD	(_FATDRV),A
	CALL	_RDFAT
RDFATE2:
	JR	NC,RDFATE1
	SBC	A,A
	LD	(_FATDRV),A
RDFATE1:
	POP	IX
	JR	DRDXE1

WTFATX:
	LD	A,(_WTFATF)
	OR	A
	RET	Z
	PUSH	HL
	LD	A,(_FATDRV)
	LD	HL,_DBDRV
	XOR	(HL)
	AND	7Fh
	CALL	Z,DWTX
	JR	C,DRDY1
	PUSH	BC
	PUSH	DE
	PUSH	IX
	CALL	WTFAT
	XOR	A
	LD	(_WTFATF),A
	JR	RDFATE1

NCL1:
	LD	A,D
	OR	E
	SCF
	RET	Z

	LD	A,(_DRV)
	BIT	3,D
	JR	Z,NCL2
	OR	80h
NCL2:
	PUSH	HL
	LD	HL,_FATDRV
	CP	(HL)
	JR	Z,DRDY1

	PUSH	BC
	PUSH	DE
	PUSH	IX
	PUSH	AF
	CALL	WTFATX
	POP	BC
	JR	C,RDFATE1
	LD	A,B
	LD	(_FATDRV),A
	CALL	RDFATS
	JR	RDFATE2

NCL3:
	RES	3,D
	LD	L,E
	LD	H,D
	SRL	H
	RR	L
	LD	BC,(_FATBF)
	RET

GNCL:
	CALL	NCL1		;GET NEW CLUSTER
	RET	C
	PUSH	BC
	PUSH	HL
	CALL	NCL3
	JR	C,GNC1
	ADD	HL,DE
	ADD	HL,BC
	LD	E,(HL)
	INC	HL
	LD	A,(HL)
	AND	0Fh
	LD	D,A
	POP	HL
	POP	BC
	RET
GNC1:
	ADD	HL,DE
	ADD	HL,BC
	LD	A,(HL)
	INC	HL
	LD	D,(HL)
	LD	B,4
GNC1L:
	SRL	D
	RRA
	DJNZ	GNC1L

	LD	E,A
	POP	HL
	POP	BC
	AND	A
	RET

SNCL:
	CALL	NCL1
	RET	C
	LD	A,1
	LD	(_WTFATF),A
;				SET NEW CLUSTER
	PUSH	BC
	PUSH	DE
	PUSH	HL
	PUSH	HL
	CALL	NCL3
	JR	C,SNC1
	ADD	HL,DE
	ADD	HL,BC
	POP	DE
	LD	(HL),E
	INC	HL
	LD	A,D
	AND	0Fh
	LD	D,A
	LD	A,(HL)
	AND	0F0h
	OR	D
	LD	(HL),A
	JR	SNC2
SNC1:
	ADD	HL,DE
	ADD	HL,BC
	POP	DE
	EX	DE,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	EX	DE,HL
	LD	A,(HL)
	AND	0Fh
	OR	E
	LD	(HL),A
	INC	HL
	LD	(HL),D
SNC2:
	POP	HL
	POP	DE
	POP	BC
	RET

RDFAT0X:
	CALL	RDFATS
	RET	C
	CP	(IX+1)
	RET	Z
	SCF
	RET

RDFAT:
	LD	A,(_DRV)
	CALL	CHGDRVR
	RET	C
	LD	A,(IX+12h)
	CP	87h
	JR	NZ,RDFAT0X

	LD	A,7Fh
	LD	(CHECK),A	;A=$7F
	BIT	0,(IX+0Ah)
	JR	Z,X2HX
E2DX:
	LD	HL,M2D
	CALL	DRDF
	JR	C,E2HX
	CP	0FDh		;2D
	RET	Z
	CP	0F9h		;2DD9
	JP	Z,E2DD9
	CP	0FBh		;2DD8
	SCF
	RET	NZ		;NOT 2DD
	LD	HL,M2DD8
CHGTYPE:
	PUSH	DE
	CALL	CHGDV
	LD	A,(_DRIVE)
	AND	3
	OR	80h
	LD	L,A
	LD	H,_CYL0/256
	LD	A,0FFh
	LD	(HL),A
	POP	DE
	RET

CHGDV:
	PUSH	IX
	POP	DE
	LDI
	LDI
	INC	DE
	INC	DE
	INC	DE
	INC	DE
	LD	BC,12
	LDIR
CHGDV2:
	LD	A,0FFh
	LD	(_DSK),A
	LD	A,(_DRV)
	JP	_CHGDRV

E2HX:
	INC	A
	RET	Z
	LD	HL,CHECK
	RLC	(HL)
	RET	C
X2HX:
	LD	HL,M2HD
	LD	DE,0
	CALL	DRDD
	JR	NC,X2HX1
	INC	A
	RET	Z
	LD	HL,CHECK
	RLC	(HL)
	RET	C
	JR	E2DX
X2HX1:
	INC	HL
	LD	A,(HL)
	LD	B,0FEh
	CP	0Ch
	JR	Z,X2HDE
	LD	B,0F8h
	SUB	20h		;$20
	JR	Z,X2HDE
	INC	A		;$1F
	JR	Z,X2HDE
	INC	A		;$1E
	JR	NZ,C2HX		;2HD/2HC/2HQ
X2HS:
	LD	HL,M2HS
	CALL	X2HSS
	RET	C
	LD	HL,(_FATBF)
	INC	HL
	LD	A,(HL)		;FATBF+1
	CP	80
	CCF
	RET	NC
	CP	90
	RET	NC
	LD	(IX+0Ch),A
	SUB	80
	ADD	A,A	;*2
	LD	C,A
	ADD	A,A	;*4
	ADD	A,A	;*8
	ADD	A,A	;*16
	ADD	A,C	;*18
	ADD	A,98h
	LD	(IX+8),A
	LD	A,5
	ADC	A,0
	LD	(IX+9),A
	JR	CHGDV2
X2HDE:
	LD	HL,M2HDE
	INC	HL
	LD	(HL),B
	DEC	HL
X2HSS:
	CALL	DRDF
	RET	C
	CP	(IX+1)
	SCF
	RET	NZ
	CALL	INCDRD
	JR	NC,DRDC
	RET

E2DD9:
	LD	HL,M2DD
	CALL	CHGTYPE
	LD	HL,(_FATBF)
INCDRD:
	INC	H
	INC	H
	INC	H
	INC	H
DRDC:
	CALL	_DRD
	RET	C
	LD	A,(DBLPAT)
	OR	A
	JP	NZ,_DRD
	RET

DWTC:
	CALL	_DWT
	RET	C
	LD	A,(DBLPAT)
	OR	A
	JP	NZ,_DWT
	RET

DRDF:
	LD	DE,(_FATPS)
DRDD:
	CALL	CHGTYPE
	LD	HL,(_FATBF)
	PUSH	HL
	CALL	DRDC
	POP	HL
	RET	C
	LD	A,(HL)
	RET

C2HX:
	CALL	RDFATS
	RET	C
	CP	0FEh
	RET	Z
	CP	0F0h
	JR	Z,X2HQ
	CP	0F9h
	SCF
	RET	NZ
	PUSH	HL
	LD	HL,M2HC
X2HQ1:
	CALL	CHGTYPE
	POP	HL
	LD	B,4
	JR	RDFATL
X2HQ:
	PUSH	HL
	LD	HL,M2HQ
	JR	X2HQ1

RDFATS:
	CALL	FATS
	RET	C
RDFATL:
	PUSH	BC
	CALL	_DRD
	POP	BC
	RET	C
	DJNZ	RDFATL
	LD	HL,(_FATBF)
	LD	A,(HL)
	RET

WTFAT:
	CALL	FATS
	CALL	NC,WTFATL
	RET	C
	BIT	1,(IX+0Fh)
	RET	Z
	CALL	FATS2
	PUSH	BC
	LD	C,(IX+0)
	LD	B,0
	EX	DE,HL
	ADD	HL,BC
	EX	DE,HL
	POP	BC
WTFATL:
	PUSH	BC
	CALL	_DWT
	POP	BC
	RET	C
	DJNZ	WTFATL
	RET

FATS:
	LD	A,(_FATDRV)
	CALL	CHGDRVR
	RET	C
FATS2:
	LD	DE,(_FATPS)
	LD	HL,(_FATBF)
	LD	B,(IX+0)
	LD	A,6
	CP	B
	RET	NC
	LD	A,(_FATDRV)
	ADD	A,A
	JR	NC,FATS3
	LD	A,B
	SUB	6
	LD	B,A
	INC	DE
	INC	DE
	INC	DE
	INC	DE
	INC	DE
	INC	DE
	RET
FATS3:
	LD	B,6
	XOR	A
	RET

CHGDRV:
	AND	7Fh
	PUSH	HL
	LD	HL,_DSK
	CP	(HL)
	JR	Z,CHGDRVE
CHGDRV1:
	PUSH	IX
	CALL	CHGDRV0
	LD	A,(_DSK)
	POP	IX
CHGDRVE:
	POP	HL
	RET

CHGDRV0:
	LD	L,A
	CALL	_GETDPB
	RET	C

	LD	A,L
	LD	(_DSK),A

	DI
	LD	(SPPAT2+1),SP

	LD	SP,IX

	POP	HL
	POP	HL
	LD	(_DRD+1),HL

	POP	HL
	LD	(_DWT+1),HL

	POP	HL
	LD	(CLSPAT+1),HL	;ADDCL

	POP	HL		;MAXCL
	LD	A,L
	LD	(CLPAT2+1),A
	LD	A,H
	LD	(CLPAT1+1),A
	DEC	HL
	LD	(MAXCLP+1),HL

	POP	HL		;H=MAXDIR L=FDMODE
	LD	A,L
	OR	0FEh
	LD	(FDMODE+1),A
	RLCA
	AND	3
	LD	(FSPAT+1),A
	LD	A,H
	LD	(RTEPAT+1),A

	POP	HL
	LD	A,L
	LD	(_MAXCYL),A
	LD	A,H
	LD	(MAXSEC+1),A

	POP	HL
	LD	H,0
	LD	(_FATPS),HL

	POP	HL
	LD	A,H
	LD	(SECPAT+1),A
	XOR	A		;CF=0 ﾉ ﾀﾒ
	LD	H,A
	LD	(_DIRPS),HL

	POP	HL
	LD	A,H
	LD	(_DRIVE),A

	POP	HL
	POP	HL
	LD	(_GNCL+1),HL

	POP	HL
	LD	(_SNCL+1),HL

SPPAT2:	LD	SP,0
	EI
	PUSH	DE
	BIT	7,(IX+0Fh)
	JR	Z,NEC

	LD	DE,0218h
	LD	HL,0

	LD	A,3
	JR	NEC1
NEC:
	LD	DE,38CBh	;SRL B
	LD	HL,3FCBh	;SRL A

	LD	A,3
NEC1:
	LD	(IBM5+1),A	;3 1
	INC	A		;4 2
	LD	(IBM7+2),A
	ADD	A,A		;8 4
	ADD	A,A		;$10 8
	ADD	A,A		;$20 $10
	LD	(IBM1+1),A
	ADD	A,A		;$40 $20
	ADD	A,A		;$80 $40
	ADD	A,A		;$00 $80
	CPL			;$FF $7F
	LD	(IBM2+1),A
	LD	(IBM4),DE
	LD	(IBM8),HL
	POP	DE
	XOR	A
	RET

GETDPBD:
	EX	(SP),IX
	PUSH	IX
	LD	A,(_DRV)
	JR	GETDPB1

CHGDRVR:
	CALL	_CHGDRV
	RET	C
	LD	A,(_DSK)
GETDPB1:
	JP	_GETDPB

GETDPB:
	CP	8
	CCF
	RET	C
	ADD	A,A	;*2
	ADD	A,A	;*4
	ADD	A,A	;*8
	ADD	A,A	;*16
	ADD	A,A	;*32
;	LD	IXL,A		;OHM-Z80固有マクロ
;	LD	IXH,DEVICE/256	;OHM-Z80固有マクロ
;	LD	A,(IX)		;OHM-Z80固有マクロ
	DB	0DDH		;Z80未定義命令
	LD	L,A		;
	DB	0DDH		;Z80未定義命令
	LD	H,DEVICE/256	;
	LD	A,(IX+000H)	;

	CP	01h		;A=0 THEN CF=1
	RET

FFLUSH:
	PUSH	AF
	LD	A,0FFh
	LD	(SFILE),A
	CALL	DWTX
	LD	A,0FFh
	LD	(_DBDRV),A
	CALL	WTFATX
	LD	A,0FFh
	LD	(_FATDRV),A
	POP	AF
	RET

M2D:
	DB	2,0FDh
	DW	2908h,356		;356は10進か？
	DB	0FFh,12,40,9,1,2,5,1

M2DD8:
	DB	2,0FBh
	DW	2908h,636		;636は10進か？
	DB	0FFh,12,80,8,1,2,5,1

M2DD:
	DB	3,0F9H
	DW	290Ah,715		;715は10進か？
	DB	0FFh,14,80,9,1,2,7,1

M2HC:
	DB	7,0F9h
	DW	27,2373			;2373は10進か？
	DB	0FEh,29,80,15,1,82h,15,1

M2HD:
	DB	2,0FEh
	DW	9,1223			;1223は10進か？
	DB	0FEh,11,77,8,1,2,5,1

M2HQ:
	DB	9,0F0h
	DW	31,2845			;2845は10進か？
	DB	0FEh,36,80,18,1,82h,19,1

M2HDE:
	DB	3,0FEh
	DW	11,1429			;1429は10進か？
	DB	0FEh,13,80,9,1,2,7,1

M2HS:
	DB	3,0FBh
	DW	8,1432			;1432は10進か？
	DB	0FEh,10,80,9,1,1,4,10

CHECK:	DB	0

;
;
;
;	$INCLUDE	LDDISK
;
;
;	LSX-Dodgers DISK
;
SEEK:
	LD	A,D
	OR	E
	LD	A,01h
	JR	Z,DIV3

	LD	B,16
MAXSEC:	LD	C,00h
	XOR	A
	EX	DE,HL
DIV1:
	ADD	HL,HL
	ADC	A,A
	CP	C
	JR	C,DIV2
	SUB	C
	INC	L
DIV2:
	DJNZ	DIV1

SECPAT:	ADD	A,01h		;(Self-rewriting)
	LD	D,L	;Quotient(TRACK)
DIV3:
	LD	E,A	;Remainder
	SRL	D	;CYLINDER
	SBC	A,A
	AND	10h	;SIDE
	LD	C,A

	LD	A,(_DRIVE)
	CP	4
	CCF
	RET	C
	OR	C
	LD	(MOPAT+1),A	;Motor off data
	LD	BC,0FFCh
	OR	80h		;Mortor on
	OUT	(C),A

	CALL	SETMODE
	RET	C

	CALL	DRIVE
	CP	0FFh		;A=$FF Unknown CYLINDER
	CALL	Z,FDCRES	;Restore
	LD	C,0F9h
	OUT	(C),A		;Currrent CYLINDER
	SUB	D
	RET	Z		;No seek

	LD	A,(_ISEEK)
	LD	C,A

	LD	A,(_MAXCYL)	;Max CYLINDER
	DEC	A
	CP	D		;Over CYLINDER
	RET	C

	CP	C		;for Built-in 2DD
	JR	C,SETM2
	LD	A,B		;B=$0F
	IN	A,(0FEh)	;2HD mode for 2DD seek
SETM2:
	LD	A,B
	IN	A,(0FDh)	;MFM mode

	LD	C,0FBh
	OUT	(C),D
	LD	(HL),D
	LD	C,18h		;Seek
FDCCMD2:
	LD	A,(_SEEKSP)
FSPAT:	AND	0FFh
	OR	C

FDCCMD:
	CALL	COMSET

@FDCPAT:LD	A,(FDCPAT+1)
	AND	20h		;Write data Write track
	INC	A

SST:
	LD	C,0
SST1:
	DEC	C		; 4
	JR	NZ,SST1		;12 * 256 / 4 = About 1ms
	DEC	A
	JR	NZ,SST1

	INC	A		;A=1
	CALL	READY
SETMODE:
	LD	A,B		;B=$0F
FDMODE:	IN	A,(0FFh)	;Floppy mode(2D/2HD) (Self-rewriting)

	LD	A,B
	IN	A,(0FDh)	;MFM mode

	CALL	DELAY0		;Head select time
	LD	A,81h
READY:
	LD	(WAITA+1),A
	PUSH	HL
	LD	C,0F8h
	LD	H,C
READY2:
	IN	A,(C)
WAITA:	AND	81h		;NOT READY,BUSY
	JR	Z,READYE
	EX	(SP),HL		;wait
	EX	(SP),HL		; //
	DEC	HL
	LD	A,H
	OR	L
	JR	NZ,READY2
	SCF
READYE:
	POP	HL
	RET

FDCRES:
	LD	(HL),0
	LD	C,8
	JR	FDCCMD2

FDMOFF:
	PUSH	AF
	PUSH	BC
	LD	BC,0FFCh	;Motor off
MOPAT:	LD	A,00h		;(Self-rewriting)
	OUT	(C),A
	POP	BC
	POP	AF
	RET

SECSET:
	LD	BC,0FFAh
	OUT	(C),E
COMSET:
	LD	C,0F8h
	OUT	(C),A
DELAY0:
	LD	A,26
DELAY:
	DEC	A
	JR	NZ,DELAY
	RET

DRIVE:
	LD	HL,(_DRIVE)
	LD	H,_CYL0/256
	SET	7,L
	LD	A,(HL)
	RET

RNF:
	CALL	DRIVE
	LD	(HL),0FFh
	RET

DEMES:	DB	3,7
	DB	0A5h,'Device I/O Error!',5,3
	DB	'Abort Retry Ignore?',5,3,0

RETRY:	DB	2


;	FLOPPY DISK DRIVER(DMA)


WTTRK:
	LD	A,0F4h
	DB	1	;JR	WTTRK1
FDWT:
	LD	A,0A0h
WTTRK1:
	LD	(FDCPAT+1),A
	LD	A,16
	DI
	JR	DISK

FDRD:
	LD	A,80h
	NOP

	LD	(FDCPAT+1),A
	LD	A,14

DISK:
	LD	(DMAPAT+1),A

	LD	(DMAD+11),HL
DISKR:
	LD	A,2		;Retry count
	LD	(RETRY),A
DISK2:
	PUSH	DE
	CALL	SEEK
	JR	C,ERRF

DMAPAT:	LD	A,14
	LD	HL,DMAD
	CALL	SETDMA
	OUT	(C),C		;OUT $1F87,$87
FDCPAT:	LD	A,80h		;FDC COMMAND(Self-rewriting)
	PUSH	BC
	CALL	SECSET
	LD	HL,(DMAD+11)
	INC	HL
	LD	DE,0BB06h	;READ DMA

	LD	A,3
	CALL	READY
	IN	A,(C)

	POP	BC
	OUT	(C),D
	OUT	(C),E
	IN	E,(C)
	IN	D,(C)
	ADD	HL,DE
	POP	DE
	INC	DE
	EI
	CALL	FDMOFF
	OR	A
	RET	Z
	DEC	DE
	BIT	4,A
	CALL	NZ,RNF
DISKE2:
	LD	HL,RETRY
	DEC	(HL)
	JR	NZ,DISK2
	OR	A
	JR	Z,ERR
	PUSH	DE
ERRF:
	POP	DE
DELP:
	CALL	RNF
	CALL	FDMOFF
	LD	A,(_SEEKSP)
	ADD	A,A
	SBC	A,A
	JR	C,ERR
DELP1:
	PUSH	DE
	LD	HL,DEMES
	CALL	MSX
	CALL	KEYBC
DELP2:
	CALL	INKEY
	JR	Z,DELP2

	POP	DE
	CALL	CAP
	CP	'R'
	JP	Z,DISKR
	CP	'I'
	JR	Z,IGNORE
	CP	'A'
	JR	NZ,DELP1
	JP	BOOT
IGNORE:
	LD	A,0FFh
ERR:
	CP	A
	SCF
	RET

SETDMA:
	LD	BC,1F87h
SDMA:
	INC	B
	OUTI
	DEC	A
	JR	NZ,SDMA
	RET

DMAD:	DB	0C3h, 7Dh,0FBh, 0Fh,0FFh,0FFh,2Ch,10h		;X1turbo
	DB	 80h, 92h, 8Dh, 00h, 00h,0CFh,01h,0CFh		;DISK DMA


;	EMM DRIVER(DMA)


EDWTC:
	LD	A,17
	DB	1
EDRDC:
	LD	A,15
EDWTC1:
	PUSH	DE
	LD	(EDMAD+12),HL
	EX	DE,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(_MAXCYL-1)
	LD	C,0
	ADD	HL,BC
	LD	BC,(_DRIVE)
	LD	B,0Dh
	OUT	(C),C
	INC	C
	OUT	(C),L
	INC	C
	OUT	(C),H

	LD	HL,EDMAD
	CALL	SETDMA
	LD	A,0B3h
	OUT	(C),A
	OUT	(C),C		;OUT $1F87,$87
	EX	DE,HL
	INC	H
	INC	H
	INC	H
	INC	H
	POP	DE
	INC	DE
	XOR	A
	RET

EDMAD:	DB	0C3h, 7Dh, 03h, 0Dh,0FFh, 03h, 2Ch, 50h, 02h
	DB	 80h, 9Ah,0ADh, 00h, 00h,0CFh, 01h,0CFh


;	BANK RAM DISK DRIVER


BDRDC:
	LD	(BANKSP+1),SP
	LD	A,(BANKSP+2)
	ADD	A,A
	JR	C,BDRDC1
	LD	SP,EXTSP
BDRDC1:
	PUSH	DE
	EXX
	 PUSH	 BC
	 PUSH	 DE
	 CALL	 BADR
	CALL	BTFR
	EXX
BDWTCE:
	 POP	 DE
	 POP	 BC
	 EXX
	POP	DE
	INC	DE
	EI
BANKSP:	LD	SP,0
	XOR	A
	RET

BDWTC:
	LD	(BANKSP+1),SP
	LD	A,(BANKSP+2)
	ADD	A,A
	JR	C,BDWTC1
	LD	SP,EXTSP
BDWTC1:
	PUSH	DE
	EXX
	 PUSH	 BC
	 PUSH	 DE
	 CALL	 BADR
	EXX
	 LD	D,E
	 LD	E,A
	 EXX
	EX	DE,HL
	CALL	BTFR
	EX	DE,HL
	EXX
	 OUT	 (C),D	 ;MAIN
	 JR	 BDWTCE

BADR:
	 EXX
	LD	A,E
	ADD	A,A
	RL	D
	ADD	A,A
	RL	D
	PUSH	AF
	ADD	A,A
	LD	A,D
	ADC	A,A
	AND	0Fh
	EXX
	 LD	 BC,0B00h
	 LD	 D,A	  ;BANK
	 LD	 E,10h	  ;MAIN
	 EXX
	POP	DE
	LD	B,0
	LD	E,B
	RES	7,D
	RET

BTFR:
	PUSH	DE
	DI

BTFR1:
	EXX
	 OUT	 (C),D	 ;BANK(MAIN)
	 EXX
	EX	(SP),HL
	LD	A,(HL)
	INC	HL
	LD	C,(HL)
	INC	HL
	LD	D,(HL)
	INC	HL
	LD	E,(HL)
	INC	HL
	EX	(SP),HL
	EXX
	 OUT	 (C),E	 ;MAIN(BANK)
	 EXX
	LD	(HL),A
	INC	HL
	LD	(HL),C
	INC	HL
	LD	(HL),D
	INC	HL
	LD	(HL),E
	INC	HL
	DJNZ	BTFR1
	POP	DE
	RET


;	GRAPHIC RAM DISK DRIVER


GDRDC:
	CALL	GADR
	PUSH	DE
	LD	DE,400h
GDRDC1:
	INI
	INC	B
	INC	BC
	DEC	E
	JR	NZ,GDRDC1
	DEC	D
	JR	NZ,GDRDC1
GDWTC2:
	POP	DE
	AND	0EFh		;BANK0
	JR	S1FD0

GDWTC:
	CALL	GADR
	PUSH	DE
	LD	DE,400h
GDWTC1:
	INC	B
	OUTI
	INC	BC
	DEC	E
	JR	NZ,GDWTC1
	DEC	D
	JR	NZ,GDWTC1
	JR	GDWTC2

GADR:
	LD	C,0
	LD	A,E
	ADD	A,A
	ADD	A,A
	ADD	A,40h
	LD	B,A
	INC	DE
	LD	A,(WK1FD0)
	OR	10h		;BANK1
S1FD0:
	PUSH	BC
	LD	(WK1FD0),A
	LD	BC,1FD0h
	OUT	(C),A
	POP	BC
	RET

@R	EQU	WTTRK-@WTTRK

PE:

;
;
;
;	$INCLUDE	LDCALL
;
;
;	LSX-Dodgers SYSTEM CALL
;
	ORG	0EC00h

STABLE:
;0
	DW	 0000h,_SYS01,_SYS02,_SYS03
	DW	_SYS04,_SYS05,_SYS06,_SYS07
	DW	_SYS08,_SYS09,_SYS0A,_SYS0B
	DW	_SYS0C,_SYS0D,_SYS0E,_SYS0F
;1
	DW	_SYS10,_SYS11,_SYS12,_SYS13
	DW	_SYS14,_SYS15,_SYS16,_SYS17
	DW	_SYS18,_SYS19,_SYS1A,_SYS1B
	DW	_SYS1C,_SYS1D,_SYS1E,_SYS1F
;2
	DW	_SYS20,_SYS21,_SYS22,_SYS23
	DW	_SYS24,_ERROR,_SYS26,_SYS27
	DW	_SYS28,_SYS29,_SYS2A,_SYS2B
	DW	_SYS2C,_SYS2D,_SYS2E,_SYS2F
;3
	DW	_SYS30
;
;
;
;	$INCLUDE	LDWORK
;

;	LSX-Dodgers WORK

DDS	EQU	4
DDTB:
	DB	'CON '
	DW	OPENDD
	DB	'AUX '
	DW	OPENDD
	DB	'PRN '
	DW	OPENDD
	DB	'NUL '
	DW	OPENDD

	DS	2
_FATBF:	DW	FATBF
_DTBUF:	DW	DTBUF

_CYL0:	DB	0FFh	;Cylinder
_CYL1:	DB	0FFh	;Cylinder
_CYL2:	DB	0FFh	;Cylinder
_CYL3:	DB	0FFh	;Cylinder
_DRIVE:	DB	0	;unit number
_SEEKSP:DB	0	;Seek speed
_ISEEK:	DB	0FFh	;
_DVSW:	DB	0
_DRV:	DB	0
_DSK:	DB	0FFh
_DTA:	DW	0080h
_CTC:	DW	0
_TXADR:	DW	0
_KEYPS	DW	0
_KEYD	DW	0FF00h
_KEYSP:	DW	10C2h
_COLORF:DB	7
_LINE:	DB	LINE

_FCB:	DW	0
_FBPS:	DW	0	;SEARCH FILES
_FBAD:	DW	0	;    //
_FBCNT:	DB	0	;    //
_FILEN:	DB	0
_DIRF:	DB	0
_MAXCYL:DB	0
_WTFATF:DB	0
_FATDRV:DB	0FFh
_WTDBF:	DB	0
_DBDRV:	DB	0FFh
_DCLPS:	DW	0

	DS	8

CRTCD:	DB	6Fh,50h,59h,38h,1Fh,02h,19h,1Ch
	DB	00h,07h
	DW	0F880H		;-80*LINE
	DW	0FFB0H		;-80
	DB	0Ch
WK1FD0:	DB	0A0h

CTC0:	DW	INTCTCE
CTC1:	DW	INTCTCE
CTC2:	DW	INTCTC2
CTC3:	DW	INTCTCE
INTVEC:	DW	INT

;	JUMP

_INKEY:	JP	INKEY
_PRINT:	JP	PRINT
_SCRN:	JP	SCRN
_POS:	JP	POS
_LOC:	JP	LOC
_CHGDRV:JP	CHGDRV
_GETDPB:JP	GETDPB
_FFLUSH:JP	FFLUSH
_RDFATX:JP	RDFATX
_RDFAT:	JP	RDFAT
_WTTRK:	JP	WTTRK
_FDRD:	JP	FDRD
_FDWT:	JP	FDWT
_DRD:	JP	_FDRD	;(Self-rewriting)
_DWT:	JP	_FDWT	;(Self-rewriting)
_GNCL:	JP	GNCL	;(Self-rewriting)
_SNCL:	JP	SNCL	;(Self-rewriting)
_COMANL:JP	COMANL

WE:

;
;
;
;	$CHAIN		LDDPB
;
;
;	LSX-Dodgers DPB
;
DEVICE:

;	A:

_FATLN_:	DB	2	;                           +000H
_FATID_:	DB	0FDh	;                           +001H
_DRDC_:		DW	_FDRD	;                           +002H,+003H
_DWTC_:		DW	_FDWT	;                           +004H,+005H
_ADDCL_:	DW	2908h	;H($29=512,0=1024)L=CLADD / +006H,+007H
_MAXCL_:	DW	356	;                           +008H,+009H
_FDMODE_:	DB	0FFh	;$FF=2D	$FE=2HD           / +00AH
_MAXDIR_:	DB	12	;                           +00BH
_MAXCYL_:	DB	40	;                           +00CH
_MAXSEC_:	DB	9	;Number of sectors        / +00DH
_FATPS_:	DB	1
_FATS_:		DB	2
_DIRPS_:	DB	5
_MINSEC_:	DB	1	;Minimum sector
_DEVNO_:	DB	87h	;Device Number
_UNITNO_:	DB	0
		DW	0
_GNCL_:		DW	GNCL
_SNCL_:		DW	SNCL
_SDIR_:		DW	0	;                           +01AH,+01BH
_NAME_:		DB	'FDD0'

;	B:

	DB	2
	DB	0FDh
	DW	_FDRD
	DW	_FDWT
	DW	2908h	;H($29=512,0=1024)L=CLADD
	DW	356
	DB	0FFh	;$FF=2D	$FE=2HD
	DB	12
	DB	40
	DB	9
	DB	1
	DB	2
	DB	5
	DB	1
	DB	87h	;Device Number
	DB	1
	DW	0
	DW	GNCL
	DW	SNCL
	DW	0
	DB	'FDD1'

;	C:

	DB	2
	DB	0FDh
	DW	_FDRD
	DW	_FDWT
	DW	2908h	;H($29=512,0=1024)L=CLADD
	DW	356
	DB	0FFh	;$FF=2D	$FE=2HD
	DB	12
	DB	40
	DB	9
	DB	1
	DB	2
	DB	5
	DB	1
	DB	87h	;Device Number
	DB	2
	DW	0
	DW	GNCL
	DW	SNCL
	DW	0
	DB	'FDD2'

;	D:

	DB	2
	DB	0FDh
	DW	_FDRD
	DW	_FDWT
	DW	2908h	;H($29=512,0=1024)L=CLADD
	DW	356
	DB	0FFh	;$FF=2D	$FE=2HD
	DB	12
	DB	40
	DB	9
	DB	1
	DB	2
	DB	5
	DB	1
	DB	87h	;Device Number
	DB	3
	DW	0
	DW	GNCL
	DW	SNCL
	DW	0
	DB	'FDD3'

;	E:

EMMFL:	DB	0
	DB	0FEh
EMMRD:	DW	EDRDC
EMMWR:	DW	EDWTC
	DW	9
EMMCL:	DW	0
	DB	0
	DB	11
EMMBL:	DB	0
	DB	1
	DB	1
	DB	1
	DB	5
	DB	1
	DB	6	;Device Number
EMMDV:	DB	0
	DW	0
	DW	GNCL
	DW	SNCL
	DW	0
	DB	'EMM0'

;	F:

BANKFL:	DB	0
	DB	0F9h
	DW	BDRDC
	DW	BDWTC
	DW	3
BANKCL:	DW	0
	DB	0
	DB	5
	DB	0
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	0Bh	;Device Number
	DB	0
	DW	0
	DW	GNCL
	DW	SNCL
	DW	0
	DB	'BRAM'

;	G:

	DB	1
	DB	0F9h
	DW	GDRDC
	DW	GDWTC
	DW	0
	DW	48
	DB	0
	DB	2
	DB	0
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	5	;Device Number
	DB	1
	DW	0
	DW	GNCL
	DW	SNCL
	DW	0
	DB	'GRAM'

;	H:(Reserved?) (0EDE0H-0EDEFH)

	DS	32

	END

