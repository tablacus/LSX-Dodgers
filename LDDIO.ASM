
;	LSX-Dodgers DIO

DRDX:
	CALL	DRDY
	RET	Z
	CALL	DRDX1		;データバッファの情報を保存
	RET	C
	PUSH	HL
	PUSH	BC
	PUSH	DE
	LD	HL,(_DTBUF)
	LD	A,(_DBS24)
	LD	C,A
	CALL	DRD24
	CALL	C,DRDNE
POP_DE_BC_HL_RET:
	POP	DE
	POP	BC
	POP	HL
	RET

;	CDE:セクタ番号
DRDN:
	XOR	A
DRDN1:	NOP			;自己書き換え NOP / SCF
	JR	NC,DRDX
DRDNX:
	CALL	DRDY
	RET	Z
DRDX1:
	CALL	DWTX
				;データバッファの読み込んだドライブ・セクタ情報を保存
	LD	(_DBSEC),DE
	LD	A,C
	LD	(_DBS24),A

	LD	A,(_DRV)
	LD	(_DBDRV),A
	CALL	_CHGDRV
	RET	NC
DRDNE:
	SBC	A,A		;CF=1ならばA=0FFH
	LD	(_DBDRV),A
	RET

;	CDE:セクタ番号
DRDY:
	LD	A,(_DBS24)
	CP	C
	RET	NZ

	PUSH	HL
	LD	A,(_DRV)
	LD	HL,_DBDRV
	XOR	(HL)
	JR	NZ,POP_HL_RET

	LD	HL,(_DBSEC)
	SBC	HL,DE		;上でXORを使っているのでCF=0のはず
POP_HL_RET:
	POP	HL
	RET

DWTX:
	LD	A,(_WTDBF)
	OR	A
	RET	Z
	XOR	A
	LD	(_WTDBF),A

	PUSH	HL
	PUSH	BC
	PUSH	DE
	LD	A,(_DBDRV)
	CALL	_CHGDRV
	LD	C,0
_DBS24	EQU	$-1
	LD	DE,(_DBSEC)
	LD	HL,(_DTBUF)
	CALL	NC,DWT24
POP_DE_BC_HL_RET2:
	JR	POP_DE_BC_HL_RET

RDFATX:
	PUSH	HL
	LD	A,(_DRV)
	LD	HL,_FATDRV
	XOR	(HL)
	JR	Z,POP_HL_RET

	PUSH	BC
	PUSH	DE
	PUSH	IX
	CALL	WTFATX
	JR	C,POP_IX_DE_BC_HL_RET

	XOR	A
	LD	(_FATIX),A
	LD	A,(_DRV)
	LD	(_FATDRV),A
	CALL	_RDFAT
RDFATE2:
	JR	NC,POP_IX_DE_BC_HL_RET
	SBC	A,A		;A=0xFF
	LD	(_FATDRV),A
POP_IX_DE_BC_HL_RET:
	POP	IX
	JR	POP_DE_BC_HL_RET2

WTFATX:
	LD	A,(_WTFATF)
	OR	A
	RET	Z
	PUSH	HL
	LD	A,(_FATDRV)
	LD	HL,_DBDRV
	XOR	(HL)
	CALL	Z,DWTX
	JR	C,POP_HL_RET
	PUSH	BC
	PUSH	DE
	PUSH	IX
	CALL	WTFAT
	XOR	A
	LD	(_WTFATF),A
	JR	POP_IX_DE_BC_HL_RET

N16CL1:
	LD	A,D
	OR	E
	SCF
	RET	Z

	LD	A,D
	JR	NCL1X
NCL1:
	LD	A,D
	OR	E
	SCF
	RET	Z

	LD	A,D
	SRL	A	;/2
NCL1X:
	SRL	A	;/2

	PUSH	HL
	LD	(NCLPAT_FATIX),A	;_FATIX
	LD	HL,(_FATDRV)	;L=_FATDRV H=_FATIX
	CP	H
	LD	A,(_DRV)	;LDではフラグは変化しない
	LD	(NCLPAT_FATDRV),A	;_FATDRV
	JR	NZ,NCL2		;FATIXが違う
	CP	L
	JR	NZ,NCL2		;ドライブが違う
	POP	HL
	RET
NCL2:
	PUSH	BC
	PUSH	DE
	PUSH	IX
	CALL	WTFATX
	JR	C,POP_IX_DE_BC_HL_RET
	LD	BC,0		;自己書き換え C=_FATDRV B=_FATIX
NCLPAT_FATIX	EQU	$-1
NCLPAT_FATDRV	EQU	$-2
	LD	(_FATDRV),BC
	CALL	RDFATS
	JR	RDFATE2

NCL3:
	RES	3,D
	RES	2,D
	LD	L,E
	LD	H,D
	SRL	H	;
	RR	L	;HLA=HLA/2
	RRA		;
	PUSH	AF
	LD	A,(_FATIX)
	RRCA
	JR	NC,NCL3X1
	LD	A,(SECSZ+2)
	CP	4		;1セクタ1024バイトの場合は奇数インデックスの場合に先頭を512バイトずらす
	JR	NZ,NCL3X1
	LD	BC,512
	ADD	HL,BC
NCL3X1:
	POP	AF
	LD	BC,(_FATBF)
	ADD	HL,DE
	ADD	HL,BC
	RLA
	RET

GNCL:
	CALL	NCL1		;GET NEXT CLUSTER
	RET	C
	PUSH	BC
	PUSH	HL
	CALL	NCL3
	JR	C,GNC1
	LD	E,(HL)
	INC	HL
	LD	A,(HL)
	AND	00FH
	LD	D,A
	POP	HL
	POP	BC
	RET
GNC1:
	LD	A,(HL)
	INC	HL
	LD	D,(HL)
	LD	B,4
GNC1L:
	SRL	D	;DA=DA/2
	RRA		;
	DJNZ	GNC1L

	LD	E,A
	POP	HL
	POP	BC
	AND	A
	RET

SNCL:
	CALL	NCL1
	RET	C
;				SET NEXT CLUSTER
	PUSH	HL
	PUSH	BC
	PUSH	DE
	PUSH	HL
	CALL	NCL3
	POP	DE
;CF=ODD
	LD	A,(HL)
	LD	(HL),E
	JR	C,SNC1
;EVEN
;M[0] = E
;M[1] = (M[1] & 0xF0) | (D & 0x0F)
	INC	HL
	RRD		;M={A[3:0],E[3:0]}
	LD	A,D
	JR	SNC11
SNC1:
;ODD
;HL[0] = (HL[0]&0x0F) | (E<<4)
;HL[1] = DE>>4
	RLD		;M={D[3:0],E[7:4]}
	INC	HL
	LD	(HL),D	;M={D[3:0],E[7:4]}
SNC11:
	RLD		;M={M[7:4],D[3:0]}
	OR	A
	POP	DE
	POP	BC
	POP	HL
FAT_CHANGED:
	LD	A,1
	LD	(_WTFATF),A
	RET

N16CL3:
	PUSH	BC
	LD	L,E
	LD	A,D
	AND	1
	LD	H,A
	ADD	HL,HL
	LD	BC,(_FATBF)
	ADD	HL,BC
	POP	BC
	RET

GNCL16:
	CALL	N16CL1		;GET NEXT CLUSTER for FAT16
	RET	C
	PUSH	HL
	CALL	N16CL3
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	POP	HL
	RET

SNCL16:
	CALL	N16CL1		;GET NEXT CLUSTER for FAT16
	RET	C
	PUSH	DE
	PUSH	HL
	CALL	N16CL3
	POP	DE		;HL
	LD	(HL),E
	INC	HL
	LD	(HL),D
	LD	L,E
	LD	H,D
	POP	DE
	JR	FAT_CHANGED

;------------------------
;次のセクタを探す際に_SECPSの値をチェック
;in
;	DE : セクタ番号
;out
;	DE : 次のセクタ番号
;note
;
;------------------------
NEXTX:
	LD	A,0	;自己書き換え
_SECPS	EQU	$-1
	INC	A
	AND	0	;自己書き換え　1クラスタの論理セクタ数-1
_NCPAT	EQU	$-1
	LD	(_SECPS),A
	RET

GNCLX:
	CALL	NEXTX
	RET	NZ	;1クラスタのセクタ未満の場合は戻る
	JP	_GNCL	;次のクラスタを探す

RDFAT:
	LD	A,080H
	LD	(CHECK),A
RDFAT1:
	LD	A,(_DRV)
	CALL	CHGDRVR
	RET	C
	LD	A,(IX+DPB_DEVICE)
	BIT	5,A
	JR	Z,RDFAT0X
	LD	HL,CHECK
	AND	(HL)
	LD	(HL),A
	LD	DE,0		;BPB
	LD	HL,(_FATBF)
	CALL	DRD16
	JR	NC,GETBPB
	LD	HL,CHECK
	RLC	(HL)
	CCF
	RET	C
	RR	(IX+DPB_FDMODE)
	CCF			;フロッピーディスクのFDモードを切り替える
	RL	(IX+DPB_FDMODE)
	LD	A,0FFH
	LD	(_DSK),A
	LD	A,(_DRIVE)
	AND	3
	OR	080H
	LD	L,A
	LD	H,_CYL0/256
	LD	A,0FFH
	LD	(HL),A
	JR	RDFAT1
GETBPB:
	PUSH	IY
	LD	IY,(_FATBF)	;BPB
	CALL	_BPB2DPB
	POP	IY
	LD	A,(IX+DPB_DEVICE)
	JR	NC,GETBPBOK
	AND	00FH
	CP	7
	SCF
	RET	NZ
	BIT	0,(IX+DPB_FDMODE)
	LD	HL,M2D
	JR	NZ,SETFDMODE
	CALL	CHECK1024
	RET	C
	LD	L,M2HD-STABLE
SETFDMODE:
	PUSH	IX
	POP	DE
	LDI
	LDI
	INC	DE
	INC	DE
	INC	DE
	INC	DE
	LD	BC,12
	LDIR
GETBPBOK:
	CALL	CHGDRV2
RDFAT0X:
	CALL	RDFATS
	RET	C
	XOR	(IX+DPB_FATID)
	RET	Z
	LD	A,(IX+DPB_DEVICE)
	BIT	3,A
	JR	Z,RDFAT0X1
	BIT	5,A
	RET	NZ		;BPBを取得している場合はFATIDをチェックしない
RDFAT0X1:
	SCF
	RET

POP_HL_SCF_RET:
	POP	HL
	SCF
	RET

BPB2DPB:
	LD	A,(IY+11)	;BPB_BytsPerSec
	OR	A
	SCF
	RET	NZ
BPBOK:
	LD	A,(IY+13)	;BPB_SecPerClus
	LD	(IX+DPB_SECPCL),A

	LD	A,(IY+22)	;BPB_FATSz16
	LD	(IX+DPB_FATLN),A
	LD	A,(IY+23)	;BPB_FATSz16
	LD	(IX+DPB_FATLN+1),A

	LD	L,(IY+14)	;BPB_RsvdSecCnt
	LD	H,(IY+15)
	LD	(IX+DPB_FATPS),L
	LD	E,(IY+22)	;BPB_FATSz16
	LD	D,(IY+23)
	LD	B,(IY+16)	;BPB_NumFATs
BPBDP1:				;BPB_FATSz16 * BPB_NumFATs
	ADD	HL,DE
	DJNZ	BPBDP1
BPBDP2:
	LD	(IX+DPB_DIRPS),L
	LD	(IX+DPB_DIRPS+1),H
	PUSH	HL

	LD	L,(IY+17)	;BPB_RootEntCnt
	LD	H,(IY+18)
	LD	A,(IY+12)	;BPB_BytsPerSec
	OR	A
	JR	Z,POP_HL_SCF_RET
	LD	B,6
BPBBPS1:
	DEC	B
	RRCA
	JR	NC,BPBBPS1
BPBDE1:
	ADD	HL,HL
	DJNZ	BPBDE1

	LD	A,H
	LD	(IX+DPB_DIRSCNT),A	;

	POP	DE		;DPB_DIRPS
	LD	L,H
	LD	H,0
	ADD	HL,DE		;MAXDIR
	PUSH	HL
	LD	C,(IY+13)	;BPB_SecPerClus
	SLA	C		;*2
	XOR	A
	LD	B,A
	SBC	HL,BC
	LD	(IX+DPB_ADDCL),L
	LD	(IX+DPB_ADDCL+1),H

	POP	DE		;DE=DPB_MAXDIR
	LD	L,(IY+19)	;BPB_TotSec16
	LD	H,(IY+20)

	LD	A,(IX+DPB_DEVICE)
	AND	00FH
	CP	7		;フロッピー
	JR	NZ,NOT_FD
	PUSH	HL
	LD	C,(IY+24)	;BPB_SecPerTr
	LD	(IX+DPB_MAXSEC),C
	XOR	A
	SLA	C		;両面なのでセクタ数を２倍
	LD	B,16
DIVSEC:				;MAXCYL = BPB_TotSec16 / (BPB_SecPerTr * 2)
	ADD	HL,HL
	RLA
	CP	C
   	JR	C,DIVSEC1
   	SUB	C
	INC	L
DIVSEC1:
 	DJNZ	DIVSEC
	LD	(IX+DPB_MAXCYL),L
	POP	HL	;ここまでフロッピー専用
NOT_FD:
	LD	A,H
	OR	L
	LD	A,0		;LDでフラグは変化しない。BPB_TotSec16を AHL で扱う為、Aに0を入れる
	JR	NZ,BPB16BIT	;BPB_TotSec16が「0」の場合はBPB_TotSec32で計算
	CPL			;A=0FFH
	ADD	A,(IY+35)	;念のために総セクタ数が24ビットを超える場合はエラーを返す
	RET	C
	LD	L,(IY+32)	;BPB_TotSec32 は AHL の24ビットで扱う
	LD	H,(IY+33)	;1クラスタの論理セクタ数(DPB_SECPCL)が最大128なので、
	LD	A,(IY+34)	;FAT12,FAT16では総セクタ数が24ビットを超えることは無い
BPB16BIT:
	SBC	HL,DE		;DE=DPB_MAXDIR
	SBC	A,0
	LD	B,(IY+13)	;BPB_SecPerClus
BPBTC1:				;総クラスタ数(AHL) = 総セクタ数(AHL) / セクタサイズ(B)
	RR	B		;->CY
	JR	C,BPBTC2
	SRL	A
	RR	H		;AHL=AHL/2
	RR	L
	JR	BPBTC1
BPBTC2:
	ADD	A,0FFH
	RET	C		;念のため(クラスタ数が16ビットを超える場合)
	INC	HL
	INC	HL
	LD	(IX+DPB_MAXCL),L
	LD	(IX+DPB_MAXCL+1),H

	LD	A,(IY+21)	;BPB_Media
	LD	(IX+DPB_FATID),A
CHECK1024:
	LD	A,(IY+16)	;BPB_NumFATs
	ADD	A,0-2		;>2:CF=1
	LD	A,(IY+12)	;BPB_BytsPerSec
	LD	L,A
	JR	NC,BPBFAT1
	OR	080H
BPBFAT1:			;ここではCF=0
	LD	(IX+DPB_BPS),A
	LD	A,(_MAX_SEC_SZ_H)
	CP	L
	RET	Z		;1セクタ1024バイト
	DEC	L		;以下のセクタサイズに合致しない場合はCF=1でエラーにする
	RET	Z		;1セクタ256バイト
	DEC	L
	RET	Z		;1セクタ512バイト
	SCF
	RET

RDFATS:
	CALL	FATSETUP
	RET	C
	CALL	DRD24B
	LD	HL,(_FATBF)
	LD	A,(HL)
	RET

DRD16:
	LD	C,0
DRD24:
	LD	B,1
DRD24B:
	PUSH	IX
	LD	IX,(_DPB)
	CALL	FDRD		;自己書き換え（ディスク読み込み）
DRDPAT	EQU	$-2
POP_IX_RET:
	POP	IX
	RET

DWT16:
	LD	C,0
DWT24:
	LD	B,1
DWT24B:
	PUSH	IX
	LD	IX,(_DPB)
	CALL	FDWT		;自己書き換え（ディスク書き込み）
DWTPAT	EQU	$-2
	JR	POP_IX_RET

WTFAT:
	CALL	FATSETUP
	JR	NC,DWT24B
	RET
;	CALL	NC,DWT24B	;予備FATの保存ルーチン
;	RET	C
;	BIT	7,(IX+DPB_BPS)
;	RET	Z		;予備FATが無い
;	CALL	FATS2
;	PUSH	HL		;予備FAT
;	LD	L,(IX+DPB_FATLN)
;	LD	H,(IX+DPB_FATLN+1)
;	ADD	HL,DE
;	EX	DE,HL
;	POP	HL
;	JR	DWT24B
;------------------------
;FATのセットアップ
;out
;	B  : FATセクタ数
;	DE : FAT先頭セクタ番号
;	HL : FATバッファポインタ
;	CF : 1=ドライブ切り替えエラー
;note
;	FATサイズがFATバッファを超える場合は
;	対象クラスタ領域==(_FATIX)によって
;	FAT12:対象クラスタ1024毎に1.5KBを切り替える
;	FAT16:対象クラスタ512毎に1KBを切り替える
;------------------------
FATSETUP:
	LD	A,(_FATDRV)
	CALL	CHGDRVR		;ドライブ切り替え
	RET	C
FATS2:
	LD	A,(IX+DPB_BPS)	;512=2 1024=4
	RRCA
	CALL	FATSETUP12	;自己書き換え
FATSX	EQU	$-2
	LD	HL,0
	LD	C,D
	LD	D,H
	LD	A,(_FATIX)	;範囲FAT12:0-3/FAT16:0-127(0-07FH):65535*2/1024
	LD	B,A
	INC	B
	LD	A,(IX+DPB_FATLN)
FAT_SKP:
	DEC	B
	JR	Z,FAT1
	ADD	HL,DE
	SUB	E
	JR	NC,FAT_SKP
	BIT	0,(IX+DPB_FATLN+1)	;FATサイズが0100H(256)の場合
	RET	Z
FAT1:
	EX	DE,HL
	OR	A		;0の場合は0100Hとして扱う
	JR	Z,FAT3
	CP	C		;C=FATバッファに読み込めるセクタ数
	JR	C,FAT2
FAT3:
	LD	A,C
FAT2:
	LD	B,A

	LD	HL,(_FATPS)	;fat sector pos
	ADD	HL,DE
	EX	DE,HL
	LD	HL,(_FATBF)
	XOR	A		;CF=0
	LD	C,A
	RET
;
;	FATバッファに読み込める最大のセクタ数と_FATIXで進めるセクタ数
;	FATSETUP* (FAT12/FAT16)
;out
;	D : FATバッファに読み込める最大のセクタ数
;	E : _FATIXで進めるセクタ数
FATSETUP12:
	LD	DE,0606H	;256
	RET	C
	LD	DE,0303H	;512
	RRCA
	RET	C
	LD	DE,0201H	;1024
	RET

FATSETUP16:
	LD	DE,0404H	;256
	RET	C
	LD	DE,0202H	;512
	RRCA
	RET	C
	LD	DE,0101H	;1024
	RET

CHGDRV:
	PUSH	HL
	LD	HL,_DSK
	CP	(HL)
	JR	Z,CHGDRVE
CHGDRV1:
	PUSH	IX
	CALL	CHGDRV0
	LD	A,(_DSK)
	POP	IX
CHGDRVE:
	POP	HL
	RET

CHGDRV0:
	LD	L,A
	CALL	_GETDPB
	RET	C
	LD	(_DPB),IX
	LD	A,L
	LD	(_DSK),A
CHGDRV2:
	PUSH	BC
	PUSH	DE
	LD	(SPPAT2),SP
	DI
	LD	SP,IX

	POP	HL		;00:DPB_FATLN
	POP	HL		;02:DPB_DRD
	LD	(DRDPAT),HL

	POP	HL
	LD	(DWTPAT),HL	;04:DPB_DWT

	POP	HL		;L=06:DPB_FATID H=07:DPB_SECPCL
	LD	A,H
	LD	(SPCPAT),A	;1クラスタの論理セクタ数
	DEC	A
	LD	(_NCPAT),A

	POP	HL		;08:DPB_MAXCL
	LD	A,L
	LD	(CLPAT2),A
	LD	A,H
	LD	(CLPAT1),A
	DEC	HL
	LD	(MAXCLP),HL

	POP	HL		;L=0A:DPB_FDMODE H=0B:DPB_DIRSCNT
	LD	C,H

	POP	HL		;L=0C:DPB_MAXCYL H=0D:DPB_MAXSEC

	POP	HL		;L=0E:DPB_FATPS H=0F:DPB_BPS
	LD	A,H		;DPB_BPS
	AND	7
	LD	(SECSZ+2),A	;1セクタのサイズの上位1バイト 0x400 - 0x200 - 0x100
				;1セクタ512 2D/2DD/2HC/2HQ(2HD1.44MB)/EMM/BRAM/EMEM等
				;1セクタ1024 2HD/2HDE98等
				;1セクタ256 GRAM/RAMF/CMOS等
				;1024	512	256
				;4	2	1
	ADD	A,A		;8	4	2
	ADD	A,A		;010H	8	4
	ADD	A,A		;020H	010H	8
	LD	(SDECPAT),A	;1セクタ辺りのディレクトリエントリ数

	LD	H,0
	LD	(_FATPS),HL

	POP	HL		;10:DPB_DIRPS
	LD	(_DIRPS),HL

	POP	HL		;L=12:DPB_DEVICE H=13:DPB_UNITNO
	LD	A,H
	LD	(_DRIVE),A

	POP	HL		;14:DPB_ADDCL
	LD	(CLSPAT),HL

	LD	SP,0		;元のSPを復元
SPPAT2	EQU	$-2
	EI
	LD	HL,(_DIRPS)
	LD	B,0
	ADD	HL,BC		;C=DPB_DIRSCNT
	LD	(MD_PAT),HL

	LD	HL,(MAXCLP)
	LD	DE,0-4086	;クラスタ数が4086未満:FAT12 4086以上:FAT16
	ADD	HL,DE
	JR	C,SETFAT16
	LD	HL,GNCL		;FAT12
	LD	DE,SNCL
	LD	BC,FATSETUP12
	RES	5,(IX+DPB_BPS)	;DPB_BPS(FAT12)
	JR	EXTRA1
SETFAT16:
	LD	HL,GNCL16	;FAT16
	LD	DE,SNCL16
	LD	BC,FATSETUP16
	SET	5,(IX+DPB_BPS)	;DPB_BPS(FAT16)
EXTRA1:
	LD	(GNCPAT),HL
	LD	(SNCPAT),DE
	LD	(FATSX),BC
	POP	DE
	POP	BC
	XOR	A
	RET

GETDPBD:
	EX	(SP),IX
	PUSH	IX
	LD	A,(_DRV)
	JR	GETDPB1

CHGDRVR:
	CALL	_CHGDRV
	RET	C
	LD	A,(_DSK)
GETDPB1:
	JP	_GETDPB

GETDPB:
	CP	8
	CCF
	RET	C
	RRCA
	RRCA
	RRCA
	DB	0DDH		;Z80未定義命令
	LD	L,A		;LD	IXL,A
	DB	0DDH		;Z80未定義命令
	LD	H,_DEVICE/256	;LD	IXH,_DEVICE/256
	LD	A,(IX+DPB_FATLN)
	AND	A		;CF=0の為
	BIT	5,(IX+DPB_BPS)
	RET	NZ		;FAT16
	BIT	5,(IX+DPB_DEVICE)
	RET	NZ		;BPB
	CP	001H		;A=0 THEN CF=1
	RET

_SYS5F:
	XOR	A
FFLUSH:
	PUSH	AF
	CALL	WTFATX
	XOR	A
	LD	(_FATIX),A
	CPL			;0FFH
	LD	(_FATDRV),A
	DB	03EH		;次のPUSH AFをスキップ
FFLUSHBUF:
	PUSH	AF
	CALL	DWTX
	LD	A,0FFH
	LD	(SFILE),A
	LD	(_DBDRV),A
	POP	AF
	RET

