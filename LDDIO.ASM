
;	LSX-Dodgers DIO

DRDX:
	CALL	DRDY
	RET	Z
	CALL	DRDX1		;データバッファの情報を保存
	RET	C
	PUSH	HL
	PUSH	BC
	PUSH	DE
	LD	HL,(_DTBUF)
	CALL	DRD16
	CALL	C,DRDNE
POP_DE_BC_HL_RET:
	POP	DE
	POP	BC
	POP	HL
	RET

DRDN:
	XOR	A
DRDN1:	NOP			;自己書き換え NOP / SCF
	JR	NC,DRDX
DRDNX:
	CALL	DRDY
	RET	Z
DRDX1:				;データバッファの情報を保存
	CALL	DWTX
	LD	(_DBSEC),DE
	LD	A,(_DRV)
	LD	(_DBDRV),A
	CALL	_CHGDRV
	RET	NC
DRDNE:
	SBC	A,A		;CF=1ならばA=0FFH
	LD	(_DBDRV),A
	RET

DRDY:
	PUSH	HL
	LD	A,(_DRV)
	LD	HL,_DBDRV
	XOR	(HL)
	JR	NZ,POP_HL_RET

	LD	HL,(_DBSEC)
	SBC	HL,DE		;CF=0
POP_HL_RET:
	POP	HL
	RET

DWTX:
	LD	A,(_WTDBF)
	OR	A
	RET	Z
	XOR	A
	LD	(_WTDBF),A

	PUSH	HL
	PUSH	BC
	PUSH	DE
	LD	A,(_DBDRV)
	CALL	_CHGDRV
	LD	DE,(_DBSEC)
	LD	HL,(_DTBUF)
	CALL	NC,DWT16
	JR	POP_DE_BC_HL_RET

RDFATX:
	PUSH	HL
	LD	A,(_DRV)
	LD	HL,_FATDRV
	XOR	(HL)
	JR	Z,POP_HL_RET

	PUSH	BC
	PUSH	DE
	PUSH	IX
	CALL	WTFATX
	JR	C,POP_IX_DE_BC_HL_RET

	XOR	A
	LD	(_FATIX),A
	LD	A,(_DRV)
	LD	(_FATDRV),A
	CALL	_RDFAT
RDFATE2:
	JR	NC,POP_IX_DE_BC_HL_RET
	SBC	A,A		;A=0xFF
	LD	(_FATDRV),A
POP_IX_DE_BC_HL_RET:
	POP	IX
	JR	POP_DE_BC_HL_RET

WTFATX:
	LD	A,(_WTFATF)
	OR	A
	RET	Z
	PUSH	HL
	LD	A,(_FATDRV)
	LD	HL,_DBDRV
	XOR	(HL)
	CALL	Z,DWTX
	JR	C,POP_HL_RET
	PUSH	BC
	PUSH	DE
	PUSH	IX
	CALL	WTFAT
	XOR	A
	LD	(_WTFATF),A
	JR	POP_IX_DE_BC_HL_RET

NCL1:
	LD	A,D
	OR	E
	SCF
	RET	Z

	LD	A,D
	AND	8		;DE(targetCluster >= 0x800)
N16CL1X:
	PUSH	HL
	LD	(NCLPAT+2),A	;_FATIX
	LD	HL,(_FATDRV)	;L=_FATDRV H=_FATIX
	CP	H
	LD	A,(_DRV)	;この間でフラグは変化しない
	LD	(NCLPAT+1),A	;_FATDRV
	JR	NZ,NCL2		;FATIXが違う
	CP	L
	JR	NZ,NCL2		;ドライブが違う
	POP	HL
	RET
NCL2:
	PUSH	BC
	PUSH	DE
	PUSH	IX
	CALL	WTFATX
	JR	C,POP_IX_DE_BC_HL_RET
NCLPAT:	LD	BC,0		;自己書き換え C=_FATDRV B=_FATIX
	LD	(_FATDRV),BC
	CALL	RDFATS
	JR	RDFATE2

NCL3:
	RES	3,D
	LD	L,E
	LD	H,D
	SRL	H	;
	RR	L	;HLA=HLA/2
	RRA		;
	LD	BC,(_FATBF)
	ADD	HL,DE
	ADD	HL,BC
	RLA
	RET

N16CL1:
	LD	A,D
	OR	E
	SCF
	RET	Z

	LD	A,D
	SRL	A	;/2
	SRL	A	;/2
	JR	N16CL1X

GNCL:
	CALL	NCL1		;GET NEXT CLUSTER
	RET	C
	PUSH	BC
	PUSH	HL
	CALL	NCL3
	JR	C,GNC1
	LD	E,(HL)
	INC	HL
	LD	A,(HL)
	AND	00FH
	LD	D,A
	POP	HL
	POP	BC
	RET
GNC1:
	LD	A,(HL)
	INC	HL
	LD	D,(HL)
	LD	B,4
GNC1L:
	SRL	D	;DA=DA/2
	RRA		;
	DJNZ	GNC1L

	LD	E,A
	POP	HL
	POP	BC
	AND	A
	RET

SNCL:
	CALL	NCL1
	RET	C
;				SET NEXT CLUSTER
	PUSH	HL
	PUSH	BC
	PUSH	DE
	PUSH	HL
	CALL	NCL3
	POP	DE
;CF=ODD
	LD	A,(HL)
	LD	(HL),E
	JR	C,SNC1
;EVEN
;M[0] = E
;M[1] = (M[1] & 0xF0) | (D & 0x0F)
	INC	HL
	RRD		;M={A[3:0],E[3:0]}
	LD	A,D
	JR	SNC11
SNC1:
;ODD
;HL[0] = (HL[0]&0x0F) | (E<<4)
;HL[1] = DE>>4
	RLD		;M={D[3:0],E[7:4]}
	INC	HL
	LD	(HL),D	;M={D[3:0],E[7:4]}
SNC11:
	RLD		;M={M[7:4],D[3:0]}
	OR	A
	POP	DE
	POP	BC
	POP	HL
FAT_CHANGED:
	LD	A,1
	LD	(_WTFATF),A
	RET

N16CL3:
	PUSH	BC
	LD	L,E
	LD	A,D
	AND	3
	LD	H,A
	ADD	HL,HL
	LD	BC,(_FATBF)
	ADD	HL,BC
	POP	BC
	RET

GNCL16:
	CALL	N16CL1		;GET NEXT CLUSTER for FAT16
	RET	C
	PUSH	HL
	CALL	N16CL3
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	POP	HL
	RET

SNCL16:
	CALL	N16CL1		;GET NEXT CLUSTER for FAT16
	RET	C
	PUSH	DE
	PUSH	HL
	CALL	N16CL3
	POP	DE		;HL
	LD	(HL),E
	INC	HL
	LD	(HL),D
	LD	L,E
	LD	H,D
	POP	DE
	JR	FAT_CHANGED

;------------------------
;次のセクタを探す際に「1クラスタの論理セクタ数」を掛けてまとめて扱う
;in
;	DE : セクタ番号×1クラスタの論理セクタ数＋α
;out
;	DE : 次のセクタ番号×1クラスタの論理セクタ数＋α
;note
;	「FAT12」最大12ビット + 「1クラスタの論理セクタ数」4ビットで計16ビットとして扱う
;------------------------
GNCLX:
	LD	A,E
	INC	A
NCPAT:	AND	0	;自己書き換え　1クラスタの論理セクタ数-1
	JR	Z,GNCLX1
	INC	DE	;クラスタを跨がない場合は単純に+1する
	RET
GNCLX1:
	CALL	DIVSPC	;クラスタを跨ぐ場合は
	CALL	_GNCL	;次のクラスタを探す

;------------------------
;クラスタと「1クラスタの論理セクタ数」を掛ける
;in
;	DE : セクタ番号
;out
;	DE : 掛けられた値
;note
;	DE以外のレジスタとフラグは保持する
;------------------------
MULSPC:
	PUSH	AF
	EX	DE,HL
SPCPAT:	LD	A,1		;自己書き換え（1クラスタの論理セクタ数）
CLDBL:
	RRCA			;->CF
	JR	C,CLDBL_RET
	ADD	HL,HL		;*2
	JR	CLDBL
CLDBL_RET:
	EX	DE,HL
POP_AF_RET
	POP	AF
	RET

;------------------------
;「1クラスタの論理セクタ数」を割って論理セクタだけに戻す
;in
;	DE : 掛けられた値
;out
;	DE : セクタ番号
;note
;	DE以外のレジスタとフラグは保持する
;------------------------
DIVSPC:
	PUSH	AF
	LD	A,(SPCPAT+1)	;1クラスタの論理セクタ
CLDIV1:
	RRCA			;->CF
	JR	C,POP_AF_RET
	SRL	D		;DE=DE/2
	RR	E		;
	JR	CLDIV1

RDFAT:
	LD	A,080H
	LD	(CHECK),A
RDFAT1:
	LD	A,(_DRV)
	CALL	CHGDRVR
	RET	C
	LD	A,(IX+012H)	;DPB_12_DEVICE
	BIT	5,A
	JP	Z,RDFAT0X
	LD	HL,CHECK
	AND	(HL)
	LD	(HL),A
	LD	DE,0		;BPB
	LD	HL,(_FATBF)
	CALL	DRD16
	JR	NC,GET_BPB
	LD	HL,CHECK
	RLC	(HL)
	CCF
	RET	C
	RR	(IX+00AH)	;DPB_0A_FDMODE
	CCF			;フロッピーディスクのMFMモードを切り替える
	RL	(IX+00AH)	;DPB_0A_FDMODE
	LD	A,0FFH
	LD	(_DSK),A
	LD	A,(_DRIVE)
	AND	3
	OR	080H
	LD	L,A
	LD	H,_CYL0/256
	LD	A,0FFH
	LD	(HL),A
	JR	RDFAT1
GET_BPB:
	PUSH	IY
	LD	IY,(_FATBF)	;BPB

	LD	A,(IY+0)	;BS_JmpBoot
	CP	0EBH		;Short jump
	JR	Z,BPBOK
	CP	0E9H		;Near jump
	JR	Z,BPBOK
	CP	060H		;X68k
	JR	Z,BPBOK
NOT_BPB
	POP	IY
	SCF
	RET
BPBOK:
	LD	A,(IY+13)	;BPB_SecPerClus
	LD	(IX+7),A	;DPB_07_SECPCL

	LD	A,(IY+16)	;BPB_NumFATs
	CP	2		;>2:NC
	LD	A,(IY+12)	;BPB_BytsPerSec
	JR	C,BPBFAT1
	CP	5
	JR	NC,NOT_BPB	;1セクタ1024以上は無効
	OR	080H
BPBFAT1:
	LD	(IX+00FH),A	;DPB_0F_BPS

	LD	A,(IY+22)	;BPB_FATSz16
	LD	(IX+0),A	;DPB_00_FATLN
	LD	A,(IY+23)	;BPB_FATSz16
	LD	(IX+1),A	;DPB_00_FATLN

	LD	L,(IY+14)	;BPB_RsvdSecCnt
	LD	H,(IY+15)
	LD	(IX+00EH),L	;DPB_0E_FATPS
	LD	E,(IY+22)	;BPB_FATSz16
	LD	D,(IY+23)
	LD	B,(IY+16)	;BPB_NumFATs
BPBDP1:				;BPB_FATSz16 * BPB_NumFATs
	ADD	HL,DE
	DJNZ	BPBDP1
BPBDP2:
	LD	(IX+010H),L	;DPB_10_DIRPS
	LD	(IX+011H),H
	PUSH	HL

	LD	L,(IY+17)	;BPB_RootEntCnt
	LD	H,(IY+18)
	LD	A,(IY+12)	;BPB_BytsPerSec
	LD	B,6
BPBBPS1:
	DEC	B
	RRCA
	JR	NC,BPBBPS1
BPBDE1:
	ADD	HL,HL
	DJNZ	BPBDE1

	LD	A,H
	LD	(IX+00BH),A	;DPB_0B_DIRSCNT

	POP	DE		;DPB_10_DIRPS
	LD	L,H
	LD	H,0
	ADD	HL,DE		;MAXDIR
	PUSH	HL
	LD	C,(IY+13)	;BPB_SecPerClus
	SLA	C
	XOR	A
	LD	B,A
	SBC	HL,BC
	LD	(IX+014H),L	;DPB_14_ADDCL16
	LD	(IX+015H),H

	LD	L,(IY+19)	;BPB_TotSec16
	LD	H,(IY+20)
	POP	DE		;DE=DPB_0B_MAXDIR
	LD	A,H
	OR	L
	JR	Z,NOT_BPB	;セクタ数が16ビットを超えるものは危険なので扱わない
	SBC	HL,DE
	LD	B,(IY+13)	;BPB_SecPerClus
BPBTC1:				;総クラスタ数 = 総セクタ数 / セクタサイズ
	RR	B
	JR	C,BPBTC2
	SRL	H
	RR	L
	JR	BPBTC1
BPBTC2:
	INC	HL
	INC	HL
	LD	(IX+8),L	;DPB_08_MAXCL
	LD	(IX+9),H

	LD	A,(IY+21)	;BPB_Media
	LD	(IX+6),A	;DPB_06_FATID

	BIT	7,(IX+00AH)	;DPB_0A_FDMODE
	JR	Z,NOT_FD
	LD	L,40		;MAXCYLの設定（要検討）
	CP	0FDH	;2D
	JR	Z,SETCYL
	LD	L,77
	CP	0FEH	;2HD
	JR	Z,SETCYL
	LD	L,80	;その他2DD等
SETCYL:
	LD	(IX+00CH),L	;DPB_0C_MAXCYL
	LD	A,(IY+24)	;BPB_SecPerTr
	LD	(IX+00DH),A	;DPB_0D_MAXSEC
NOT_FD:
	POP	IY
	CALL	CHGDRV2
RDFAT0X:
	CALL	RDFATS
	RET	C
	CP	(IX+6)		;DPB_06_FATID
	RET	Z
	SCF
	RET

DRD16:
	LD	C,0
DRD24:
	PUSH	IX
	LD	IX,(_DPB)
DRDPAT:	CALL	FDRD		;自己書き換え（ディスク読み込み）
POP_IX_RET:
	POP	IX
	RET

RDFATS:
	CALL	FATSETUP
	RET	C
RDFATL:
	PUSH	BC
	CALL	DRD16
	POP	BC
	RET	C
	DJNZ	RDFATL
	LD	HL,(_FATBF)
	LD	A,(HL)
	RET

DWT16:
	LD	C,0
DWT24:
	PUSH	IX
	LD	IX,(_DPB)
DWTPAT:	CALL	FDWT		;自己書き換え（ディスク書き込み）
	JR	POP_IX_RET

WTFAT:
	CALL	FATSETUP
	CALL	NC,WTFATL
	RET	C
	BIT	7,(IX+00FH)	;DPB_0F_BPS
	RET	Z		;予備FATが無い
	CALL	FATS2
	LD	A,(IX+0)	;DPB_00_FATLN
WTFAT2:
	INC	DE
	DEC	A
	JR	NZ,WTFAT2
WTFATL:
	PUSH	BC
	CALL	DWT16
	POP	BC
	RET	C
	DJNZ	WTFATL
	RET
;------------------------
;FATのセットアップ
;out
;	B  : FATセクタ数
;	DE : FAT先頭セクタ番号
;	HL : FATバッファポインタ
;	CF : 1=ドライブ切り替えエラー
;note
;	FATサイズがFATバッファを超える場合は
;	対象クラスタ領域==(_FATIX)によって
;	FAT12:FATの前半3KBと後半3KBを切り替える
;	FAT16:対象クラスタ1024毎に2KBを切り替える
;------------------------
FATSETUP:
	LD	A,(_FATDRV)
	CALL	CHGDRVR		;ドライブ切り替え
	RET	C
FATS2:
	LD	DE,(_FATPS)	;fat sector pos
FATSX:	JP	FATSETUP12	;自己書き換え

FATSETUP12:
	LD	HL,(_FATBF)
	LD	A,24		;3072 / 256 FATバッファに読み込めるセクタ数
	LD	B,(IX+00FH)	;DPB_0F_BPS
L_FATS2:
	RRA			;CF=0 なので A=A/2
	RR	B		;->CF
	JR	NC,L_FATS2

	LD	B,(IX+0)	;DPB_00_FATLN
	CP	B
	RET	NC		;DPB_00_FATLN x sectorSize < fatBufSize
;targetCluster
	LD	C,A		;C = skipCount
	LD	A,(_FATIX)	;(targetCluster >= 0x800)
	OR	A
	JR	Z,FATS3
;(targerCluster>=0x800)
FAT_SKP:
	INC	DE		;FATPS++
	DEC	B		;FATSIZE--
	DEC	C		;skipCnt--
	JR	NZ,FAT_SKP
	LD	C,B
FATS3:
	LD	B,C		;3 or 6 or 12
	XOR	A
	RET

FATSETUP16:
	LD	A,(IX+00FH)	;DPB_0F_BPS 512=2 1024=4
	LD	B,16		;2048 / 256 FATバッファに読み込むセクタ数 512=4/1024=2
	LD	H,A		;DPB_0F_BPS
L_F16S2:
	SRL	B		;/2
	RRA			;->CF
	JR	NC,L_F16S2

	LD	A,H		;DPB_0F_BPS
	LD	HL,(_FATIX)	;範囲は0-63(0-03FH):65535*2/2048
	LD	H,0
	LD	C,L		;_FATIX
L_F16S3:
	ADD	HL,HL
	ADD	A,A
	BIT	3,A
	JR	Z,L_F16S3

	ADD	HL,DE
	EX	DE,HL

	LD	A,C		;_FATIX
	LD	L,(IX+0)	;DPB_00_FATLN
	DEC	L		;DPB_00_FATLN-1
	XOR	L		;Lと同じか比較してCFを0に
	JR	NZ,F16E		;FATバッファが最後の場合はFATセクタ数を調整
	LD	A,L		;DPB_00_FATLN-1
	DEC	B
	AND	B
	LD	B,A
	INC	B
F16E:
	LD	HL,(_FATBF)
	RET

CHGDRV:
	PUSH	HL
	LD	HL,_DSK
	CP	(HL)
	JR	Z,CHGDRVE
CHGDRV1:
	PUSH	IX
	CALL	CHGDRV0
	LD	A,(_DSK)
	POP	IX
CHGDRVE:
	POP	HL
	RET

CHGDRV0:
	LD	L,A
	CALL	_GETDPB
	RET	C
	LD	(_DPB),IX
	LD	A,L
	LD	(_DSK),A
CHGDRV2:
	DI
	PUSH	BC
	PUSH	DE
	LD	(SPPAT2+1),SP

	LD	SP,IX

	POP	HL		;L=DPB_00_FATLN
	POP	HL		;DPB_02_DRD
	LD	(DRDPAT+1),HL

	POP	HL
	LD	(DWTPAT+1),HL	;DPB_04_DWT

	POP	HL		;L=DPB_06_FATID H=DPB_07_SECPCL
	LD	A,H
	LD	(SPCPAT+1),A	;1クラスタの論理セクタ数
	DEC	A
	LD	(NCPAT+1),A

	POP	HL		;DPB_08_MAXCL
	LD	A,L
	LD	(CLPAT2+1),A
	LD	A,H
	LD	(CLPAT1+1),A
	DEC	HL
	LD	(MAXCLP+1),HL

	POP	HL		;L=DPB_0A_FDMODE H=DPB_0B_DIRSCNT
	LD	A,L
	OR	0FEH
	LD	(FDMODE+1),A
	RLCA
	AND	3
	LD	(FSPAT+1),A
	LD	C,H

	POP	HL		;L=DPB_0C_MAXCYL H=DPB_0D_MAXSEC
	LD	A,L
	LD	(_MAXCYL),A
	LD	A,H
	LD	(MAXSEC+1),A

	POP	HL		;L=DPB_0E_FATPS H=DPB_0F_BPS
	LD	A,H		;DPB_0F_BPS
	AND	7
	LD	(SECSZ+2),A	;1セクタのサイズの上位1バイト 0x400 - 0x200 - 0x100
	DEC	A		;1セクタ512 2D/2DD/2HC/2HQ(2HD1.44MB)等
				;1セクタ1024 2HD/EMM/BRAM
				;1セクタ256 GRAM等
				;1024	512	256
	LD	(SECSZM1+2),A	;3	1	0	1セクタのサイズ-1したものの上位1バイト (0x3FF - 0x1FF - 0xFF)
	INC	A		;4	2	1
	ADD	A,A		;8	4	2
	ADD	A,A		;010H	8	4
	ADD	A,A		;020H	010H	8
	LD	(SDECPAT+1),A	;1セクタ辺りのディレクトリエントリ数
	DEC	A		;01FH	00FH	7
	LD	(SDECM1+1),A	;1セクタ辺りのディレクトリエントリ数-1

	LD	H,0
	LD	(_FATPS),HL

	POP	HL		;L=DPB_10_DIRPS
	LD	(_DIRPS),HL

	POP	HL		;L=DPB_12_DEVICE H=DPB_13_UNITNO
	LD	A,H
	LD	(_DRIVE),A

	POP	HL		;DPB_14_ADDCL16
	LD	(CLSPAT+1),HL

SPPAT2:	LD	SP,0		;元のSPを復元
	EI
	LD	HL,(_DIRPS)
	LD	B,0
	ADD	HL,BC
	LD	(MD_PAT+1),HL

	LD	HL,(MAXCLP+1);
	LD	DE,4086
	OR	A
	SBC	HL,DE
	JR	NC,SETFAT16
	LD	HL,GNCL		;FAT12
	LD	DE,SNCL
	LD	BC,FATSETUP12
	RES	5,(IX+00FH)	;DPB_0F_BPS(FAT12)
	JR	EXTRA1
SETFAT16:
	LD	HL,GNCL16	;FAT16
	LD	DE,SNCL16
	LD	BC,FATSETUP16
	SET	5,(IX+00FH)	;DPB_0F_BPS(FAT16)
EXTRA1:
	LD	(GNCPAT+1),HL
	LD	(SNCPAT+1),DE
	LD	(FATSX+1),BC
	POP	DE
	POP	BC
	XOR	A
	RET

GETDPBD:
	EX	(SP),IX
	PUSH	IX
	LD	A,(_DRV)
	JR	GETDPB1

CHGDRVR:
	CALL	_CHGDRV
	RET	C
	LD	A,(_DSK)
GETDPB1:
	JP	_GETDPB

GETDPB:
	CP	8
	CCF
	RET	C
	RRCA
	RRCA
	RRCA
	DB	0DDH		;Z80未定義命令
	LD	L,A		;LD	IXL,A
	DB	0DDH		;Z80未定義命令
	LD	H,DEVICE/256	;LD	IXH,DEVICE/256
	LD	A,(IX+0)	;DPB_00_FATLN
	OR	A		;CF=0の為
	BIT	6,(IX+00FH)	;DPB_0F_BPS
	RET	NZ		;FAT16
	BIT	5,(IX+012H)	;DPB_12_DEVICE
	RET	NZ		;BPB
	CP	001H		;A=0 THEN CF=1
	RET

FFLUSH:
	PUSH	AF
	LD	A,0FFH
	LD	(SFILE),A
	CALL	DWTX
	LD	A,0FFH
	LD	(_DBDRV),A
	CALL	WTFATX
	XOR	A
	LD	(_FATIX),A
	CPL
	LD	(_FATDRV),A
	POP	AF
	RET

