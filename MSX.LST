                                ;*** AILZ80ASM *** Z-80 Assembler, version 1.0.0.0, LST:Full:4
                                ;   LSX-Dodgers for MSX
                                ;   Programmed by
                                ;   Gaku (Lovers/Tablacus)
                                
                                    INCLUDE "MSXDEF.ASM"
                                
                                ;   LSX-Dodgers DEF
                                ;   MSX
                                
       0003                     MAC EQU 3   ;MSX
       0001                     DEV EQU 1
                                
       001D                     VER_6F  EQU 0001DH
                                
       4000                     RUN EQU 04000H
                                
       C700                     START2  EQU 0C700H
       C906                     BDOS    EQU 0C906H
       E400                     WORKAD  EQU 0E400H
       E700                     FATBF   EQU 0E700H
       EF00                     DTBUF   EQU 0EF00H
       0028                     WIDTH   EQU 40
       0019                     LINE    EQU 25
       0000                     COLORF  EQU 0
       0000                     KEYSP_H EQU 0
       0000                     KEYSP_L EQU 0
       0008                     COMS    EQU 8
                                
       000C                     _RDSLT  EQU 0000CH
       0014                     _WRSLT  EQU 00014H
       001C                     _CALSLT EQU 0001CH
       0024                     _ENASLT EQU 00024H
       0030                     _CALLF  EQU 00030H
                                
       004A                     RDVRM   EQU 0004AH
       004D                     WRTVRM  EQU 0004DH
       006C                     INITXT  EQU 0006CH
       0078                     SETTXT  EQU 00078H
       009C                     CHSNS   EQU 0009CH
       009F                     CHGET   EQU 0009FH
       00A2                     CHPUT   EQU 000A2H
       00AE                     PINLIN  EQU 000AEH
       00B1                     INLIN   EQU 000B1H
       00B4                     QINLIN  EQU 000B4H
       00B7                     BREAKX  EQU 000B7H
       00C0                     BEEP    EQU 000C0H
       00C6                     POSIT   EQU 000C6H
       0138                     RSLREG  EQU 00138H
       0144                     PHYDIO  EQU 00144H  ;MAIN:BIOS:
       0156                     KILBUF  EQU 00156H
                                
       F341                     RAMAD0  EQU 0F341H
       F342                     RAMAD1  EQU 0F342H
       F343                     RAMAD2  EQU 0F343H
       F344                     RAMAD3  EQU 0F344H
                                
       FEDA                     H_STKE  EQU 0FEDAH
       FFA7                     H_PHYD  EQU 0FFA7H
                                
                                            ;ASCII-8K
       6000                     BANK0_SEL EQU 06000H
       6800                     BANK1_SEL EQU 06800H
       7000                     BANK2_SEL EQU 07000H
       7800                     BANK3_SEL EQU 07800H
                                            ;ASCII-16K
                                ;BANK0_SEL EQU 06000H
                                ;BANK1_SEL EQU 07000H
                                            ;KONAMI-8K
       8000                     KONAMI_BANK2_SEL EQU 08000H
       A000                     KONAMI_BANK3_SEL EQU 0A000H
[EOF:MSXDEF.ASM:UTF_8]
                                    INCLUDE "LDDEF.ASM"
                                
                                ;   LSX-Dodgers DEF
                                
       0001                     VER_1   EQU 1
       0006                     VER_2   EQU 6
       0000                     VER_3   EQU 0
       1D03                     MACW    EQU MAC + 01D00H    ;機種フラグとLD判別フラグ
       0103                     MACD    EQU MAC + DEV * 256 ;機種フラグとデバイスフラグ
       0160                     VER EQU VER_1 * 256 + VER_2 * 16 + VER_3
                                
       0005                     SYSTEM  EQU 00005H
       000F                     JP_HL   EQU 0000FH
       005C                     FCB1    EQU 0005CH
       006C                     FCB2    EQU 0006CH
       005D                     FCB1FN  EQU FCB1+1
       006D                     FCB2FN  EQU FCB2+1
       0080                     DTA1    EQU 00080H
                                
       FFCA                     EXTBIO  EQU 0FFCAH
                                
       0000                     DPB_FATLN   EQU 00H
       0002                     DPB_DRD     EQU 02H
       0004                     DPB_DWT     EQU 04H
       0006                     DPB_FATID   EQU 06H
       0007                     DPB_SECPCL  EQU 07H
       0008                     DPB_MAXCL   EQU 08H
       000A                     DPB_FDMODE  EQU 0AH
       000B                     DPB_DIRSCNT EQU 0BH
       000C                     DPB_MAXCYL  EQU 0CH
       000D                     DPB_MAXSEC  EQU 0DH
       000E                     DPB_FATPS   EQU 0EH
       000F                     DPB_BPS     EQU 0FH
       0010                     DPB_DIRPS   EQU 10H
       0012                     DPB_DEVICE  EQU 12H
       0013                     DPB_UNITNO  EQU 13H
       0014                     DPB_ADDCL   EQU 14H
                                
       001A                     DPB_SDIR    EQU 1AH
       001C                     DPB_NAME    EQU 1CH
                                
[EOF:LDDEF.ASM:SHIFT_JIS]
                                    INCLUDE "msx_cbios\\hardware.asm"
                                ; C-BIOS hardware related declarations
                                ;
                                ; Copyright (c) 2002-2005 BouKiCHi.  All rights reserved.
                                ; Copyright (c) 2003 Reikan.  All rights reserved.
                                ; Copyright (c) 2004-2005 Maarten ter Huurne.  All rights reserved.
                                ; Copyright (c) 2004 Manuel Bilderbeek.  All rights reserved.
                                ; Copyright (c) 2004-2006 Albert Beevendorp.  All rights reserved.
                                ; Copyright (c) 2004-2005 Joost Yervante Damad.  All rights reserved.
                                ;
                                ; Redistribution and use in source and binary forms, with or without
                                ; modification, are permitted provided that the following conditions
                                ; are met:
                                ; 1. Redistributions of source code must retain the above copyright
                                ;    notice, this list of conditions and the following disclaimer.
                                ; 2. Redistributions in binary form must reproduce the above copyright
                                ;    notice, this list of conditions and the following disclaimer in the
                                ;    documentation and/or other materials provided with the distribution.
                                ;
                                ; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
                                ; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
                                ; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                                ; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
                                ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                                ; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
                                ; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
                                ; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
                                ; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
                                ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                                ;
                                
                                ;---------------------------------------------------
                                ; I/O ports
                                
       002E                     DBG_CTRL:       equ     $2E             ; openMSX debugdevice control (mode)
       002F                     DBG_DATA:       equ     $2F             ; openMSX debugdevice data
                                
       0090                     PRN_STAT:       equ     $90             ; printer status
       0091                     PRN_DATA:       equ     $91             ; printer data
                                
       0098                     VDP_DATA:       equ     $98             ; VDP data port (VRAM read/write)
       0099                     VDP_ADDR:       equ     $99             ; VDP address (write only)
       0099                     VDP_STAT:       equ     $99             ; VDP status (read only)
       009A                     VDP_PALT:       equ     $9A             ; VDP palette latch (write only)
       009B                     VDP_REGS:       equ     $9B             ; VDP register access (write only)
                                
       00A0                     PSG_REGS:       equ     $A0             ; PSG register write port
       00A1                     PSG_DATA:       equ     $A1             ; PSG value write port
       00A2                     PSG_STAT:       equ     $A2             ; PSG value read port
                                
       00A8                     PSL_STAT:       equ     $A8             ; slot status
       00A9                     KBD_STAT:       equ     $A9             ; keyboard status
       00AA                     GIO_REGS:       equ     $AA             ; General IO Register
       00AB                     PPI_REGS:       equ     $AB             ; PPI register
                                
       00B4                     RTC_ADDR:       equ     $B4             ; RTC address
       00B5                     RTC_DATA:       equ     $B5             ; RTC data
                                
       00F4                     SYSFLAGS:       equ     $F4             ; MSX2+ System flags,
                                                                        ; preserved after reset
                                                                        ; bit 5: CPU boot mode (1=R800)
                                                                        ; bit 7: Boot method
                                                                        ;        (1=soft boot, no logo)
                                
       00FC                     MAP_REG1:       equ     $FC             ; memory mapper: bank in $0000-$3FFF
       00FD                     MAP_REG2:       equ     $FD             ; memory mapper: bank in $4000-$7FFF
       00FE                     MAP_REG3:       equ     $FE             ; memory mapper: bank in $8000-$BFFF
       00FF                     MAP_REG4:       equ     $FF             ; memory mapper: bank in $C000-$FFFF
                                
                                ;---------------------------------------------------
                                ; memory mapped I/O
                                
       FFFF                     SSL_REGS:       equ     $FFFF           ; secondary slot select registers
                                
                                ;---------------------------------------------------
                                ; Constants used to define which hardware the BIOS will run on.
                                ; Used by the main_<model>.asm sources.
                                
                                ; VDP models:
       9918                     TMS99X8:        equ     $9918
       9938                     V9938:          equ     $9938
       9958                     V9958:          equ     $9958
                                
                                ; MSX models:
       0000                     MODEL_MSX1:     equ     0
       0001                     MODEL_MSX2:     equ     1
       0002                     MODEL_MSX2P:    equ     2
       0003                     MODEL_MSXTR:    equ     3
                                
       0004                     MODEL_SUBROM:   equ     4
                                
                                ; Locales:
                                ; -- ID byte 0
       0000                     LOCAL_CHSET_JP  equ     $00
       0001                     LOCAL_CHSET_US  equ     $01
       0002                     LOCAL_CHSET_KO  equ     $02
                                
                                ; There are charsets which pretend to be INT, but are not... For now only BR:
       0000                     LOCAL_CHSET_VAR_NONE equ  $00
       0001                     LOCAL_CHSET_VAR_BR   equ  $01
                                
       0000                     LOCAL_DATE_YMD  equ     $00
       0010                     LOCAL_DATE_MDY  equ     $10
       0020                     LOCAL_DATE_DMY  equ     $20
                                
       0000                     LOCAL_INT_60HZ  equ     $00
       0080                     LOCAL_INT_50HZ  equ     $80
                                
                                ; -- ID byte 1
       0000                     LOCAL_KBD_JP    equ     $00
       0001                     LOCAL_KBD_US    equ     $01
       0002                     LOCAL_KBD_FR    equ     $02
       0003                     LOCAL_KBD_UK    equ     $03
       0004                     LOCAL_KBD_DE    equ     $04
                                
       0000                     LOCAL_BASIC_JP  equ     $00
       0001                     LOCAL_BASIC_US  equ     $01
                                
                                
                                ; BOOLEAN VALUES
       0001                     YES:            equ     1
       0000                     NO:             equ     0
                                
                                ; vim:ts=8:expandtab:filetype=z8a:syntax=z8a:
[EOF:hardware.asm:UTF_8]
                                    INCLUDE "msx_cbios\\systemvars.asm"
                                ;
                                ; C-BIOS system variable declarations
                                ;
                                ; Copyright (c) 2002-2003 BouKiCHi.  All rights reserved.
                                ; Copyright (c) 2003 Reikan.  All rights reserved.
                                ; Copyright (c) 2004-2005 Maarten ter Huurne.  All rights reserved.
                                ; Copyright (c) 2004 Manuel Bilderbeek.  All rights reserved.
                                ; Copyright (c) 2004-2006 Joost Yervante Damad.  All rights reserved.
                                ; Copyright (c) 2004-2005 Albert Beevendorp.  All rights reserved.
                                ; Copyright (c) 2005 Jussi Pitkänen.  All rights reserved.
                                ;
                                ; Redistribution and use in source and binary forms, with or without
                                ; modification, are permitted provided that the following conditions
                                ; are met:
                                ; 1. Redistributions of source code must retain the above copyright
                                ;    notice, this list of conditions and the following disclaimer.
                                ; 2. Redistributions in binary form must reproduce the above copyright
                                ;    notice, this list of conditions and the following disclaimer in the
                                ;    documentation and/or other materials provided with the distribution.
                                ;
                                ; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
                                ; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
                                ; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                                ; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
                                ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                                ; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
                                ; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
                                ; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
                                ; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
                                ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                                ;
                                
                                
                                ;-------------------
                                ; help function area
                                ;-------------------
                                ; Note: Functions defined in "main.asm" are disabled here.
                                
                                ; F380-F384: interslot read
                                ;RDPRIM:         equ     $F380
                                
                                ; F385-F38B: interslot read
                                ;WRPRIM:         equ     $F385
                                
                                ; F38C-F399: interslot call
                                ;CLPRIM:         equ     $F38C
                                
                                ; F39A-F3AD: workarea for the DEF USR statement
                                ; this area is initialized with the 10 times the value $475A, which gives
                                ; the error 'Syntax Error'
       F39A                     USRTAB:         equ     $F39A
                                
                                ;----------------------
                                ; screen parameter area
                                ;----------------------
                                
                                ; F3AE: # of positions on a line in SCREEN 0 (ini:39)
       F3AE                     LINL40:         equ     $F3AE
                                
                                ; F3AF: # of positions on a line in SCREEN 1 (ini:29)
       F3AF                     LINL32:         equ     $F3AF
                                
                                ; F3B0: # of actually used positions in the current screenmodus (ini:39)
       F3B0                     LINLEN:         equ     $F3B0
                                
                                ; F3B1: # of used lines on screen (ini:24)
       F3B1                     CRTCNT:         equ     $F3B1
                                
                                ; F3B2: # of positions within a tabulator-column (ini:14)
       F3B2                     CLMLST:         equ     $F3B2
                                
                                ; F3B3-F3B4: BASE(0): name table address for SCREEN 0 (ini:$0000)
                                ; used to initialize NAMBAS when SCREEN 0 is activated
       F3B3                     TXTNAM:         equ     $F3B3
                                
                                ; F3B5-F3B6: BASE(1): color table address for SCREEN 0, unused? (ini:$0000)
       F3B5                     TXTCOL:         equ     $F3B5
                                
                                ; F3B7-F3B8: BASE(2): pattern table address for SCREEN 0 (ini:$0800)
                                ; used to initialize CGPBAS when SCREEN 0 is activated
       F3B7                     TXTCGP:         equ     $F3B7
                                
                                ; F3B9-F3BA: BASE(3): sprite attribute table address for SCREEN 0, unused (ini:$0000)
                                ; used to initialize ATRBAS when SCREEN 0 is activated
       F3B9                     TXTATR:         equ     $F3B9
                                
                                ; F3BB-F3BC: BASE(4): sprite pattern table address for SCREEN 0, unused (ini:$0000)
                                ; used to initialize PATBAS when SCREEN 0 is activated
       F3BB                     TXTPAT:         equ     $F3BB
                                
                                ; F3BD-F3BE: BASE(5): nametable address for SCREEN 1 (ini:$1800)
                                ; used to initialize NAMBAS when SCREEN 1 is activated
       F3BD                     T32NAM:         equ     $F3BD
                                
                                ; F3BF-F3C0: BASE(6): color table address for SCREEN 1 (ini:$2000)
       F3BF                     T32COL:         equ     $F3BF
                                
                                ; F3C1-F3C2: BASE(7): pattern table address for SCREEN 1 (ini:$0000)
                                ; used to initialize CGPBAS when SCREEN 1 is activated
       F3C1                     T32CGP:         equ     $F3C1
                                
                                ; F3C3-F3C4: BASE(8): sprite attribute table address for SCREEN 1 (ini:$1B00)
                                ; used to initialize ATRBAS when SCREEN 1 is activated
       F3C3                     T32ATR:         equ     $F3C3
                                
                                ; F3C5-F3C6: BASE(9): sprite pattern table address for SCREEN 1 (ini:$0800)
                                ; used to initialize PATBAS when SCREEN 1 is activated
       F3C5                     T32PAT:         equ     $F3C5
                                
                                ; F3C7-F3C8: BASE(10): name table address for SCREEN 2 (ini:$1800)
                                ; used to initialize NAMBAS when SCREEN 2 is activated
       F3C7                     GRPNAM:         equ     $F3C7
                                
                                ; F3C9-F3CA: BASE(11): color table address for SCREEN 2 (ini:$2000)
       F3C9                     GRPCOL:         equ     $F3C9           ; Screen2 Color
                                
                                ; F3CB-F3CC: BASE(12): pattern table address for SCREEN 2 (ini:$0000)
                                ; used to initialize CGPBAS when SCREEN 2 is activated
       F3CB                     GRPCGP:         equ     $F3CB
                                
                                ; F3CD-F3CE: BASE(13): sprite attribute table address for SCREEN 2 (ini:$1B00)
                                ; used to initialize ATRBAS when SCREEN 2 is activated
       F3CD                     GRPATR:         equ     $F3CD
                                
                                ; F3CF-F3D0: BASE(14): sprite pattern table address for SCREEN 2 (ini:$3800)
                                ; used to initialize PATBAS when SCREEN 2 is activated
       F3CF                     GRPPAT:         equ     $F3CF
                                
                                ; F3D1-F3D2: BASE(15): name table address for SCREEN 3 (ini:$0800)
                                ; used to initialize NAMBAS when SCREEN 3 is activated
       F3D1                     MLTNAM:         equ     $F3D1
                                
                                ; F3D3-F3D4: BASE(16): color table address for SCREEN 3 (ini:$0000)
                                ; the color table is unused in SCREEN 3
       F3D3                     MLTCOL:         equ     $F3D3
                                
                                ; F3D5-F3D6: BASE(17): pattern table address for SCREEN 3 (ini:$0000)
                                ; used to initialize CGPBAS when SCREEN 3 is activated
       F3D5                     MLTCGP:         equ     $F3D5
                                
                                ; F3D7-F3D8: BASE(18): sprite attribute table address for SCREEN 3 (ini:$1B00)
                                ; used to initialize ATRBAS when SCREEN 3 is activated
       F3D7                     MLTATR:         equ     $F3D7
                                
                                ; F3D9-F3DA: BASE(19): sprite pattern table address for SCREEN 3 (ini:$3800)
                                ; used to initialize PATBAS when SCREEN 3 is activated
       F3D9                     MLTPAT:         equ     $F3D9
                                
                                ; F3DB: keyclick when a key is pressed: 0: no, 1: yes (ini: 1)
                                ; SCREEN ,,n will write to this address
       F3DB                     CLIKSW:         equ     $F3DB
                                
                                ; F3DC: line where the cursor is located
                                ; starts to count at 1 for the topmost line
       F3DC                     CSRY:           equ     $F3DC
                                
                                ; F3DD: column where the cursor is located
                                ; starts to count at 1 for the leftmost column
       F3DD                     CSRX:           equ     $F3DD
                                
                                ; F3DE: function key definition shown: 0: no, -1: yes
                                ; Note: MSX BIOS will mess up end-of-screen if this variable contains
                                ;       something other than $00 or $FF.
       F3DE                     CNSDFG:         equ     $F3DE
                                
                                ; F3DF-D3E6: storage for the last written value towards VDP registers 0 till 7
                                ; this is needed because these registers are write only
       F3DF                     RG0SAV:         equ     $F3DF
       F3E0                     RG1SAV:         equ     $F3E0
       F3E1                     RG2SAV:         equ     $F3E1
       F3E2                     RG3SAV:         equ     $F3E2
       F3E3                     RG4SAV:         equ     $F3E3
       F3E4                     RG5SAV:         equ     $F3E4
       F3E5                     RG6SAV:         equ     $F3E5
       F3E6                     RG7SAV:         equ     $F3E6
                                ; F3E7: last read value of VDP register 8
       F3E7                     STATFL:         equ     $F3E7
                                
                                ; F3E8: information about the joystick and space bar
                                ; 7 6 5 4 3 2 1 0
                                ; | | | |       +-- Space bar, trig(0) (0 = pressed)
                                ; | | | +---------- Stick 1, Trigger 1 (0 = pressed)
                                ; | | +------------ Stick 1, Trigger 2 (0 = pressed)
                                ; | +-------------- Stick 2, Trigger 1 (0 = pressed)
                                ; +---------------- Stick 2, Trigger 2 (0 = pressed)
       F3E8                     TRGFLG:         equ     $F3E8
                                
                                ; F3E9: code for the standard foreground color (ini:15)
       F3E9                     FORCLR:         equ     $F3E9
                                
                                ; F3EA: code for the standard background color (ini:4)
       F3EA                     BAKCLR:         equ     $F3EA
                                
                                ; F3EB: code for the standard border color (ini:7)
       F3EB                     BDRCLR:         equ     $F3EB
                                
                                ; F3EC-F3EE: Jump instruction used by Basic LINE command.
                                ; The routines used are: RIGHTC, LEFTC, UPC and DOWNC
       F3EC                     MAXUPD:         equ     $F3EC
                                
                                ; F3EF-F3F1: Jump instruction used by Basic LINE command.
                                ; The routines used are: RIGHTC, LEFTC, UPC and DOWNC
       F3EF                     MINUPD:         equ     $F3EF
                                
                                ; F3F2: working color, as used for graphical operations
                                ; normally equals to the foreground color (ini:15)
       F3F2                     ATRBYT:         equ     $F3F2
                                
                                ; F3F3-F3F4: starting value of the address of the queue-table
                                ; the queue-table contains 4 queue's: 3 for sound and one for RS232
                                ; (ini: QUETAB ($F959))
       F3F3                     QUEUES:         equ     $F3F3
                                
                                ; F3F5: CLOAD flag =0 when CLOAD =255 when CLOAD?
       F3F5                     FRCNEW:         equ     $F3F5
                                
                                ; F3F6: VDP-interupt counter that counts from 3 to 0, when it reaches zero, the
                                ; keyboard matrix is scanned, and the counters is reset at 3
       F3F6                     SCNCNT:         equ     $F3F6
                                
                                ; F3F7: key repeat counter. Runs from 13 to 0, and is changed when SCNCNT is changed
                                ; if the key remained the same. If it reaches 0, keyrepetition starts. If another key
                                ; is pressed the value is reset at 13.
       F3F7                     REPCNT:         equ     $F3F7
                                
                                ; F3F8-F3F9: first free space in the inputbuffer of the keyboard
                                ; everytime a key is added to the inputbuffer, this address is incremented,
                                ; when it equals to GETPNT, the buffer is full
                                ; the buffer is located at KEYBUF
       F3F8                     PUTPNT:         equ     $F3F8
                                
                                ; F3FA-F3FB: address in inputbuffer of first character that is not yet read
                                ; everytime a key is read from the buffer it is incremented
                                ; the buffer is located at KEYBUF
       F3FA                     GETPNT:         equ     $F3FA
                                
                                ; F3FC-F400: memory area for tape system parameters for 1200 baud
                                ; F3FC: length of  low signal for 0     (ini:83)
                                ; F3FD: length of high signal for 0     (ini:92)
                                ; F3FE: length of  low signal for 1     (ini:38)
                                ; F3FF: length of high signal for 1     (ini:45)
                                ; F400: length of synchronization block (ini:15)
       F3FC                     CS120:          equ     $F3FC
                                
                                ; F401-F405: memory area for tape system parameters for 1200 baud
                                ; F401: length of  low signal for 0     (ini:37)
                                ; F402: length of high signal for 0     (ini:45)
                                ; F403: length of  low signal for 1     (ini:14)
                                ; F404: length of high signal for 1     (ini:22)
                                ; F405: length of synchronization block (ini:31)
       F401                     CS240:          equ     $F401
                                
                                ; F406-F407: lenghts of signal for 0 for the current speed of the tape system
                                ; either equal to the content of F3FC-F3FD or the content of F401-F402
                                ; (ini: 83, 92)
       F406                     LOW_:           equ     $F406 ; real name: LOW, but doesn't compile?
                                
                                ; F408-F409: lenghts of signal for 1 for the current speed of the tape system
                                ; either equal to the content of F3FE-F3FF or the content of F403-F404
                                ; (ini: 38, 45)
       F408                     HIGH_:          equ     $F408 ; real name: HIGH, but doesn't compile?
                                
                                ; F40A: lenghts of synchronization block for the current speed of the tape system
                                ; either equal to the content of F400 or the content of F405 (ini: 15)
       F40A                     HEADER:         equ     $F40A
                                
                                ; F40B-F40C: standard setting for the height/width aspect of the
                                ; BASIC statement CIRCLE; only the byte in F40B is actually used
                                ; If ASPECT2 is larger then 255, the value of F40B is the number of horizontal
                                ; dots per 256 verical dots of the radius (ini:$0100)
                                ; ! not verified :)
       F40B                     ASPCT1:         equ     $F40B
                                
                                ; F40D-F40E: standard setting for the height/width aspect of the
                                ; BASIC statement CIRCLE; If ASPCT2 is smaller then 512, then ASPCT2 is the
                                ; number of vertical dots per 256 horizontal dots of the radius (ini:$0100)
                                ; ! not verified :)
       F40D                     ASPCT2:         equ     $F40D
                                
                                ; F40F-F413: work area for the BASIC statement RESUME NEXT
                                ; contains a fake end of basic program
                                ; (ini: 58, 0, 0, 0, 0)
       F40F                     ENDPRG:         equ     $F40F
                                
                                ; F414: errornumber of last error that happened while executing a BASIC program
                                ; (ini:0)
       F414                     ERRFLG:         equ     $F414
                                
                                ; F415: number of characters in the writebuffer of the printer that still
                                ; need printing
       F415                     LPTPOS:         equ     $F415
                                
                                ; F416: switch indicating if output should be screen or printer
                                ; (think LIST vs LLIST) (ini:0) values: 0: screen, 1: printer
       F416                     PRTFLG:         equ     $F416
                                
                                ; F417: switch indicating if hooked up printer is an MSX printer or not
                                ; values: 0: MSX-Printer, 1: no MSX-Printer
                                ; if the printer is no MSX-Printer, non-ASCII (>=128) characters are replaced
                                ; by spaces before sending them to the printer (ini: 0)
       F417                     NTMSXP:         equ     $F417
                                
                                ; F418: switch indicating of printing routines should use raw-mode or
                                ; should convert:
                                ; =0 to convert tabs and unknown characters to spaces and remove graphical headers
                                ; =1 to send data just like it gets it (ini: 0)
                                ; if RAWPRT is 1, the value if NTMSXP is ignored
       F418                     RAWPRT:         equ     $F418
                                
                                ; ---------------------------
                                ; basic interpreter work area
                                ; ---------------------------
                                
                                ; F419-F41A: work area for the BASIC command VAL: contains address of character that
                                ; has temporarely been replaced by O by VAL
       F419                     VLZADR:         equ     $F419
                                
                                ; F41B: work area for the BASIC command VAL: contains the character originally at
                                ; the location of VLZADR
       F41B                     VLZDAT:         equ     $F41B
                                
                                ; F41C-F41D: line number of current BASIC line being executed, in direct modus this
                                ; contains $FFFF (ini:$FFFF)
       F41C                     CURLIN:         equ     $F41C
                                
                                ; F41E: error detection prefix for KBUF, always contains ":"
                                ; originally undocumented :)
       F41E                     KBFMIN:         equ     $F41E
                                
                                ; F41F-F55C: workarea for coding basic rules that have been typed in direct modus
                                ; this are contains the code for the line interpreted in direct modus
       F41F                     KBUF:           equ     $F41F
                                
                                ; F55D: byte used as first byte of BUF for input statements, giving them always
                                ; an extra ',' (ini:44 == ',')
       F55D                     BUFMIN:         equ     $F55D
                                
                                ; F55E-F65F: used in direct modus to store the ASCII codes of the line, or simulary
                                ; for INPUT or LINE INPUT BASIC statements
       F55E                     BUF:            equ     $F55E
                                
                                ; F562-F570: used by bitblit routines to store the register data
       F562                     SX:             equ     $F562
       F564                     SY:             equ     $F564
       F566                     DX:             equ     $F566
       F568                     DY:             equ     $F568
       F56A                     NX:             equ     $F56A
       F56C                     NY:             equ     $F56C
       F56E                     CDUMMY:         equ     $F56E
       F56F                     ARG_:           equ     $F56F
       F570                     L_OP:           equ     $F570
                                
                                ; F660: last usable byte of BUF
       F660                     ENDBUF:         equ     $F660
                                
                                ; F661: number of column of last written character on the screen
       F661                     TTYPOS:         equ     $F661
                                
                                ; F662: switch indicating during variable lookup for arrays, if this has not already
                                ; been done for a DIM BASIC statement
       F662                     DIMFLG:         equ     $F662
                                
                                ; F663: workarea for evaluation of expressions; contains type of last evaluated
                                ; expression; the value of the expression is in DAC, possible values of VALTYP:
                                ; 2: integer
                                ; 3: string
                                ; 4: normal real
                                ; 8: double real
       F663                     VALTYP:         equ     $F663
                                
                                ; F664: workarea for coding of BASIC statements. switch indicating if keywords have
                                ; to be encoded or not. E.g. in DATA fields they should not be encoded
                                ; 0: encoding on, 1: encoding off
       F664                     DORES:          equ     $F664
                                
                                ; F665: workarea for coding of BASIC statements. swithc indication of numbers have to be
                                ; encoded; values: $0: encode as const, $1: encode as line number, $FF: do not encode
       F665                     DONUM:          equ     $F665
                                
                                ; F666-F667: work area for evaluation of expressions: contains address of first character
                                ; after the code of the last evaluated expression
       F666                     CONTXT:         equ     $F666
                                
                                ; F668: work area for evaluation of expressions: contains information byte about the
                                ; encoding of the last evaluated constant number; value of this constant is in CONLO
                                ; values:
                                ; $0B: octal (2 bytes)
                                ; $0C: hexadecimal (2 bytes)
                                ; $0F: decimal 0<=value<256 (1 byte)
                                ; $11-$1B: short encoding for 0->10
                                ; $1C: decimal (2bytes, 2s-compliment)
                                ; $26: $42 binary as ASCII
                                ; $0E: line number
                                ; $0D: line pointer
                                ; $1D: normal real (1 byte exp, 3 bytes BCD)
                                ; $1F: double real (1 byte exp, 7 bytes BCD)
       F668                     CONSAV:         equ     $F668
                                
                                ; F669: work area for evaluation of expressions: contains type of last evaluated number
                                ; constant; the value is in CONLO, for values of CONTYP, see VALTYP
                                ; Strings are never contant in BASIC!
       F669                     CONTYP:         equ     $F669
                                
                                ; F66A-F671: work area for evaluation of expressions: contains the value of the last
                                ; evaluated number contant; value starts at F66A, and takes bytes as needed for the type
       F66A                     CONLO:          equ     $F66A
                                
                                ; F672-F673: upper limit of memory area reserved for strings, contains the upper address
                                ; that is allowed to be used
       F672                     MEMSIZ:         equ     $F672
                                
                                ; F674-F675: top of stack; also first byte below string area
       F674                     STKTOP:         equ     $F674
                                
                                ; F676-F677: start address of current basic program, set at initialization, and
                                ; not changed by OS (ini:$8001)
       F676                     TXTTAB:         equ     $F676
                                
                                ; F678-F679: address of first unused string-descriptor in TEMPST
                                ; (ini:value of TEMPST)
       F678                     TEMPPT:         equ     $F678
                                
                                ; F67A-F697: work area for evaluation of string expressions; this area has space
                                ; for 10 string descriptors of 3 bytes; these can be used for temporarely results
                                ; of string arythmetics
       F67A                     TEMPST:         equ     $F67A
                                
                                ; F698-F69A: work area for evaluation of string expressions; this contains the
                                ; string descriptor of the intermediate result
       F698                     DSCTMP:         equ     $F698
                                
                                ; F69B-F69C: first address within the string memory area that is still free
                                ; the string area is filled backwards, soo the lower the value, the less space
                                ; remains (ini: value of MEMSIZ)
       F69B                     FRETOP:         equ     $F69B
                                
                                ; F69D-F69E: temporarely storage for adminstration of the basic interpreter
       F69D                     TEMP3:          equ     $F69D
                                
                                ; F69F-F6A0: temporarely storage for garbage collection
       F69F                     TEMP8:          equ     $F69F
                                
                                ; F6A1-F6A2: address of first byte in BASIC-code after last FOR statement
       F6A1                     ENDFOR:         equ     $F6A1
                                
                                ; F6A3-F6A4: line number of last used line of DATA statements
       F6A3                     DATLIN:         equ     $F6A3
                                
                                ; F6A5: switch indicating if a variable is allowed to be an array variable.
                                ; This is e.g. not allowed for the loop variable of a FOR statement
                                ; 0 = allowed, 1 = not allowed
       F6A5                     SUBFLG:         equ     $F6A5
                                
                                ; F6A6: switch indicating if currently a READ or INPUT statement is being executed
       F6A6                     FLKINP:         equ     $F6A6
                                
                                ; F6A7-F6A8: temporarely storage for adminstration of the basic interpreter
       F6A7                     TEMP:           equ     $F6A7
                                
                                ; F6A9: switch indicating if there are still linenumber constants in the BASIC code
                                ; that are encoded as pointers?
       F6A9                     PTRFLG:         equ     $F6A9
                                
                                ; F6AA: switch indication if currently an AUTO statement is active
                                ; 0 = no auto, 1 = auto
       F6AA                     AUTFLG:         equ     $F6AA
                                
                                ; F6AB-F6AC: last generated AUTO line number
       F6AB                     AUTLIN:         equ     $F6AB
                                
                                ; F6AD-F6AE: last used AUTO increment
       F6AD                     AUTINC:         equ     $F6AD
                                
                                ; F6AF-F6B0: work area of the error system; contains address of first byte
                                ; of statement currently being executed
       F6AF                     SAVTXT:         equ     $F6AF
                                
                                ; F6B1-F6B2: work area of the error system; contains address of the stack
                                ; before executing of the current statement started
       F6B1                     SAVSTK:         equ     $F6B1
                                
                                ; F6B3-F6B4: line number of last failed line
       F6B3                     ERRLIN:         equ     $F6B3
                                
                                ; F6B5-F6B6: line number of last used (changed, listed, added) line
       F6B5                     DOT:            equ     $F6B5
                                
                                ; F6B7-F5B8: work area of the error system; contains the address of the first
                                ; byte of the statement that last failed; on failure it is stored with the
                                ; content of SAVTXT
       F6B7                     ERRTXT:         equ     $F6B7
                                
                                ; F6B9-F6BA: work area of the error system; contains the line number where
                                ; execution should go to on error (as in basic: ON ERROR GOTO x)
       F6B9                     ONELIN:         equ     $F6B9
                                
                                ; F6BB-F6BC: work area of the error system; indication if the interpreter is
                                ; currently executing an error catch routine
                                ; 0 = no, FF = yes
       F6BB                     ONEFLG:         equ     $F6BB
                                
                                ; F6BC-F6BD: temporarely storage for the interpreter
       F6BC                     TEMP2:          equ     $F6BC
                                
                                ; F6BE-F6BF: line number of last program break, reset at 0 at any program change
       F6BE                     OLDLIN:         equ     $F6BE
                                
                                ; F6C0-F6C1: address of first statement that is not executed due to a break
       F6C0                     OLDTXT:         equ     $F6C0
                                
                                ; F6C2-F6C3: begin address of storage of basic variables and function descriptors;
                                ; possibly adjusted when program changes in size
       F6C2                     VARTAB:         equ     $F6C2
                                
                                ; F6C4-F6C5: begin address of array variables; possibly adjusted when program
                                ; changes size or more variables are allocated
       F6C4                     ARYTAB:         equ     $F6C4
                                
                                ; F6C6-F6C7: address of first free byte not used for storage of code or variables
                                ; (ini: $8003)
       F6C6                     STREND:         equ     $F6C6
                                
                                ; F6C8-F6C9: address where data needs to be searched at next READ statement
       F6C8                     DATPTR:         equ     $F6C8
                                
                                ; F6CA-F6E3: table with variable types, one for each letter in the alphabet
                                ; possible values:
                                ;       2 = integer     3 = string      4 = single      8 = double
       F6CA                     DEFTBL:         equ     $F6CA
                                
                                ; F6E4-F7B4: work area for execution of self defined functions
                                
                                ; F6E4-F6E5: contains address ; of previous parameter block on the stack;
                                ; needed for garbage collection
       F6E4                     PRMSTK:         equ     $F6E4
                                
                                ; F6E6-F6E7:  amount of valid bytes in PARM1
       F6E6                     PRMLEN:         equ     $F6E6
                                
                                ; F6E8-F74B: contains definitions of the variables in the parameter lists
                                ; of self defined functions
       F6E8                     PARM1:          equ     $F6E8
                                
                                ; F74C-F74D: previous value of PRMSTK
       F74C                     PRMDRV:         equ     $F74C
                                
                                ; F74E-F74F: number of valid bytes in PARM2
       F74E                     PRMLN2:         equ     $F74E
                                
                                ; F750-F7B3: area used for calculation of values that end up in PARM1
       F750                     PARM2:          equ     $F750
                                
                                ; F7B4: switch indicating of while searching a variable name PARM1 has
                                ; been looked at; 0 = no, 1 = yes
       F7B4                     PRMFLG:         equ     $F7B4
                                
                                ; F7B5-F7B6: address of first byte where it is no longer needed to search
                                ; for a variable name; it is equal to ARYTAB when the normal variable area
                                ; is searched, and equal to PARM1+PRMLEN when PARM1 is searched
       F7B5                     ARYTA2:         equ     $F7B5
                                
                                ; F7B7-F7B8: switch indicating iif PARM1 contains a valid parameter block
                                ; 0 = no, 1 = yes
       F7B7                     NOFUNS:         equ     $F7B7
                                
                                ; F7B8-F7B9: temporarely memory used while searching parameter blocks on
                                ; the stack
       F7B8                     TEMP9:          equ     $F7B8
                                
                                ; F7BA-F7BB: counter of the nesting-dept of the function being evaluated
       F7BA                     FUNACT:         equ     $F7BA
                                
                                ; F7BC-F7C3: work area when executing the SWAP statement; the first variable
                                ; is stored here
       F7BC                     SWPTMP:         equ     $F7BC
                                
                                ; F7C4: switch indicating if TRON is on; 0 = off, >0 = on
       F7C4                     TRCFLG:         equ     $F7C4
                                
                                ; F7C5-F7F4: workarea when executing numeric operators
       F7C5                     FBUFFR:         equ     $F7C5
       F7F0                     DECTMP:         equ     $F7F0
       F7F2                     DECTM2:         equ     $F7F2
       F7F4                     DECCNT:         equ     $F7F4
                                
                                ; F7F6-F805: workarea when executing numeric operators; intermediate
                                ; results are stored here; also used for parameter transfer when using
                                ; the USR functions; VALTYPE then contains the type, and the value is
                                ; stored like this:
                                ; typename  type  where
                                ; integer   2     F7F8-F7F9
                                ; string    3     F7F8-F7F9 (address descriptor)
                                ; single    4     F7F6-F7F9
                                ; double    8     F7F6-F7FD
       F7F6                     DAC:            equ     $F7F6
                                
                                ; F806-F856: workarea when executing numeric operators
       F806                     HOLD8:          equ     $F806
       F836                     HOLD2:          equ     $F836
       F83E                     HOLD:           equ     $F83E
       F847                     ARG:            equ     $F847
                                
                                ; F857-F85E: last calculated random double
       F857                     RNDX:           equ     $F857
                                
                                ; --------------------
                                ; filesystem work area
                                ; --------------------
                                
                                ; F85F: # of filedescriptors reserved minus 1
                                ; this is also the maximum number of open files possible
       F85F                     MAXFIL:         equ     $F85F
                                
                                ; F860-F861: start address of the file information table
       F860                     FILTAB:         equ     $F860
                                
                                ; F862-F863: start address of the first file-buffer
       F862                     NULBUF:         equ     $F862
                                
                                ; F864-F865: during file I/O the start address of the active file-buffer
       F864                     PTRFIL:         equ     $F864
                                
                                ; F866: flag indicating if the file that is being loaded have to be started
                                ; immediately; 0 = no, FF = yes
       F866                     RUNFLG:         equ     $F866
                                
                                ; note that RUNFLG and FILNAM overlap!
                                
                                ; F866-F870: filename of last file that has been active;
                                ; first 8 chars are name, last 3 are extension
       F866                     FILNAM:         equ     $F866
                                
                                ; F871-F87B: second filename if needed, e.g. the NAME command
       F871                     FILNM2:         equ     $F871
                                
                                ; F87C: switch indicating if currently a BASIC program is being loaded
                                ; 0 = no, 1 = yes
       F87C                     NLONLY:         equ     $F87C
                                
                                ; F87D-F87E: workarea for BLOAD and BSAVE; when a part of normal memory
                                ; is written, it contains the end address of the written memory region
                                ; if video memory is written it contains $4BE5 + start address of the
                                ; written memory region ??
       F87D                     SAVEND:         equ     $F87D
                                
                                ; F87F-F91E: storage area for the text of the function keys 10x16 bytes,
                                ; but strings need to be zero-terminated, soo maximum length of command is
                                ; 15 characters
       F87F                     FNKSTR:         equ     $F87F
                                
                                ; ------------------------
                                ; screen routine work area
                                ; ------------------------
                                
                                ; F91F-F921: start address of the standard ASCII pattern table
                                ; at every change towards a text mode it is copied in the pattern table
                                ; of the VDP
                                ;   F91F: slot indication (ini: 0)
                                ;   F920-F921: address (ini: 1BBF)
                                ; TODO: make CBIOS use this value instead of hardcoded value
       F91F                     CGPNT:          equ     $F91F
                                
                                ; F922-F923: start address of the nametable in the VRAM
       F922                     NAMBAS:         equ     $F922
                                
                                ; F924-F925: start address of the pattern table in the VRAM
       F924                     CGPBAS:         equ     $F924
                                
                                ; F926-F927: start address of the sprite pattern table in the VRAM
       F926                     PATBAS:         equ     $F926
                                
                                ; F928-F929: start address of the sprite location table in the VRAM
       F928                     ATRBAS:         equ     $F928
                                
                                ; F92A-F92B: address in VRAM of the pattern of the current position
                                ; on screen
       F92A                     CLOC:           equ     $F92A
                                
                                ; F92C: mask for CLOC selecting the right bits that correspond with
                                ; the current position
       F92C                     CMASK:          equ     $F92C
                                
                                ; F92D-F930: work area for graphical calculations
       F92D                     MINDEL:         equ     $F92D
       F92F                     MAXDEL:         equ     $F92F
                                
                                ; ----------------------------------------------
                                ; F931-F941: work area for calculation of CIRCLE
                                ; ----------------------------------------------
                                
                                ; F931-F932: ratio of # of dots in the horizontal and vertical direction
                                ; if = $0100 then ASPCT1 and ASPCT2 are used
                                ; if < $0100 then it is the # of dots in one direction for each
                                ; $0100 # of dots in the other direction; the direction is indicated
                                ; by CSCLXY
       F931                     ASPECT:         equ     $F931
                                
                                ; F933:F934: ; distance, in # of dots from the center of the most
                                ; distant point of the circle
       F933                     CENCNT:         equ     $F933
                                
                                ; F935: switch indication if the start and/or end point need to be
                                ; connected to the center
                                ;  bit 7: connect end point; 1 = yes
                                ;  bit 0: connect start point; 1 = yes
       F935                     CLINEF:         equ     $F935
                                
                                ; F936-F937: used during calculation of CIRCLE
       F936                     CNPNTS:         equ     $F936
                                
                                ; F938: direction of drawing of circle:
                                ;  00 = from CSTCNT towards CENCNT
                                ;  FF = from CENCNT towards CSTCNT
       F938                     CPLOTF:         equ     $F938
                                
                                ; F939-F93A: used during calculation of CIRCLE
       F939                     CPCNT:          equ     $F939
                                
                                ; F93B-F93C: ; contains the total # of dots of the full circle,
                                ; even when only a part is drawn
       F93B                     CPCNT8:         equ     $F93B
                                
                                ; F93D-F93E: used during calculation of CIRCLE
       F93D                     CRCSUM:         equ     $F93D
                                
                                ; F93F-F940: ; distance in dots from the center towards the closest
                                ; circle point
       F93F                     CSTCNT:         equ     $F93F
                                
                                ; F941: switch indicating if the X or Y direction needs to be streched:
                                ; 0 = X, 1 = Y
       F941                     CSCLXY:         equ     $F941
                                
                                ; F942-F943: store of CLOC, also used for PAINT
       F942                     CSAVEA:         equ     $F942
                                
                                ; F944: storage of CMASK; also used for PAINT
       F944                     CSAVEM:         equ     $F944
                                
                                ; F945-F946: horizontal distance towards the center
       F945                     CXOFF:          equ     $F945
                                
                                ; F947-F948: vertical distance towards the center
       F947                     CYOFF:          equ     $F947
                                
                                ; -------------------------------------------
                                ; work area for executing the PAINT statement
                                ; -------------------------------------------
                                
                                ; F949: leftmost position of protrusion towards the left
       F949                     LOHMSK:         equ     $F949
                                
                                ; F94A: new workdirection for protrusion towards the left
       F94A                     LOHDIR:         equ     $F94A
                                
                                ;F94B-F94C: leftmost position of protrusion towards the left
       F94B                     LOHADR:         equ     $F94B
                                
                                ; F94D: size of protrusion towards the left
       F94D                     LOHCNT:         equ     $F94D
                                
                                ; F94F-F950: # of pixels that may be skipped
       F94F                     SKPCNT:         equ     $F94F
                                
                                ; F951-F952: # of movements
       F951                     MOVCNT:         equ     $F951
                                
                                ; F953: current direction; $40 = \/, $C0 = /\, $00 = stop
       F953                     PDIREC:         equ     $F953
                                
                                ; F954: indicate if paint towards the left worked
       F954                     LFPROG:         equ     $F954
                                
                                ; F955: indicate of a paint towards the right worked
       F955                     RTPROG:         equ     $F955
                                
                                ; F956-F957: start address of a jumptable for subcommands
                                ; contained in a string variable, used for both PLAY and DRAW
                                ; where this systemvar points to either the PLAY or the DRAW
                                ; table
       F956                     MCLTAB:         equ     $F956
                                
                                ; F958: switch indication if MCLTAB is for PLAY or DRAW
                                ; $0 = DRAW, $FF = PLAY
       F958                     MCLFLG:         equ     $F958
                                
                                ; ------------------------------------------
                                ; work area for sound and queueing and RS232
                                ; ------------------------------------------
                                
                                ; F959-F971: Variables for three music queues and one RS232 queue
                                ; F959: VOICAQ put position
                                ; F95A: VOICAQ get position
                                ; F95B: VOICAQ putback flag
                                ; F95C: VOICAQ size
                                ; F95D: VOICAQ address
                                ; F95F-F964: VOICBQ
                                ; F965-F96A: VOICCQ
                                ; F96B-F970: RS2IQ
       F959                     QUETAB:         equ     $F959
                                
                                ; Putback characters for queues. TODO: what purpose do these have exactly?
       F971                     QUEBAK:         equ     $F971
                                
                                ; Buffers for queues.
       F975                     VOICAQ:         equ     $F975           ; Voice A queue
       F9F5                     VOICBQ:         equ     $F9F5           ; Voice B queue
       FA75                     VOICCQ:         equ     $FA75           ; Voice C queue
       FAF5                     RS2IQ:          equ     $FAF5           ; RS232   queue
                                
                                ; in MSX2 the content of RS2IQ is used differently:
       FAF5                     DPPAGE:         equ     $FAF5           ; Display page (SCR5+)
       FAF6                     ACPAGE:         equ     $FAF6           ; Active page (SCR5+)
                                
                                ; FAF7: AV control port value storage
       FAF7                     AVCSAV:         equ     $FAF7
                                
                                ; FAF8: extended BASIC ROM slot address
       FAF8                     EXBRSA:         equ     $FAF8
                                
                                ; FAF9: character count for ROMA-KANA
       FAF9                     CHRCNT:         equ     $FAF9
                                
                                ; FAFA-FAFB: character save for ROMA-KANA
       FAFA                     ROMA:           equ     $FAFA
                                
                                ; ROMA-KANA extension mode switch or VRAM size??
       FAFC                     MODE:           equ     $FAFC
                                ;Reserved       equ     $FAFD
                                
                                ; FAFE-FAFF: x position for mouse or lightpen
       FAFE                     XSAVE:          equ     $FAFE
                                
                                ; FB00-FB01: y position for mouse or lightpen
       FB00                     YSAVE:          equ     $FB00
       FB02                     LOGOPR:         equ     $FB02
                                ; FB21-FB28: Table which contains info for up to 4 disk ROMs, 2 bytes each:
                                ; - first byte: number of drives connected to this interface
                                ; - second byte: slot ID of the disk ROM
       FB21                     DRVINF:         equ     $FB21
                                ; end of MSX2 only usage of RS2IQ
                                
                                ; --------------------------------
                                ; work area for the PLAY statement
                                ; --------------------------------
                                
                                ; FB35: status about the parsing of a PLAY string
                                ;  bit 7: only one time parsed; 1 = yes
                                ;  bit 1-0: number of parsed strings (0-3)
       FB35                     PRSCNT:         equ     $FB35
                                
                                ; FB36-FB37: storage of stack
       FB36                     SAVSP:          equ     $FB36
                                
                                ; FB38: # of voice currently being parsed (0-2)
       FB38                     VOICEN:         equ     $FB38
                                
                                ; FB39-FB3A: storage of volume of a muted voice
       FB39                     SAVVOL:         equ     $FB39
                                
                                ; FB3B: size of string being parsed (also used by DRAW)
       FB3B                     MCLLEN:         equ     $FB3B
                                
                                ; FB3C-FB3D: address of string being parsed (also used by DRAW)
       FB3C                     MCLPTR:         equ     $FB3C
                                
                                ; FB3E: temporarely storage of active queue # (0-2)
       FB3E                     QUEUEN:         equ     $FB3E
                                
                                ; FB3F: flag indicating which queues are active
                                ; bit 2 = queue 2; 1 = active
                                ; bit 1 = queue 1; 1 = active
                                ; bit 0 = queue 0; 1 = active
       FB3F                     MUSICF:         equ     $FB3F
                                
                                ; FB40: count of the # of PLAY statements parsed, but not executed yet
       FB40                     PLYCNT:         equ     $FB40
                                
                                ; FB41-FB65: Voice Control Block for voice A (queue 0)
       FB41                     VCBA:           equ     $FB41
                                ; FB66-FB8A: Voice Control Block for voice B (queue 1)
       FB66                     VCBB:           equ     $FB66
                                ; FB8B-FBAF: Voice Control Block for voice C (queue 2)
       FB8B                     VCBC:           equ     $FB8B
                                
                                ; each VCB has the following structure:
                                
                                ; name                  offset  length  purpose
       0000                     METREX:         equ     0 ;     2       interrupt counter
       0002                     VCXLEN:         equ     2 ;     1       MCLLEN for voice
       0003                     VCXPTR:         equ     3 ;     2       MCLPTR for voice
       0005                     VCXSTP:         equ     5 ;     2       stack pointer
       0007                     QLENGX:         equ     7 ;     1       # bytes in queue
       0008                     NTICSX:         equ     8 ;     2       new counter ?
       000A                     TONPRX:         equ     10;     2       pitch
       000C                     AMPLTX:         equ     12;     1       amplitude
       000D                     ENVPRX:         equ     13;     2       envelope speed
       000F                     OCTAVX:         equ     15;     1       octave
       0010                     NOTELX:         equ     16;     1       tone length
       0011                     TEMPOX:         equ     17;     1       tempo
       0012                     VOLUMX:         equ     18;     1       volume
       0013                     ENVLPX:         equ     19;     1       envelope shape
       0021                     MCLSTX:         equ     33;             space for stack storage
       0024                     MCLSEX:         equ     36;             start of stack
                                ; the stack mentioned above is used to store bytevalues
                                ; that are readied to be put on the voice queue
                                
                                ; -----------------------------------------------
                                ; settings for screen editor and interrupt system
                                ; -----------------------------------------------
                                
                                ; FBB0: switch indicating if software reset is enabled
                                ; 0 = n, 1 = yes; can be used to reset BASIC by pressing
                                ; SHIFT-CODE-GRAPH; does not erase the existing program
                                ; (ini: 0)
       FBB0                     ENSTOP:         equ     $FBB0
                                
                                ; FBB1: switch indicating if the current BASIC program is in a ROM
                                ; 0 = no; 1 = yes
       FBB1                     BASROM:         equ     $FBB1
                                
                                ; FBB2-FBC9: table containing for each line if it continues on the
                                ; next line; 0 = yes, >0 = no
       FBB2                     LINTTB:         equ     $FBB2
                                
                                ; FBCA-FBCB storage of location of cursor for INLIN and QINLIN
                                ;  FBCA: CSRY , FBCB: CSRX
       FBCA                     FSTPOS:         equ     $FBCA
                                
                                ; ASCII code of the character currently covered by the cursor
                                ; TODO: is the name CURSAV or CODSAV ?
       FBCC                     CURSAV:         equ     $FBCC
                                
                                ; FBCD: switch indicating which function keys are to be displayed
                                ; on the screen; 0 = F6-F10, 1 = F1-F5
       FBCD                     FNKSWI:         equ     $FBCD
                                
                                ; FBCE-FBD7: for each function key, a flag indicating if it has
                                ; interrupt facility enabled; 0 = disabled, 1 = enabled
       FBCE                     FNKFLG:         equ     $FBCE
                                
                                ; FBD8: counter of # of interrupts that still have a pending ON .. GOSUB
       FBD8                     ONGSBF:         equ     $FBD8
                                
                                ; FBD9: flag indicating if a keyclick has already been generated, to avoid
                                ; keyclicks for a key that generates two ASCII codes
                                ; $00 = no click, $0F = click
       FBD9                     CLIKFL:         equ     $FBD9
                                
                                ; FBDA-FBE4: storage of keyboard matrix, used for detection key repetition
       FBDA                     OLDKEY:         equ     $FBDA
                                
                                ; FBE5-FBEF: current state of the keyboard matrix
       FBE5                     NEWKEY:         equ     $FBE5
                                
                                ; keyboard buffer; each char entered via the keyboard ends up here
       FBF0                     KEYBUF:         equ     $FBF0
                                ; LIMPNT: something about "key buffer pointer"
       FC17                     LIMPNT:         equ     $FC17
                                
                                ; FC18-FC3F: work area for processing the last typed line
       FC18                     LINWRK:         equ     $FC18
                                
                                ; FC40-FC47: storage for the patter of an ASCII character
                                ; used when writing an ASCII character in a graphical mode
       FC40                     PATWRK:         equ     $FC40
                                
                                ; FC48-FC49: lowest address of the RAM memory; initialized at startup
                                ; and not changed normally
       FC48                     BOTTOM:         equ     $FC48
                                
                                ; FC4A-FC4B: highest address of the RAM memory that is not reserved by
                                ; the OS; string area, filebuffers and stack are below this address
                                ; initialized at startup and not changed normally
       FC4A                     HIMEM:          equ     $FC4A
                                
                                ; FC4C-FC99: table for interrupt facilities of MSX BASIC
                                ; each 3 bytes are used like this:
                                ; byte 1 is a flag:
                                ;  bit 2: interrupt happened; 1 = yes
                                ;  bit 1: interrupt stop; 1 = yes
                                ;  bit 0: interrupt off; 1 = no
                                ; byte 2-3 is the adress of the line in BASIC where should be
                                ; jumped too
                                ; the offsets in the table are:
                                ;  offset  address interrupt
                                ;       0  FC4C    F1
                                ;       3  FC4F    F2
                                ;       6  FC52    F3
                                ;       9  FC55    F4
                                ;      12  FC58    F5
                                ;      15  FC5B    F6
                                ;      18  FC5E    F7
                                ;      21  FC61    F8
                                ;      24  FC64    F9
                                ;      27  FC67    F10
                                ;      30  FC6A    STOP
                                ;      33  FC6D    sprite collision
                                ;      36  FC70    SPACE (trigger 0)
                                ;      39  FC73    joystick 1 button 1 (trigger 1)
                                ;      39  FC76    joystick 2 button 1 (trigger 2)
                                ;      39  FC79    joystick 1 button 2 (trigger 3)
                                ;      39  FC7C    joystick 2 button 2 (trigger 4)
                                ;      39  FC7F    interval
       FC4C                     TRPTBL:         equ     $FC4C
                                
                                ; FC9A: usage unknown
       FC9A                     RTYCNT:         equ     $FC9A
                                
                                ; FC9B: STOP indication
                                ; 0 = nothing; 3 = CTRL+STOP, 4 = STOP
       FC9B                     INTFLG:         equ     $FC9B
                                
                                ; FC9C: last read Y-position of a touchpad
       FC9C                     PADY:           equ     $FC9C
                                
                                ; FC9D: last read X-position of a touchpad
       FC9D                     PADX:           equ     $FC9D
                                
                                ; FC9E-FC9F: software clock, updated at each VDP interrupt
       FC9E                     JIFFY:          equ     $FC9E           ; timer counter
                                
                                ; FCA0-FCA1: initial value of INTCNT, used when INTCNT
                                ; reaches 0; used for ON INTERVAL GOSUB
       FCA0                     INTVAL:         equ     $FCA0
                                
                                ; FCA2-FCA3: interrupt counter; lowered at each VDP interrupt;
                                ; reset with value of INTVAL when it reaches zero; if interval
                                ; interrupt is needed, it is generated
       FCA2                     INTCNT:         equ     $FCA2
                                
                                ; FCA4-FCA5: parameter used at tap input, given a value during
                                ; reading of a headerblock from tape
       FCA4                     LOWLIM:         equ     $FCA4
       FCA5                     WINWID:         equ     $FCA5
                                
                                ; FCA6: flag indicating if the previous character written
                                ; to the screen was an extension character for graphical signs
                                ; (ASCII 1); 0 = no, 1 = yes
       FCA6                     GRPHED:         equ     $FCA6
                                
                                ; FCA7 ESCCNT State of a state machine that handles the printing of escape
                                ; sequences. A subset of the VT52 escape sequences is supported.
                                ; values:
                                ; $00: not inside an escape sequence
                                ; $01: seen <ESC>x
                                ; $02: seen <ESC>y
                                ; $03: seen <ESC>Y<row>
                                ; $04: seen <ESC>Y
                                ; $FF: seen <ESC>
       FCA7                     ESCCNT:         equ     $FCA7
                                
                                ; FCA8: switch indicating insert or overwrite mode
                                ; $00 = overwrite; $FF = insert
                                ; the value of INSFLG is changed each time the INS key is pressed
       FCA8                     INSFLG:         equ     $FCA8
                                
                                ; FCA9: show cursor; 0 = no, 1 = yes
                                ; can be changed with escape sequences x5 and y5
       FCA9                     CSRSW:          equ     $FCA9
                                
                                ; FCAA: shape of cursor; 0 = block; 1 = insert
                                ; pressing the INS key changes the value of CSTYLE
                                ; can be changed with escape sequences x4 and y4
       FCAA                     CSTYLE:         equ     $FCAA
                                
                                ; switch indicating if the CAPS-LOCK is on
                                ; $00 = off, $FF = on (unofficial: $80 = perma-on)
       FCAB                     CAPST:          equ     $FCAB
                                
                                ; FCAC: dead key control in non-japanese MSX models
                                ; adds a mark on the next char pressed, if applicable
                                ;  0 = no dead key
                                ;  1 = dead key                => accent grave
                                ;  2 = SHIFT + dead key        => accent aigu
                                ;  3 = CODE + dead key         => accent circumflex
                                ;  4 = SHIFT + CODE + dead key => trema
                                ; in japanese models it controls the charset used
       FCAC                     KANAST:         equ     $FCAC
                                
                                ; FCAD: only used in japanese MSX models; it defines
                                ; the used typeset (ini: $40)
       FCAD                     KANAMD:         equ     $FCAD
                                
                                ; ----
                                ; misc
                                ; ----
                                
       FCAE                     FLBMEM:         equ     $FCAE
       FCAF                     SCRMOD:         equ     $FCAF
       FCB0                     OLDSCR:         equ     $FCB0
       FCB1                     CASPRV:         equ     $FCB1
       FCB2                     BRDATR:         equ     $FCB2
       FCB3                     GXPOS:          equ     $FCB3
       FCB5                     GYPOS:          equ     $FCB5
       FCB7                     GRPACX:         equ     $FCB7
       FCB9                     GRPACY:         equ     $FCB9
       FCBB                     DRWFLG:         equ     $FCBB
       FCBD                     DRWANG:         equ     $FCBD
       FCBE                     RUNBNF:         equ     $FCBE
       FCBF                     SAVENT:         equ     $FCBF
                                
                                ; ---------------------------
                                ; storage of slot information
                                ; ---------------------------
                                
                                ; FCC1-FCC4: Information for each primary slot. The most significant bit is
                                ; set if the primary slot is found to be expanded.
       FCC1                     EXPTBL:         equ     $FCC1
                                
                                ; FCC5-FCC8: Duplicate the contents of the four possible secondary slot
                                ; registers.
       FCC5                     SLTTBL:         equ     $FCC5
                                
                                ; FCC9-FD08: Information for any extension ROMs found during the power-up
                                ; ROM search.
                                ; FCC9-FCCC: primary slot 0, secondary slot 0
                                ; FCCD-FCD0: primary slot 0, secondary slot 1
                                ; FCD1-FCD4: primary slot 0, secondary slot 2
                                ; FCD5-FCD8: primary slot 0, secondary slot 3
                                ; FCD9-FCE8: primary slot 1
                                ; FCE9-FCF8: primary slot 2
                                ; FCF9-FD08: primary slot 3
                                ; The information is stored as below.
                                ; bit 7 (set): BASIC program
                                ; bit 6 (set): device handler
                                ; bit 5 (set): statement handler
       FCC9                     SLTATR:         equ     $FCC9
                                
       FD09                     SLTWRK:         equ     $FD09
                                
                                ; ------------------------------
                                ; storage of ROM-page parameters
                                ; ------------------------------
                                
       FD89                     PROCNM:         equ     $FD89
       FD99                     DEVICE:         equ     $FD99
                                ; ------------
                                ; system hooks
                                ; ------------
                                
                                ; system hooks are defined in hooks.asm
                                
                                ; ------------------
                                ; storage of VDP8-23
                                ; ------------------
                                
                                ; FFE7-FFF6: storage of VDP 8-23
       FFE7                     RG8SAV:         equ     $FFE7
                                
                                ; ----------------------
                                ; extra slot information
                                ; ----------------------
                                
                                ; FFF7: slot address of main-rom
                                ;?????:         equ     $FFF7
                                
                                ; ------------------
                                ; storage of VDP25-27
                                ; ------------------
                                
                                ; FFFA-FFFC: storage of VDP 25-27
       FFFA                     RG25SAV:         equ     $FFFA
                                
                                ; ---------------------------
                                ; subslot switching addresses
                                ; ---------------------------
                                
                                ; FFFF: subslot switching address
                                ; This is not actually a system variable, it is a hardware register:
                                ;   SSL_REGS (see hardware.asm).
                                
                                ; -------
                                ; the end
                                ; -------
                                
                                ; vim:ts=8:expandtab:filetype=z8a:syntax=z8a:
[EOF:systemvars.asm:UTF_8]
                                
000000 4000                         ORG RUN
                                
                                ; MSX ROM header
000000 4000 4142                    DB  "AB"   ; ID for auto-executable ROM
000002 4002 1040                    DW  INIT_ROM   ; Main program execution address.
000004 4004 0000                    DW  0      ; STATEMENT
000006 4006 0000                    DW  0      ; DEVICE
000008 4008 0000                    DW  0      ; TEXT
00000A 400A 000000000000            DW  0,0,0  ; Reserved
                                    INCLUDE "MSXINIT.ASM"
                                
                                ;   LSX-Dodgers INIT
                                ;   MSX
                                
       4010                     INIT_ROM:
000010 4010 3E                      DB  03EH    ;LD A,??
000011 4011 F7              12      RST 30H
000012 4012 F3               4      DI
000013 4013 32DAFE          13      LD  (H_STKE),A
000016 4016 CD5D40          17      CALL    GTSL1_
000019 4019 21DBFE          10      LD  HL,H_STKE+1
00001C 401C 77               7      LD  (HL),A
00001D 401D 118140          10      LD  DE,START
000020 4020 23               6      INC HL
000021 4021 73               7      LD  (HL),E
000022 4022 23               6      INC HL
000023 4023 72               7      LD  (HL),D
                                
000024 4024 CD3801          17      CALL    RSLREG      ;read primary slot #
000027 4027 07               4      RLCA
000028 4028 07               4      RLCA
000029 4029 F5              11      PUSH    AF
00002A 402A 1605             7      LD  D,4+1
00002C 402C CD6440          17      CALL    GTSL2_
00002F 402F 3244F3          13      LD  (RAMAD3),A
000032 4032 3A42F3          13      LD  A,(RAMAD1)
000035 4035 CD4F40          17      CALL    FIXRAMAD
000038 4038 3242F3          13      LD  (RAMAD1),A
00003B 403B 3A41F3          13      LD  A,(RAMAD0)
00003E 403E CD4F40          17      CALL    FIXRAMAD
000041 4041 3241F3          13      LD  (RAMAD0),A
000044 4044 F1              10      POP AF
000045 4045 1603             7      LD  D,2+1
000047 4047 CD6440          17      CALL    GTSL2_
00004A 404A 3243F3          13      LD  (RAMAD2),A
                                
00004D 404D FB               4      EI
00004E 404E C9              10      RET
                                
       404F                     FIXRAMAD:
00004F 404F B7               4      OR  A
000050 4050 2807            12      JR  Z,FIXRAMAD1
000052 4052 FEC9             7      CP  0C9H
000054 4054 2803            12      JR  Z,FIXRAMAD1
000056 4056 FEFF             7      CP  0FFH
000058 4058 C0              11      RET NZ
       4059                     FIXRAMAD1:
000059 4059 3A44F3          13      LD  A,(RAMAD3)
00005C 405C C9              10      RET
                                
       405D                     GTSL1_:             ;自分のいるスロットを知る
00005D 405D CD3801          17      CALL    RSLREG      ;read primary slot #
000060 4060 0F               4      RRCA
000061 4061 0F               4      RRCA
000062 4062 1601             7      LD  D,1
       4064                     GTSL2_:
000064 4064 E603             7      AND 3       ;[A]=000000PP
000066 4066 5F               4      LD  E,A     ;[E]=000000PP
000067 4067 21C1FC          10      LD  HL,EXPTBL
00006A 406A 85               4      ADD A,L     ;桁上りは無い
00006B 406B 6F               4      LD  L,A     ;[HL]=EXPTBL+000000PP
00006C 406C 7B               4      LD  A,E     ;[A]=000000PP
00006D 406D CB7E            13      BIT 7,(HL)
00006F 406F C8              11      RET Z
000070 4070 7D               4      LD  A,L     ;point to SLTTBL entry
000071 4071 C604             7      ADD A,4     ;桁上りは無い
000073 4073 6F               4      LD  L,A
000074 4074 7E               7      LD  A,(HL)      ;get currently expansion slot register
       4075                     GTSL3_:
000075 4075 15               4      DEC D
000076 4076 2803            12      JR  Z,GTSL4_:
000078 4078 0F               4      RRCA
000079 4079 18FA            12      JR  GTSL3_:
       407B                     GTSL4_:
00007B 407B E60C             7      AND 00CH        ;[A] = 0000SS00
00007D 407D B3               4      OR  E       ;[A] = 0000SSPP
00007E 407E F680             7      OR  080H        ;[A] = 1000SSPP
000080 4080 C9              10      RET
                                
       4081                     START:
000081 4081 F3               4      DI
000082 4082 ED56             8      IM  1
000084 4084 3E01             7      LD  A,1
000086 4086 320068          13      LD  (BANK1_SEL),A
000089 4089 219740          10      LD  HL,AT_START2
00008C 408C 1100C7          10      LD  DE,START2
00008F 408F 010020          10      LD  BC,MSX_E-START2
000092 4092 EDB0                    LDIR
000094 4094 C300C7          10      JP  START2
                                
       4097                     AT_START2:
000097 C700                         ORG START2,AT_START2-RUN
                                
000097 C700 3100C7          10      LD  SP,START2
00009A C703 CD11C7          17      CALL    INIT        ;NZならAUTOEXECを実行
00009D C706 210000          10      LD  HL,0
0000A0 C709 E5              11      PUSH    HL
0000A1 C70A C8              11      RET Z
0000A2 C70B 1105C9          10      LD  DE,AUTOD
0000A5 C70E C3FDE4          10      JP  _COMANL
                                
       C711                     INIT:
0000A8 C711 DD21900D        14      LD  IX,0D90H
0000AC C715 0600             7      LD  B,0
       C717                     CHECK_CBIOS1:
0000AE C717 DD7E00          19      LD  A,(IX+0)
0000B1 C71A FE43             7      CP  'C'
0000B3 C71C 202B            12      JR  NZ,CHECK_CBIOS2
0000B5 C71E DD7E01          19      LD  A,(IX+1)
0000B8 C721 FE2D             7      CP  '-'
0000BA C723 2024            12      JR  NZ,CHECK_CBIOS2
0000BC C725 DD7E02          19      LD  A,(IX+2)
0000BF C728 FE42             7      CP  'B'
0000C1 C72A 201D            12      JR  NZ,CHECK_CBIOS2
0000C3 C72C DD7E03          19      LD  A,(IX+3)
0000C6 C72F FE49             7      CP  'I'
0000C8 C731 2016            12      JR  NZ,CHECK_CBIOS2
0000CA C733 DD7E04          19      LD  A,(IX+4)
0000CD C736 FE4F             7      CP  'O'
0000CF C738 200F            12      JR  NZ,CHECK_CBIOS2
0000D1 C73A DD7E05          19      LD  A,(IX+5)
0000D4 C73D EE53             7      XOR 'S'
0000D6 C73F 2008            12      JR  NZ,CHECK_CBIOS2
                                
0000D8 C741 327ED0          13      LD  (CBIOS_SWC1),A
0000DB C744 32A2D0          13      LD  (CBIOS_SWC2),A
                                
0000DE C747 1804            12      JR  CHECK_CBIOS3
       C749                     CHECK_CBIOS2:
0000E0 C749 DD23            10      INC IX
0000E2 C74B 10CA            13      DJNZ    CHECK_CBIOS1
       C74D                     CHECK_CBIOS3:
0000E4 C74D 3ADBFE          13      LD  A,(H_STKE+1)
0000E7 C750 3262E4          13      LD  (ROM_SLT),A
                                
       C753                     RAMCHK2:
0000EA C753 3A42F3          13      LD  A,(RAMAD1)
0000ED C756 2640             7      LD  H,040H
0000EF C758 CD69C8          17      CALL    CHK_RAM
0000F2 C75B 3242F3          13      LD  (RAMAD1),A
       C75E                     RAMCHK1:
0000F5 C75E 3A41F3          13      LD  A,(RAMAD0)
0000F8 C761 2600             7      LD  H,00H
0000FA C763 CD69C8          17      CALL    CHK_RAM
0000FD C766 3241F3          13      LD  (RAMAD0),A
       C769                     RAMCHK0:
000100 C769 3A42F3          13      LD  A,(RAMAD1)
000103 C76C 2640             7      LD  H,040H
000105 C76E CD6ED3          17      CALL    ENASLT
                                
000108 C771 3A41F3          13      LD  A,(RAMAD0)
00010B C774 2600             7      LD  H,000H
00010D C776 CD6ED3          17      CALL    ENASLT
                                
000110 C779 210000          10      LD  HL,0
000113 C77C 065C             7      LD  B,05CH
000115 C77E 3E                      DB  03EH    ;LD A,??
000116 C77F EF              12      RST 28H
000117 C780 CD08D5          17      CALL    FILL_MEMORY
00011A C783 06A4             7      LD  B,0A4H
00011C C785 AF               4      XOR A
00011D C786 CD08D5          17      CALL    FILL_MEMORY
                                
000120 C789 3EC3             7      LD  A,0C3H      ;JP
000122 C78B 2103E4          10      LD  HL,CPM_WBOOT
000125 C78E 320000          13      LD  (00000H),A
000128 C791 220100          16      LD  (00001H),HL ;IPL
                                
00012B C794 21031D          10      LD  HL,MACW     ;3 bit7  DPB Compatible LA(1)
00012E C797 220300          16      LD  (00003H),HL ;  bit6-0 Machine
                                ;               ;4 LSX-Dodgers(01DH)
000131 C79A 2106C9          10      LD  HL,BDOS
000134 C79D 320500          13      LD  (00005H),A
000137 C7A0 220600          16      LD  (00006H),HL ;BDOS
                                
00013A C7A3 210000          10      LD  HL,0
00013D C7A6 322800          13      LD  (00028H),A
000140 C7A9 222900          16      LD  (00029H),HL ;BDOS
                                                ;インタースロットコール
000143 C7AC 216ED2          10      LD  HL,RDSLTR
000146 C7AF 320C00          13      LD  (_RDSLT),A
000149 C7B2 220D00          16      LD  (_RDSLT+1),HL
                                
00014C C7B5 2177D2          10      LD  HL,WRSLTR
00014F C7B8 321400          13      LD  (_WRSLT),A
000152 C7BB 221500          16      LD  (_WRSLT+1),HL
                                
000155 C7BE 2130D2          10      LD  HL,CALSLTR
000158 C7C1 321C00          13      LD  (_CALSLT),A
00015B C7C4 221D00          16      LD  (_CALSLT+1),HL
                                
00015E C7C7 216ED3          10      LD  HL,ENASLT
000161 C7CA 322400          13      LD  (_ENASLT),A
000164 C7CD 222500          16      LD  (_ENASLT+1),HL
                                
000167 C7D0 2120D2          10      LD  HL,CALLF
00016A C7D3 323000          13      LD  (_CALLF),A
00016D C7D6 223100          16      LD  (_CALLF+1),HL
                                
000170 C7D9 2180D2          10      LD  HL,INT38H
000173 C7DC 323800          13      LD  (00038H),A
000176 C7DF 223900          16      LD  (00038H+1),HL
                                                ;LSX-Dodgers
000179 C7E2 3EE4             7      LD  A,CPM_BOOT/256
00017B C7E4 320B00          13      LD  (0000BH),A
                                
00017E C7E7 3E                      DB  03EH    ;LD A,??
00017F C7E8 E9               4      JP  (HL)
000180 C7E9 320F00          13      LD  (0000FH),A
                                                ;MSXワークエリア
000183 C7EC 3E03             7      LD  A,3
000185 C7EE 329BFC          13      LD  (INTFLG),A
                                
                                                ;ROMタイプ判別(ASCII-8K/ASCII-16K)
000188 C7F1 1E00             7      LD  E,0
00018A C7F3 3A62E4          13      LD  A,(ROM_SLT)
00018D C7F6 210068          10      LD  HL,BANK1_SEL
000190 C7F9 CDFBD2          17      CALL    WRSLT
                                
000193 C7FC 210060          10      LD  HL,06000H
000196 C7FF 3A62E4          13      LD  A,(ROM_SLT)
000199 C802 CDBAD2          17      CALL    RDSLT
00019C C805 FE41             7      CP  'A'
00019E C807 280F            12      JR  Z,ROM8K
                                                ;ASCII-8K/Konami-8Kではない(ASCII-16K)
0001A0 C809 3E                      DB  03EH    ;LD A,??
0001A1 C80A 00               4      NOP
0001A2 C80B 32D4E1          13      LD  (ASCII16K1),A
0001A5 C80E 32D8E1          13      LD  (ASCII16K2),A
0001A8 C811 3E3F             7      LD  A,03FH
0001AA C813 32F0E1          13      LD  (ASCII16K3),A
0001AD C816 1829            12      JR  ROMCHECKED
       C818                     ROM8K:              ;Konami-8Kチェック
0001AF C818 1E01             7      LD  E,1
0001B1 C81A 3A62E4          13      LD  A,(ROM_SLT)
0001B4 C81D 210070          10      LD  HL,BANK2_SEL
0001B7 C820 CDFBD2          17      CALL    WRSLT
                                
0001BA C823 1E00             7      LD  E,0
0001BC C825 3A62E4          13      LD  A,(ROM_SLT)
0001BF C828 210080          10      LD  HL,KONAMI_BANK2_SEL
0001C2 C82B CDFBD2          17      CALL    WRSLT
                                
0001C5 C82E 210080          10      LD  HL,08000H
0001C8 C831 3A62E4          13      LD  A,(ROM_SLT)
0001CB C834 CDBAD2          17      CALL    RDSLT
0001CE C837 FE41             7      CP  'A'
0001D0 C839 2006            12      JR  NZ,ROMCHECKED
                                                ;Konami-8K
0001D2 C83B 210080          10      LD  HL,KONAMI_BANK2_SEL
0001D5 C83E 22DFE1          16      LD  (ROM8000H),HL
       C841                     ROMCHECKED:
                                                ;MSX2判別
0001D8 C841 3AF8FA          13      LD  A,(EXBRSA)
0001DB C844 B7               4      OR  A
0001DC C845 3E28             7      LD  A,40
0001DE C847 2802            12      JR  Z,ISMSX1
0001E0 C849 3E50             7      LD  A,80        ;MSX2以降は80桁で起動
       C84B                     ISMSX1:
0001E2 C84B 32AEF3          13      LD  (LINL40),A
0001E5 C84E 32B1E4          13      LD  (_WIDTH),A
0001E8 C851 DD216C00        14      LD  IX,INITXT
0001EC C855 CD14D2          17      CALL    CALSLT_R
0001EF C858 DD217800        14      LD  IX,SETTXT
0001F3 C85C CD14D2          17      CALL    CALSLT_R
                                
0001F6 C85F 2111C9          10      LD  HL,INIMES
0001F9 C862 CD7BCD          17      CALL    MSX
       C865                     INIT1:
0001FC C865 AF               4      XOR A
0001FD C866 FE03             7      CP  3
0001FF C868 C9              10      RET
                                
       C869                     CHK_RAM:
000200 C869 E5              11      PUSH    HL
000201 C86A CDBEC8          17      CALL    CHK_RAM0
000204 C86D E1              10      POP HL
000205 C86E C8              11      RET Z
000206 C86F 3AC1FC          13      LD  A,(EXPTBL)      ;スロット#0
000209 C872 E680             7      AND 080H
00020B C874 CD95C8          17      CALL    CHK_RAM_SLT
00020E C877 C8              11      RET Z
00020F C878 3AC2FC          13      LD  A,(EXPTBL+1)        ;スロット#1
000212 C87B E680             7      AND 080H
000214 C87D C601             7      ADD A,1
000216 C87F CD95C8          17      CALL    CHK_RAM_SLT
000219 C882 C8              11      RET Z
00021A C883 3AC3FC          13      LD  A,(EXPTBL+2)        ;スロット#2
00021D C886 E680             7      AND 080H
00021F C888 C602             7      ADD A,2
000221 C88A CD95C8          17      CALL    CHK_RAM_SLT
000224 C88D C8              11      RET Z
000225 C88E 3AC4FC          13      LD  A,(EXPTBL+3)        ;スロット#3
000228 C891 E680             7      AND 080H
00022A C893 C603             7      ADD A,3
       C895                     CHK_RAM_SLT:
00022C C895 E5              11      PUSH    HL
00022D C896 CDBEC8          17      CALL    CHK_RAM0        ;スロット#X or X-0
000230 C899 E1              10      POP HL
000231 C89A C8              11      RET Z
000232 C89B CB79             8      BIT 7,C
000234 C89D 281A            12      JR  Z,CHK_RAM_E     ;スロットは拡張されていない
000236 C89F 79               4      LD  A,C
000237 C8A0 C604             7      ADD A,4*1           ;スロット#X-1
000239 C8A2 E5              11      PUSH    HL
00023A C8A3 CDBEC8          17      CALL    CHK_RAM0
00023D C8A6 E1              10      POP HL
00023E C8A7 C8              11      RET Z
00023F C8A8 79               4      LD  A,C
000240 C8A9 C608             7      ADD A,4*2           ;スロット#X-2
000242 C8AB E5              11      PUSH    HL
000243 C8AC CDBEC8          17      CALL    CHK_RAM0
000246 C8AF E1              10      POP HL
000247 C8B0 C8              11      RET Z
000248 C8B1 79               4      LD  A,C
000249 C8B2 C60C             7      ADD A,4*3           ;スロット#X-3
00024B C8B4 E5              11      PUSH    HL
00024C C8B5 CDBEC8          17      CALL    CHK_RAM0
00024F C8B8 E1              10      POP HL
       C8B9                     CHK_RAM_E:
000250 C8B9 AF               4      XOR A
000251 C8BA 3C               4      INC A           ;ZF=0にする
000252 C8BB 3E00             7      LD  A,0
000254 C8BD C9              10      RET
                                
       C8BE                     CHK_RAM0:
000255 C8BE 4F               4      LD  C,A
000256 C8BF 3A62E4          13      LD  A,(ROM_SLT)
000259 C8C2 B9               4      CP  C
00025A C8C3 28F4            12      JR  Z,CHK_RAM_E
00025C C8C5 2E00             7      LD  L,0
       C8C7                     CHK_RAM1:
00025E C8C7 79               4      LD  A,C
00025F C8C8 DD210C00        14      LD  IX,_RDSLT
000263 C8CC CDF9C8          17      CALL    CALSLT_RAM
000266 C8CF C6E5             7      ADD A,0E5H
000268 C8D1 47               4      LD  B,A
000269 C8D2 5F               4      LD  E,A
00026A C8D3 79               4      LD  A,C
00026B C8D4 DD211400        14      LD  IX,_WRSLT
00026F C8D8 CDF9C8          17      CALL    CALSLT_RAM
000272 C8DB 79               4      LD  A,C
000273 C8DC DD210C00        14      LD  IX,_RDSLT
000277 C8E0 CDF9C8          17      CALL    CALSLT_RAM
00027A C8E3 B8               4      CP  B
00027B C8E4 C0              11      RET NZ
00027C C8E5 D6E5             7      SUB 0E5H
00027E C8E7 79               4      LD  A,C
00027F C8E8 5F               4      LD  E,A
000280 C8E9 DD211400        14      LD  IX,_WRSLT
000284 C8ED CDF9C8          17      CALL    CALSLT_RAM
000287 C8F0 24               4      INC H
000288 C8F1 7D               4      LD  A,L
000289 C8F2 C604             7      ADD A,4
00028B C8F4 6F               4      LD  L,A
00028C C8F5 20D0            12      JR  NZ,CHK_RAM1
00028E C8F7 79               4      LD  A,C     ;ZF=1のハズ
00028F C8F8 C9              10      RET
                                
       C8F9                     CALSLT_RAM:
000290 C8F9 C5              11      PUSH    BC
000291 C8FA E5              11      PUSH    HL
000292 C8FB FD2AC0FC        20      LD  IY,(EXPTBL-1) ;メインROMスロット
000296 C8FF CD1C00          17      CALL    _CALSLT
000299 C902 E1              10      POP HL
00029A C903 C1              10      POP BC
00029B C904 C9              10      RET
                                
00029C C905 4155544F45584543    AUTOD:  DB  "AUTOEXEC "
            20                  
0002A5 C90E 413A00              AUTODV: DB  "A:",0
                                
0002A8 C911 0C4C53582D446F64    INIMES: DB  00CH,"LSX-Dodgers for MSX v"
            6765727320666F72    
            204D53582076        
0002BE C927 312E                    DB  030H + VER_1, '.'
0002C0 C929 3630                    DB  030H + VER_2 ,030H + VER_3
0002C2 C92B 45                      DB  "E"
0002C3 C92C 2047616B750D0A          DB  ' Gaku',0DH,0AH
0002CA C933 00                      DB  0
                                
0002CB C934 0300                M2DD:   DW  3
0002CD C936 F902                    DB  0F9H,2
0002CF C938 CB02                    DW  715
0002D1 C93A FF0750090182            DB  0FFH,7,80,9,1,082H
0002D7 C940 0700A7000A00            DW  7,0A7H,10
       C946                     M2DDE:
[EOF:MSXINIT.ASM:SHIFT_JIS]
                                    INCLUDE "MSXCCP.ASM"
                                
                                ;   LSX-Dodgers CCP
                                ;   MSX
                                
       C946                     INITE:
0002DD C946                         DS  BDOS-INITE
01029D C906 C33ACD          10      JP  BDOS0
                                
       C909                     WBOOT1:
0102A0 C909 ED7B0600        20      LD  SP,(SYSTEM+1)
0102A4 C90D 3E03             7      LD  A,3
0102A6 C90F CD01D0          17      CALL    MSG_A
       C912                     WBOOT2:
[EOF:MSXCCP.ASM:UTF_8]
                                    INCLUDE "LDCCP.ASM"
                                
                                ;   LSX-Dodgers CCP
                                
       C912                     COMMAND:
0102A9 C912 3A2CE3          13      LD  A,(FCB_BAT)
0102AC C915 B7               4      OR  A
0102AD C916 C258CA          10      JP  NZ,C_BAT1
0102B0 C919 CDCCC9          17      CALL    SETDTA1
0102B3 C91C 3A87E4          13      LD  A,(_DVSW)
0102B6 C91F C641             7      ADD A,'A'
0102B8 C921 CD01D0          17      CALL    MSG_A
0102BB C924 3E3E             7      LD  A,'>'
0102BD C926 CD01D0          17      CALL    MSG_A
0102C0 C929 3E50             7      LD  A,80
0102C2 C92B 12               7      LD  (DE),A
0102C3 C92C CDC0D0          17      CALL    _SYS0A      ;(BDOS)文字列入力
0102C6 C92F CD4DCB          17      CALL    LTNL
       C932                     COMMAND2:
0102C9 C932 118200          10      LD  DE,DTA1+2
0102CC C935 CDFDE4          17      CALL    _COMANL
0102CF C938 30D8            12      JR  NC,COMMAND
0102D1 C93A 1179E4          10      LD  DE,COMERM
0102D4 C93D CD6CCD          17      CALL    _SYS09      ;(BDOS)文字列出力
0102D7 C940 C7              12      RST 0
                                
       C941                     COMANL:
0102D8 C941 CD5CD4          17      CALL    FILE
0102DB C944 3A19E4          13      LD  A,(FNAME+4)
0102DE C947 FE20             7      CP  020H
0102E0 C949 201C            12      JR  NZ,COMB2
0102E2 C94B D5              11      PUSH    DE
0102E3 C94C 1115E4          10      LD  DE,FNAME
0102E6 C94F 1A               7      LD  A,(DE)
0102E7 C950 FE20             7      CP  020H
0102E9 C952 2844            12      JR  Z,SDVSW
0102EB C954 1B               6      DEC DE
0102EC C955 1A               7      LD  A,(DE)
0102ED C956 C6FF             7      ADD A,0FFH
0102EF C958 3809            12      JR  C,COMB
0102F1 C95A 13               6      INC DE
                                
0102F2 C95B 210ACD          10      LD  HL,COMTB
0102F5 C95E 0608             7      LD  B,COMS
0102F7 C960 CDEBD6          17      CALL    CPNAME
       C963                     COMB:
0102FA C963 D1              10      POP DE
0102FB C964 D20F00          10      JP  NC,JP_HL
       C967                     COMB2:
0102FE C967 EB               4      EX  DE,HL
0102FF C968 2235CA          16      LD  (COMSWC),HL
010302 C96B F5              11      PUSH    AF
010303 C96C CDEDC9          17      CALL    CEXE4
010306 C96F F1              10      POP AF
010307 C970 2115E4          10      LD  HL,FNAME
01030A C973 116D00          10      LD  DE,FCB2+1   ;COMMAND NAME
01030D C976 010B00          10      LD  BC,11
010310 C979 EDB0                    LDIR
010312 C97B 11CBE2          10      LD  DE,PATHD
       C97E                     CEX1:
010315 C97E 1A               7      LD  A,(DE)
010316 C97F FE20             7      CP  020H
010318 C981 D8              11      RET C
010319 C982 CD51D4          17      CALL    FILEC
01031C C985 D5              11      PUSH    DE
01031D C986 216D00          10      LD  HL,FCB2+1   ;COMMAND NAME
010320 C989 1115E4          10      LD  DE,FNAME
010323 C98C 010B00          10      LD  BC,11
010326 C98F EDB0                    LDIR
010328 C991 CDEDC9          17      CALL    CEXE4
01032B C994 D1              10      POP DE
01032C C995 13               6      INC DE
01032D C996 18E6            12      JR  CEX1
                                
       C998                     SDVSW:
01032F C998 F1              10      POP AF
010330 C999 3A14E4          13      LD  A,(FDRV)
010333 C99C 3D               4      DEC A
010334 C99D 5F               4      LD  E,A
010335 C99E 0E0E             7      LD  C,00EH      ;(BDOS)カレントドライブの設定
010337 C9A0 1831            12      JR  SYSTEM0
                                
       C9A2                     OPEN1:
010339 C9A2 2114E4          10      LD  HL,FDRV
       C9A5                     OPEN:
01033C C9A5 0E11             7      LD  C,011H      ;(BDOS)ファイルの検索
       C9A7                     OPEN3:
01033E C9A7 D5              11      PUSH    DE
01033F C9A8 1107E3          10      LD  DE,DTA_CCP
010342 C9AB CDC9C9          17      CALL    SETDTA
010345 C9AE EB               4      EX  DE,HL
010346 C9AF CDD3C9          17      CALL    SYSTEM0
010349 C9B2 D1              10      POP DE
01034A C9B3 C9              10      RET
                                
       C9B4                     OPEN2:
01034B C9B4 0E12             7      LD  C,012H
01034D C9B6 18EF            12      JR  OPEN3
                                
       C9B8                     DEFCB:              ;Z=Ok NZ=Error
01034F C9B8 1107E3          10      LD  DE,DTA_CCP
010352 C9BB CDD1C9          17      CALL    SYSC0F
                                
010355 C9BE 1128E3          10      LD  DE,DTA_CCP+33   ;(FCB)ランダムレコード
010358 C9C1 0604             7      LD  B,4
01035A C9C3 CD1ECC          17      CALL    ZERO_MEMORY_DE
       C9C6                     SETDTA100:
01035D C9C6 110001          10      LD  DE,00100H
       C9C9                     SETDTA:
010360 C9C9 C33FCF          10      JP  _SYS1A      ;(BDOS)DTAの設定
                                
       C9CC                     SETDTA1:
010363 C9CC 118000          10      LD  DE,DTA1
010366 C9CF 18F8            12      JR  SETDTA
                                
       C9D1                     SYSC0F:
010368 C9D1 0E0F             7      LD  C,00FH      ;(BDOS)ファイルのオープン
       C9D3                     SYSTEM0:
01036A C9D3 CD0500          17      CALL    SYSTEM
01036D C9D6 B7               4      OR  A
01036E C9D7 C9              10      RET
                                
       C9D8                     C_CD:
01036F C9D8 0E5A             7      LD  C,05AH
010371 C9DA 18F7            12      JR  SYSTEM0
                                
       C9DC                     S27BUF:
010373 C9DC 2100FE          10      LD  HL,-00200H  ;スクラッチエリア(0100H)+スタック予備(0100H)
010376 C9DF 39              11      ADD HL,SP
010377 C9E0 2E00             7      LD  L,0
010379 C9E2 7C               4      LD  A,H
01037A C9E3 E6F8             7      AND 0F8H
01037C C9E5 67               4      LD  H,A
       C9E6                     S27DTA:
01037D C9E6 1107E3          10      LD  DE,DTA_CCP
       C9E9                     S27:
010380 C9E9 0E27             7      LD  C,027H      ;(BDOS)ランダムブロック読み込み
010382 C9EB 18E6            12      JR  SYSTEM0
                                
       C9ED                     CEXE4:
010384 C9ED 211DE4          10      LD  HL,FNAME+8
010387 C9F0 7E               7      LD  A,(HL)
010388 C9F1 FE20             7      CP  020H
01038A C9F3 2007            12      JR  NZ,CEXE7
01038C C9F5 3E3F             7      LD  A,'?'
01038E C9F7 77               7      LD  (HL),A
01038F C9F8 23               6      INC HL
010390 C9F9 77               7      LD  (HL),A
010391 C9FA 23               6      INC HL
010392 C9FB 77               7      LD  (HL),A
       C9FC                     CEXE7:
010393 C9FC CDA2C9          17      CALL    OPEN1
       C9FF                     CEXE5:
010396 C9FF C0              11      RET NZ
010397 CA00 2A11E3          16      LD  HL,(DTA_CCP+1+9)
01039A CA03 7C               4      LD  A,H
01039B CA04 CD73D7          17      CALL    CAP
01039E CA07 67               4      LD  H,A
01039F CA08 7D               4      LD  A,L
0103A0 CA09 CD73D7          17      CALL    CAP
0103A3 CA0C 6F               4      LD  L,A
0103A4 CA0D 3A10E3          13      LD  A,(DTA_CCP+1+8)
0103A7 CA10 CD73D7          17      CALL    CAP
0103AA CA13 D642             7      SUB 'B'
0103AC CA15 282C            12      JR  Z,C_BAT
0103AE CA17 3D               4      DEC A       ;'C'
0103AF CA18 2805            12      JR  Z,C_EXE
       CA1A                     CEXE6:
0103B1 CA1A CDB4C9          17      CALL    OPEN2
0103B4 CA1D 18E0            12      JR  CEXE5
                                
       CA1F                     C_EXE:
0103B6 CA1F 7C               4      LD  A,H
0103B7 CA20 FE4D             7      CP  'M'
0103B9 CA22 20F6            12      JR  NZ,CEXE6
                                
0103BB CA24 CDB8C9          17      CALL    DEFCB
0103BE CA27 CDDCC9          17      CALL    S27BUF
0103C1 CA2A 3D               4      DEC A
0103C2 CA2B 37               4      SCF
0103C3 CA2C C0              11      RET NZ
0103C4 CA2D 7C               4      LD  A,H
0103C5 CA2E B5               4      OR  L
0103C6 CA2F 37               4      SCF
0103C7 CA30 C8              11      RET Z
0103C8 CA31 CDCCC9          17      CALL    SETDTA1
0103CB CA34 110000          10      LD  DE,0                ; self-modifying code
       CA35                     COMSWC  EQU $-2
0103CE CA37 ED7B0600        20      LD  SP,(SYSTEM+1)
0103D2 CA3B 67               4      LD  H,A             ; A=0 in SETDTA1(_SYS1A)
0103D3 CA3C 6F               4      LD  L,A
0103D4 CA3D E5              11      PUSH    HL              ; push $0000 (reboot address)
0103D5 CA3E 24               4      INC H
0103D6 CA3F E5              11      PUSH    HL              ; push $0100 (TPA address)
0103D7 CA40 C3E9CB          10      JP  SETFCB              ; and JP $0100
                                
       CA43                     C_BAT:
0103DA CA43 114154          10      LD  DE,'A'+'T'*256
0103DD CA46 ED52            15      SBC HL,DE
0103DF CA48 20D0            12      JR  NZ,CEXE6
                                
0103E1 CA4A CDB8C9          17      CALL    DEFCB
                                
0103E4 CA4D 2107E3          10      LD  HL,DTA_CCP
0103E7 CA50 112CE3          10      LD  DE,FCB_BAT
0103EA CA53 012500          10      LD  BC,37
0103ED CA56 EDB0                    LDIR
       CA58                     C_BAT1:
0103EF CA58 CDC6C9          17      CALL    SETDTA100
0103F2 CA5B CD8FCA          17      CALL    FGETC_BAT
0103F5 CA5E 218100          10      LD  HL,DTA1+1
0103F8 CA61 2025            12      JR  NZ,END_BATCH
0103FA CA63 FE21             7      CP  021H        ;スペースや改行など制御文字を飛ばす
0103FC CA65 38F1            12      JR  C,C_BAT1
0103FE CA67 3620            10      LD  (HL),' '
010400 CA69 23               6      INC HL
       CA6A                     C_BAT2:
010401 CA6A 77               7      LD  (HL),A
010402 CA6B 23               6      INC HL
010403 CA6C 7D               4      LD  A,L
010404 CA6D 3C               4      INC A       ;L==0FFH
010405 CA6E 2809            12      JR  Z,RUN_BATCH
010407 CA70 CD8FCA          17      CALL    FGETC_BAT
01040A CA73 2004            12      JR  NZ,RUN_BATCH
01040C CA75 FE20             7      CP  020H
01040E CA77 30F1            12      JR  NC,C_BAT2
       CA79                     RUN_BATCH:
010410 CA79 7D               4      LD  A,L
010411 CA7A D67F             7      SUB DTA1-1
010413 CA7C 328000          13      LD  (DTA1),A
010416 CA7F FE04             7      CP  4
010418 CA81 3805            12      JR  C,END_BATCH
01041A CA83 3600            10      LD  (HL),0
01041C CA85 C332C9          10      JP  COMMAND2
       CA88                     END_BATCH:
01041F CA88 AF               4      XOR A       ;バッチファイルを閉じる
010420 CA89 322CE3          13      LD  (FCB_BAT),A
010423 CA8C C300E4          10      JP  CPM_BOOT
                                
       CA8F                     FGETC_BAT:
010426 CA8F 112CE3          10      LD  DE,FCB_BAT
       CA92                     FGETC:              ;1文字ずつ読み込む
010429 CA92 E5              11      PUSH    HL      ;Z:成功
01042A CA93 210100          10      LD  HL,1
01042D CA96 CDE9C9          17      CALL    S27
010430 CA99 E1              10      POP HL
010431 CA9A 3A0001          13      LD  A,(00100H)
010434 CA9D C9              10      RET
                                
       CA9E                     C_DEL:
010435 CA9E CDE9CB          17      CALL    SETFCB
010438 CAA1 CD3CD0          17      CALL    _SYS08      ;(BDOS)エコーなしコンソール入力
                                
01043B CAA4 0E13             7      LD  C,013H
01043D CAA6 180A            12      JR  CDEL1       ;(BDOS)ファイルの削除
                                
       CAA8                     C_REN:
01043F CAA8 CDE9CB          17      CALL    SETFCB
010442 CAAB 3E10             7      LD  A,010H      ;ディレクトリも対象にする
010444 CAAD 326900          13      LD  (FCB1+13),A ;属性
010447 CAB0 0E17             7      LD  C,017H      ;(BDOS)ファイル名の変更
       CAB2                     CDEL1:
010449 CAB2 115C00          10      LD  DE,FCB1
01044C CAB5 CD0500          17      CALL    SYSTEM
01044F CAB8 C6FF             7      ADD A,0FFH
010451 CABA C9              10      RET
                                
       CABB                     C_DIR:
010452 CABB CD51D4          17      CALL    FILEC
010455 CABE 2115E4          10      LD  HL,FDRV+1
010458 CAC1 CDFFCC          17      CALL    CWILD1
01045B CAC4 3EF1             7      LD  A,0F1H
01045D CAC6 3221E4          13      LD  (FDRV+13),A
010460 CAC9 CDA2C9          17      CALL    OPEN1
       CACC                     CDIR1:
010463 CACC B7               4      OR  A
010464 CACD 2008            12      JR  NZ,PDSKF
010466 CACF CD1ACB          17      CALL    P_NAME
010469 CAD2 CDB4C9          17      CALL    OPEN2
01046C CAD5 18F5            12      JR  CDIR1
       CAD7                     PDSKF:
01046E CAD7 3A14E4          13      LD  A,(FDRV)
010471 CADA 5F               4      LD  E,A
010472 CADB 0E1B             7      LD  C,01BH      ;(BDOS)ディスク情報の獲得
010474 CADD CD0500          17      CALL    SYSTEM
010477 CAE0 4F               4      LD  C,A     ;C←1クラスタ辺りの論理セクタ数
010478 CAE1 C601             7      ADD A,001H
01047A CAE3 D8              11      RET C       ;Aが0FFHだった場合
01047B CAE4 3E06             7      LD  A,8-2
       CAE6                     PDS1:               ;HL=未使用クラスタの総数
01047D CAE6 3C               4      INC A
01047E CAE7 CB19             8      RR  C
010480 CAE9 30FB            12      JR  NC,PDS1
       CAEB                     PDS2:               ;B←論理セクタのサイズの上位8ビット
010482 CAEB 3C               4      INC A
010483 CAEC CB18             8      RR  B
010485 CAEE 30FB            12      JR  NC,PDS2
010487 CAF0 47               4      LD  B,A
                                
010488 CAF1 110000          10      LD  DE,0
       CAF4                     PDS3:
01048B CAF4 29              11      ADD HL,HL
01048C CAF5 EB               4      EX  DE,HL
01048D CAF6 ED6A            15      ADC HL,HL
01048F CAF8 EB               4      EX  DE,HL
010490 CAF9 10F9            13      DJNZ    PDS3
       CAFB                     PDSKF1:
010492 CAFB CD87CB          17      CALL    PRDEC_DEHL
010495 CAFE 115CE3          10      LD  DE,FREE
010498 CB01 CD6CCD          17      CALL    _SYS09      ;(BDOS)文字列出力
01049B CB04 CD74CB          17      CALL    PUTDRV
01049E CB07 3E5C             7      LD  A,05CH      ;\
0104A0 CB09 CD01D0          17      CALL    MSG_A
0104A3 CB0C 2A22E4          16      LD  HL,(FDRV+14)    ;ディレクトリのクラスタ番号
0104A6 CB0F AF               4      XOR A
0104A7 CB10 11FEFF          10      LD  DE,0-2
0104AA CB13 19              11      ADD HL,DE
0104AB CB14 23               6      INC HL
0104AC CB15 DC84CB          17      CALL    C,PRDEC_HL
0104AF CB18 1833            12      JR  LTNL
                                
       CB1A                     P_NAME:
0104B1 CB1A 3A08E3          13      LD  A,(DTA_CCP+1)
0104B4 CB1D FE2E             7      CP  '.'
0104B6 CB1F C8              11      RET Z
                                
0104B7 CB20 3A13E3          13      LD  A,(DTA_CCP+1+00BH)
0104BA CB23 F5              11      PUSH    AF
0104BB CB24 CB67             8      BIT 4,A
0104BD CB26 2808            12      JR  Z,DIR3
0104BF CB28 1151E3          10      LD  DE,DIRMES
0104C2 CB2B CD6CCD          17      CALL    _SYS09      ;(BDOS)文字列出力
0104C5 CB2E 180A            12      JR  DIR6
       CB30                     DIR3:
0104C7 CB30 ED5B26E3        20      LD  DE,(DTA_CCP+1+01EH)
0104CB CB34 2A24E3          16      LD  HL,(DTA_CCP+1+01CH)
0104CE CB37 CD87CB          17      CALL    PRDEC_DEHL
       CB3A                     DIR6:
0104D1 CB3A F1              10      POP AF
0104D2 CB3B 0F               4      RRCA
0104D3 CB3C 9F               4      SBC A,A
0104D4 CB3D E60A             7      AND '*'-020H
0104D6 CB3F C620             7      ADD A,020H
0104D8 CB41 CD01D0          17      CALL    MSG_A
0104DB CB44 CD74CB          17      CALL    PUTDRV
0104DE CB47 2108E3          10      LD  HL,DTA_CCP+1
0104E1 CB4A CDC7CB          17      CALL    FPRNT
                                
       CB4D                     LTNL:
0104E4 CB4D 1E03             7      LD  E,3
0104E6 CB4F C3CDE4          10      JP  _PRINT
                                
       CB52                     C_PATH:
0104E9 CB52 CD33D5          17      CALL    SPCUT
0104EC CB55 21CBE2          10      LD  HL,PATHD
0104EF CB58 FE21             7      CP  021H
0104F1 CB5A 300C            12      JR  NC,CPATH0
       CB5C                     CPATHP:
0104F3 CB5C 7E               7      LD  A,(HL)
0104F4 CB5D 23               6      INC HL
0104F5 CB5E FE20             7      CP  020H
0104F7 CB60 3F               4      CCF
0104F8 CB61 30EA            12      JR  NC,LTNL
0104FA CB63 CD01D0          17      CALL    MSG_A
0104FD CB66 18F4            12      JR  CPATHP
       CB68                     CPATH0:
0104FF CB68 FE3B             7      CP  ';'
010501 CB6A 2001            12      JR  NZ,CPATH1
010503 CB6C 13               6      INC DE
       CB6D                     CPATH1:
010504 CB6D EB               4      EX  DE,HL
010505 CB6E 013B00          10      LD  BC,PATHX
010508 CB71 EDB0                    LDIR
01050A CB73 C9              10      RET
                                
       CB74                     PUTDRV:
01050B CB74 3A14E4          13      LD  A,(FDRV)
01050E CB77 CD66D5          17      CALL    GETDRV1
010511 CB7A C641             7      ADD A,'A'
010513 CB7C CD01D0          17      CALL    MSG_A
010516 CB7F 3E3A             7      LD  A,':'
       CB81                     MSG_AR:
010518 CB81 C301D0          10      JP  MSG_A
                                
       CB84                     PRDEC_HL:
01051B CB84 AF               4      XOR A
01051C CB85 5F               4      LD  E,A
01051D CB86 57               4      LD  D,A
       CB87                     PRDEC_DEHL:
01051E CB87 D5              11      PUSH    DE
01051F CB88 110FE4          10      LD  DE,DECBF
010522 CB8B 0605             7      LD  B,5
010524 CB8D CD1ECC          17      CALL    ZERO_MEMORY_DE  ;A=0
010527 CB90 D1              10      POP DE
                                
010528 CB91 0E20             7      LD  C,32
       CB93                     DEC1:
01052A CB93 29              11      ADD HL,HL
01052B CB94 EB               4      EX  DE,HL
01052C CB95 ED6A            15      ADC HL,HL
01052E CB97 EB               4      EX  DE,HL
01052F CB98 E5              11      PUSH    HL
010530 CB99 2113E4          10      LD  HL,DECBF+4
010533 CB9C 0605             7      LD  B,5
       CB9E                     DEC2:
010535 CB9E 7E               7      LD  A,(HL)
010536 CB9F 8F               4      ADC A,A
010537 CBA0 27               4      DAA
010538 CBA1 77               7      LD  (HL),A
010539 CBA2 2B               6      DEC HL
01053A CBA3 10F9            13      DJNZ    DEC2
01053C CBA5 E1              10      POP HL
01053D CBA6 0D               4      DEC C
01053E CBA7 20EA            12      JR  NZ,DEC1
                                
010540 CBA9 210FE4          10      LD  HL,DECBF
010543 CBAC 3E20             7      LD  A,020H
010545 CBAE 0604             7      LD  B,4
       CBB0                     DEC3:
010547 CBB0 CDBDCB          17      CALL    DEC4
01054A CBB3 CDBDCB          17      CALL    DEC4
01054D CBB6 23               6      INC HL
01054E CBB7 10F7            13      DJNZ    DEC3
       CBB9                     DECX:
010550 CBB9 CDBDCB          17      CALL    DEC4
010553 CBBC AF               4      XOR A
       CBBD                     DEC4:
010554 CBBD ED6F            18      RLD
010556 CBBF FE20             7      CP  020H
010558 CBC1 2802            12      JR  Z,DEC5
01055A CBC3 F630             7      OR  030H
       CBC5                     DEC5:
01055C CBC5 18BA            12      JR  MSG_AR
                                
       CBC7                     FPRNT:
01055E CBC7 0608             7      LD  B,8 ;ファイル名を表示
010560 CBC9 CDD8CB          17      CALL    P_N1
010563 CBCC 7E               7      LD  A,(HL)
010564 CBCD CD7FD7          17      CALL    CAP3
010567 CBD0 D8              11      RET C   ;拡張子が無い
                                
010568 CBD1 3E2E             7      LD  A,'.'
01056A CBD3 CD01D0          17      CALL    MSG_A
01056D CBD6 0603             7      LD  B,3 ;拡張子を表示
       CBD8                     P_N1:
01056F CBD8 7E               7      LD  A,(HL)
010570 CBD9 CD7FD7          17      CALL    CAP3
010573 CBDC 3807            12      JR  C,P_N2
010575 CBDE CD01D0          17      CALL    MSG_A
010578 CBE1 23               6      INC HL
010579 CBE2 10F4            13      DJNZ    P_N1
01057B CBE4 C9              10      RET
       CBE5                     P_N2:
01057C CBE5 23               6      INC HL
01057D CBE6 10FD            13      DJNZ    P_N2
01057F CBE8 C9              10      RET
                                
       CBE9                     SETFCB:
010580 CBE9 CD33D5          17      CALL    SPCUT
010583 CBEC 1A               7      LD  A,(DE)
010584 CBED FE20             7      CP  020H
010586 CBEF 3801            12      JR  C,SETFCBA
010588 CBF1 1B               6      DEC DE
       CBF2                     SETFCBA:
010589 CBF2 0624             7      LD  B,36
01058B CBF4 215C00          10      LD  HL,FCB1
01058E CBF7 E5              11      PUSH    HL
01058F CBF8 AF               4      XOR A
010590 CBF9 CD08D5          17      CALL    FILL_MEMORY
010593 CBFC E1              10      POP HL
010594 CBFD D5              11      PUSH    DE
010595 CBFE CDA5CF          17      CALL    _SYS29      ;(BDOS)ファイル名の解析
010598 CC01 216C00          10      LD  HL,FCB2
01059B CC04 CDA5CF          17      CALL    _SYS29      ;(BDOS)ファイル名の解析
01059E CC07 E1              10      POP HL
01059F CC08 010050          10      LD  BC,05000H
0105A2 CC0B 118100          10      LD  DE,00081H
       CC0E                     SETFCB1:
0105A5 CC0E 7E               7      LD  A,(HL)
0105A6 CC0F 23               6      INC HL
0105A7 CC10 FE20             7      CP  020H
0105A9 CC12 3805            12      JR  C,SETFCB2
0105AB CC14 12               7      LD  (DE),A
0105AC CC15 13               6      INC DE
0105AD CC16 0C               4      INC C
0105AE CC17 10F5            13      DJNZ    SETFCB1
       CC19                     SETFCB2:
0105B0 CC19 79               4      LD  A,C
0105B1 CC1A 328000          13      LD  (DTA1),A
0105B4 CC1D 04               4      INC B
       CC1E                     ZERO_MEMORY_DE:
0105B5 CC1E AF               4      XOR A
       CC1F                     FILL_MEMORY_DE:
0105B6 CC1F 12               7      LD  (DE),A
0105B7 CC20 13               6      INC DE
0105B8 CC21 10FC            13      DJNZ    FILL_MEMORY_DE
0105BA CC23 C9              10      RET
                                
       CC24                     C_COPY:
0105BB CC24 CDE9CB          17      CALL    SETFCB
                                
0105BE CC27 1161E4          10      LD  DE,ZERO
0105C1 CC2A CD54D4          17      CALL    FILEC2
0105C4 CC2D 216C00          10      LD  HL,FCB2
0105C7 CC30 CDACCF          17      CALL    S29X1
                                
0105CA CC33 3E10             7      LD  A,010H
0105CC CC35 326900          13      LD  (FCB1+13),A
0105CF CC38 216D00          10      LD  HL,FCB2+1
0105D2 CC3B CDFFCC          17      CALL    CWILD1
       CC3E                     COPY0:
0105D5 CC3E CDFCCC          17      CALL    CWILD
0105D8 CC41 215C00          10      LD  HL,FCB1
0105DB CC44 CDA5C9          17      CALL    OPEN
0105DE CC47 37               4      SCF
       CC48                     COPY1:
0105DF CC48 C0              11      RET NZ
0105E0 CC49 CDB8C9          17      CALL    DEFCB
                                
0105E3 CC4C 3A14E3          13      LD  A,(DTA_CCP+13)
0105E6 CC4F CB67             8      BIT 4,A
0105E8 CC51 2821            12      JR  Z,COPY1A
                                
0105EA CC53 215D00          10      LD  HL,FCB1+1
0105ED CC56 CD97D8          17      CALL    CHKWILD
0105F0 CC59 3814            12      JR  C,COPY9
                                
0105F2 CC5B 3E20             7      LD  A,020H
0105F4 CC5D 325D00          13      LD  (FCB1+1),A
0105F7 CC60 2A21E3          16      LD  HL,(DTA_CCP+26)
0105FA CC63 23               6      INC HL
0105FB CC64 226A00          16      LD  (FCB1+14),HL
0105FE CC67 18D5            12      JR  COPY0
                                
       CC69                     COPY8:
010600 CC69 CD6CCD          17      CALL    _SYS09      ;(BDOS)文字列出力
010603 CC6C CD4DCB          17      CALL    LTNL
       CC6F                     COPY9:
010606 CC6F CDB4C9          17      CALL    OPEN2
010609 CC72 18D4            12      JR  COPY1
                                
       CC74                     COPY1A:
01060B CC74 216C00          10      LD  HL,FCB2
01060E CC77 1114E4          10      LD  DE,FDRV
010611 CC7A 0109E3          10      LD  BC,DTA_CCP+2
010614 CC7D EDA0            16      LDI
010616 CC7F 3E0B             7      LD  A,11
       CC81                     COPY2:
010618 CC81 F5              11      PUSH    AF
010619 CC82 7E               7      LD  A,(HL)
01061A CC83 FE3F             7      CP  '?'
01061C CC85 2001            12      JR  NZ,COPY3
01061E CC87 0A               7      LD  A,(BC)
       CC88                     COPY3:
01061F CC88 12               7      LD  (DE),A
010620 CC89 03               6      INC BC
010621 CC8A 13               6      INC DE
010622 CC8B 23               6      INC HL
010623 CC8C F1              10      POP AF
010624 CC8D 3D               4      DEC A
010625 CC8E 20F1            12      JR  NZ,COPY2
010627 CC90 010500          10      LD  BC,16-11
01062A CC93 EDB0                    LDIR
       CC95                     PUTNAME:
01062C CC95 215D00          10      LD  HL,FCB1+1
01062F CC98 CD97D8          17      CALL    CHKWILD
010632 CC9B 300B            12      JR  NC,PUTN1
010634 CC9D 2115E4          10      LD  HL,FDRV+1
010637 CCA0 CDC7CB          17      CALL    FPRNT
01063A CCA3 3E20             7      LD  A,020H
01063C CCA5 CD01D0          17      CALL    MSG_A
       CCA8                     PUTN1:
01063F CCA8 1114E4          10      LD  DE,FDRV
010642 CCAB 0E16             7      LD  C,016H      ;(BDOS)ファイルの作成
010644 CCAD CDD3C9          17      CALL    SYSTEM0
010647 CCB0 2048            12      JR  NZ,COPYE2
010649 CCB2 67               4      LD  H,A     ;A=0
01064A CCB3 6F               4      LD  L,A
01064B CCB4 2235E4          16      LD  (FDRV+33),HL    ;(FCB)ランダムレコード
01064E CCB7 2237E4          16      LD  (FDRV+35),HL
       CCBA                     COPY6:
010651 CCBA CDDCC9          17      CALL    S27BUF
010654 CCBD 47               4      LD  B,A
010655 CCBE 3C               4      INC A
010656 CCBF 2831            12      JR  Z,COPYE
010658 CCC1 7C               4      LD  A,H
010659 CCC2 B5               4      OR  L
01065A CCC3 280C            12      JR  Z,COPY7
01065C CCC5 1114E4          10      LD  DE,FDRV
01065F CCC8 0E26             7      LD  C,026H      ;(BDOS)ランダムブロック書き込み
010661 CCCA CDD3C9          17      CALL    SYSTEM0
010664 CCCD 2023            12      JR  NZ,COPYE
010666 CCCF 10E9            13      DJNZ    COPY6
       CCD1                     COPY7:
010668 CCD1 3A14E3          13      LD  A,(DTA_CCP+13)  ;(FCB)属性
01066B CCD4 3221E4          13      LD  (FDRV+13),A
01066E CCD7 211BE3          10      LD  HL,DTA_CCP+20   ;(FCB)タイムスタンプ
010671 CCDA 1128E4          10      LD  DE,FDRV+20
010674 CCDD 010400          10      LD  BC,4
010677 CCE0 EDB0                    LDIR
                                
010679 CCE2 1114E4          10      LD  DE,FDRV
01067C CCE5 0E10             7      LD  C,010H      ;(BDOS)ファイルのクローズ
01067E CCE7 CDD3C9          17      CALL    SYSTEM0
010681 CCEA 2006            12      JR  NZ,COPYE
                                
010683 CCEC 1171E4          10      LD  DE,OK
010686 CCEF C369CC          10      JP  COPY8
                                
       CCF2                     COPYE:
010689 CCF2 1114E4          10      LD  DE,FDRV
01068C CCF5 0E13             7      LD  C,013H      ;(BDOS)ファイルの削除
01068E CCF7 CD0500          17      CALL    SYSTEM
       CCFA                     COPYE2:
010691 CCFA 37               4      SCF
010692 CCFB C9              10      RET
                                
       CCFC                     CWILD:
010693 CCFC 215D00          10      LD  HL,FCB1+1
       CCFF                     CWILD1:
010696 CCFF 7E               7      LD  A,(HL)
010697 CD00 FE20             7      CP  020H
010699 CD02 C0              11      RET NZ
       CD03                     CWILD2:
01069A CD03 3E3F             7      LD  A,'?'
01069C CD05 060B             7      LD  B,11
01069E CD07 C308D5          10      JP  FILL_MEMORY
                                
       CD0A                     COMTB:
0106A1 CD0A 44202020                DB  "D   "  ;1
0106A5 CD0E BBCA                    DW  C_DIR
0106A7 CD10 44495220                DB  "DIR "  ;2
0106AB CD14 BBCA                    DW  C_DIR
0106AD CD16 434F5059                DB  "COPY"  ;3
0106B1 CD1A 24CC                    DW  C_COPY
0106B3 CD1C 43442020                DB  "CD  "  ;4
0106B7 CD20 D8C9                    DW  C_CD
0106B9 CD22 44454C20                DB  "DEL "  ;5
0106BD CD26 9ECA                    DW  C_DEL
0106BF CD28 50415448                DB  "PATH"  ;6
0106C3 CD2C 52CB                    DW  C_PATH
0106C5 CD2E 52454E20                DB  "REN "  ;7
0106C9 CD32 A8CA                    DW  C_REN
0106CB CD34 52454D20                DB  "REM "  ;8
0106CF CD38 69CD                    DW  C_REM
[EOF:LDCCP.ASM:SHIFT_JIS]
                                    INCLUDE "LDOS.ASM"
                                
                                ;   LSX-Dodgers OS
                                
       CD3A                     BDOS0:
0106D1 CD3A E5              11      PUSH    HL
0106D2 CD3B 79               4      LD  A,C
0106D3 CD3C FE3C             7      CP  03CH
0106D5 CD3E 3802            12      JR  C,DOS1
0106D7 CD40 3E3C             7      LD  A,03CH
       CD42                     DOS1:
0106D9 CD42 87               4      ADD A,A
0106DA CD43 6F               4      LD  L,A
0106DB CD44 26E5             7      LD  H,STABLE/256
0106DD CD46 7E               7      LD  A,(HL)
0106DE CD47 2C               4      INC L
0106DF CD48 66               7      LD  H,(HL)
0106E0 CD49 6F               4      LD  L,A
0106E1 CD4A E3              19      EX  (SP),HL
0106E2 CD4B 79               4      LD  A,C
                                ;確認用
                                ;   LD  (0050H),A
0106E3 CD4C C9              10      RET
       CD4D                     _DOS2:
0106E4 CD4D FE5A             7      CP  05AH        ;(BDOS)カレントディレクトリの変更(_CHDIR)
0106E6 CD4F CAE7CF          10      JP  Z,_SYS5A
0106E9 CD52 FE5C             7      CP  05CH        ;(BDOS)ファイル名の解析(_PFILE)
0106EB CD54 CAA5CF          10      JP  Z,_SYS29
0106EE CD57 FE5F             7      CP  05FH        ;(BDOS)ディスクバッファのフラッシュ(_FLUSH)
0106F0 CD59 CA93E1          10      JP  Z,_SYS5F
0106F3 CD5C FE6F             7      CP  06FH        ;(BDOS)MSX-DOS のバージョン番号の獲得(_DOSVER)
0106F5 CD5E 200A            12      JR  NZ,_ERROR
0106F7 CD60 011D00          10      LD  BC,VER_6F
0106FA CD63 116001          10      LD  DE,VER
0106FD CD66 210301          10      LD  HL,MACD
       CD69                     C_REM:
010700 CD69 AF               4      XOR A
       CD6A                     _ERROR:
010701 CD6A A7               4      AND A
010702 CD6B C9              10      RET
                                
       CD6C                     _SYS09:     ;文字列出力
010703 CD6C D5              11      PUSH    DE
       CD6D                     _SX09:
010704 CD6D 1A               7      LD  A,(DE)
010705 CD6E 13               6      INC DE
010706 CD6F FE24             7      CP  '$'
010708 CD71 2831            12      JR  Z,SX0E2
01070A CD73 CD01D0          17      CALL    MSG_A
01070D CD76 18F5            12      JR  _SX09
                                
       CD78                     MSX1:
01070F CD78 CD01D0          17      CALL    MSG_A
       CD7B                     MSX:
010712 CD7B 7E               7      LD  A,(HL)
010713 CD7C 23               6      INC HL
010714 CD7D B7               4      OR  A
010715 CD7E 20F8            12      JR  NZ,MSX1
010717 CD80 C9              10      RET
                                
       CD81                     _SYS0C:     ;(BDOS)バージョン番号の獲得
010718 CD81 212200          10      LD  HL,00022H
01071B CD84 7D               4      LD  A,L
01071C CD85 C9              10      RET
                                
       CD86                     _SYS0D:     ;(BDOS)ディスクリセット
01071D CD86 CDDFE4          17      CALL    _FFLUSH
010720 CD89 E5              11      PUSH    HL
010721 CD8A 218000          10      LD  HL,00080H
010724 CD8D 228AE4          16      LD  (_DTA),HL
010727 CD90 E1              10      POP HL
010728 CD91 D5              11      PUSH    DE
010729 CD92 1E00             7      LD  E,0
01072B CD94 3E                      DB  03EH    ;次の PUSH DE をスキップ
                                
       CD95                     _SYS0E:     ;(BDOS)カレントドライブの設定
01072C CD95 D5              11      PUSH    DE
01072D CD96 7B               4      LD  A,E
01072E CD97 DDE5            15      PUSH    IX
010730 CD99 CDDCE4          17      CALL    _GETDPB
010733 CD9C DDE1            14      POP IX
010735 CD9E 3804            12      JR  C,SX0E2
010737 CDA0 7B               4      LD  A,E
010738 CDA1 3287E4          13      LD  (_DVSW),A
       CDA4                     SX0E2:
01073B CDA4 D1              10      POP DE
01073C CDA5 C9              10      RET
                                
       CDA6                     _SYS0F:     ;(BDOS)ファイルのオープン
01073D CDA6 CD45D5          17      CALL    SETDRV
010740 CDA9 FD7E1C          19      LD  A,(IY+28)   ;(FCB)オープンモード
010743 CDAC C602             7      ADD A,002H      ;Write
010745 CDAE 2848            12      JR  Z,FEND0F
010747 CDB0 CD93D8          17      CALL    CHKWILDX
                                
01074A CDB3 D46FD5          17      CALL    NC,SOPENX
       CDB6                     _S16XX:
01074D CDB6 3840            12      JR  C,FEND0F
                                                ;Directory location
01074F CDB8 3A9FE4          13      LD  A,(_FILEN)
010752 CDBB FD7719          19      LD  (IY+25),A   ;(FCB)ディレクトリロケーション
                                ;               _DIRF
010755 CDBE 3AA0E4          13      LD  A,(_DIRF)
010758 CDC1 FD771D          19      LD  (IY+29),A   ;(FCB)ディレクトリモード
                                ;               _FBPS
01075B CDC4 FD731E          19      LD  (IY+30),E   ;(FCB)ディレクトリポジション
01075E CDC7 FD721F          19      LD  (IY+31),D
                                ;               Open(Read)
010761 CDCA FD361CFF        19      LD  (IY+28),0FFH    ;(FCB)オープンモード
                                ;               FILENAME
010765 CDCE FDE5            15      PUSH    IY
010767 CDD0 D1              10      POP DE
010768 CDD1 13               6      INC DE
010769 CDD2 010B00          10      LD  BC,11
01076C CDD5 EDB0                    LDIR
                                ;               Attribute
01076E CDD7 7E               7      LD  A,(HL)
01076F CDD8 FD770D          19      LD  (IY+13),A   ;(FCB)属性(アトリビュート)
010772 CDDB 110B00          10      LD  DE,11       ;Reserved
010775 CDDE 19              11      ADD HL,DE
                                                    ;(FCB)ファイルを最後に変更した時刻
010776 CDDF 11E4E5          10      LD  DE,SDDATA       ;(FCB)ファイルを最後に変更した日付
010779 CDE2 060A             7      LD  B,SDDATAE-SDDATA    ;(FCB)ファイルの先頭クラスタ
       CDE4                     S16LOOP:                ;(FCB)ファイルのサイズ(バイト単位)
01077B CDE4 1A               7      LD  A,(DE)
01077C CDE5 13               6      INC DE
01077D CDE6 32EDCD          13      LD  (S16PAT),A
010780 CDE9 7E               7      LD  A,(HL)
010781 CDEA 23               6      INC HL
010782 CDEB FD7700          19      LD  (IY+0),A
       CDED                     S16PAT  EQU $-1
010785 CDEE 10F4            13      DJNZ    S16LOOP
                                
010787 CDF0 AF               4      XOR A
010788 CDF1 FD770C          19      LD  (IY+12),A   ;(FCB)カレントブロック
01078B CDF4 FD2295CE        20      LD  (OFCB_SWC),IY
       CDF8                     FEND0F:
01078F CDF8 1845            12      JR  FEND10
                                
       CDFA                     _SYS10:     ;(BDOS)ファイルのクローズ
010791 CDFA CD45D5          17      CALL    SETDRV
010794 CDFD FD7E1C          19      LD  A,(IY+28)   ;(FCB)オープンモード
010797 CE00 D6FE             7      SUB 0FEH
010799 CE02 37               4      SCF
01079A CE03 3F               4      CCF
01079B CE04 2039            12      JR  NZ,FEND10
       CE06                     _S10A:              ;Write
01079D CE06 FD770E          19      LD  (IY+14),A   ;(FCB)レコードサイズ/アクセスするディレクトリのクラスタ番号+1
0107A0 CE09 FD770F          19      LD  (IY+15),A
                                
0107A3 CE0C FD341C          23      INC (IY+28)     ;(FCB)オープンモード 0FEH->0FFH
0107A6 CE0F CD8FD9          17      CALL    SETTMS
                                
0107A9 CE12 FD7E1D          19      LD  A,(IY+29)   ;(FCB)ディレクトリモード
0107AC CE15 32A0E4          13      LD  (_DIRF),A
0107AF CE18 E67F             7      AND 07FH
0107B1 CE1A 32BADE          13      LD  (_SECPS),A
0107B4 CE1D FD5E1E          19      LD  E,(IY+30)   ;(FCB)ディレクトリポジション
0107B7 CE20 FD561F          19      LD  D,(IY+31)
0107BA CE23 CDA4D6          17      CALL    READ_DIR
0107BD CE26 3817            12      JR  C,FEND10
                                
0107BF CE28 3ACFD5          13  SDECM1: LD  A,(SDECPAT) ;1セクタ辺りのディレクトリエントリ数
0107C2 CE2B 3D               4      DEC A       ;1024=01FH / 512=00FH / 256=7
0107C3 CE2C FDA619          19      AND (IY+25)     ;(FCB)ディレクトリロケーション
0107C6 CE2F 6F               4      LD  L,A
0107C7 CE30 2600             7      LD  H,0
0107C9 CE32 29              11      ADD HL,HL       ;*2
0107CA CE33 29              11      ADD HL,HL       ;*4
0107CB CE34 29              11      ADD HL,HL       ;*8
0107CC CE35 29              11      ADD HL,HL       ;*16
0107CD CE36 29              11      ADD HL,HL       ;*32
0107CE CE37 ED4B7EE5        20      LD  BC,(_DTBUF)
0107D2 CE3B 09              11      ADD HL,BC
                                
0107D3 CE3C CDA3D8          17      CALL    SDIRENT
       CE3F                     FEND10:
0107D6 CE3F 1842            12      JR  FEND
                                
       CE41                     _SYS11:     ;(BDOS)最初のファイルの検索
0107D8 CE41 CD45D5          17      CALL    SETDRV
0107DB CE44 CD9ED5          17      CALL    SOPEN
       CE47                     _S12X1:
0107DE CE47 383A            12      JR  C,FEND
0107E0 CE49 CD3DD6          17      CALL    SOPENE2
0107E3 CE4C ED5B8AE4        20      LD  DE,(_DTA)
0107E7 CE50 3A88E4          13      LD  A,(_DRV)
0107EA CE53 3C               4      INC A
0107EB CE54 12               7      LD  (DE),A
0107EC CE55 D5              11      PUSH    DE
0107ED CE56 13               6      INC DE
0107EE CE57 012000          10      LD  BC,32
0107F1 CE5A EDB0                    LDIR
0107F3 CE5C FD6E0E          19      LD  L,(IY+14)   ;(FCB)レコードサイズ/アクセスするディレクトリのクラスタ番号+1
0107F6 CE5F FD660F          19      LD  H,(IY+15)
0107F9 CE62 22F4E5          16      LD  (SCDIR),HL
0107FC CE65 2A9AE4          16      LD  HL,(_FBPS)
0107FF CE68 22F6E5          16      LD  (SFBPS),HL
010802 CE6B 2A9FE4          16      LD  HL,(_FILEN)
010805 CE6E 7C               4      LD  A,H
010806 CE6F B7               4      OR  A
010807 CE70 2806            12      JR  Z,_S12DIR
010809 CE72 3ABADE          13      LD  A,(_SECPS)
01080C CE75 F680             7      OR  080H
01080E CE77 67               4      LD  H,A
       CE78                     _S12DIR:
01080F CE78 22F8E5          16      LD  (SFNDF),HL  ;Directory position and Flags
010812 CE7B E1              10      POP HL
010813 CE7C 1139E4          10      LD  DE,SFILE
010816 CE7F 0E21             7      LD  C,33
       CE81                     _S11B:
010818 CE81 EDB0                    LDIR
       CE83                     FEND:
01081A CE83 9F               4      SBC A,A     ;CF=0 A=0 : CF=1 A=0FFH
       CE84                     FENDE:
01081B CE84 FDE1            14      POP IY
01081D CE86 C1              10      POP BC
01081E CE87 D1              10      POP DE
01081F CE88 E1              10      POP HL
010820 CE89 C9              10      RET
                                
       CE8A                     _SYS12:     ;(BDOS)次のファイルの検索
010821 CE8A E5              11      PUSH    HL
010822 CE8B D5              11      PUSH    DE
010823 CE8C C5              11      PUSH    BC
010824 CE8D FDE5            15      PUSH    IY
010826 CE8F CD02D6          17      CALL    NOPEN
010829 CE92 18B3            12      JR  _S12X1
                                
       CE94                     _S16K:
01082B CE94 110000          10      LD  DE,0
       CE95                     OFCB_SWC    EQU $-2
01082E CE97 D5              11      PUSH    DE
01082F CE98 061A             7      LD  B,26        ;First cluster
       CE9A                     S16K1:
010831 CE9A 13               6      INC DE
010832 CE9B 23               6      INC HL
010833 CE9C 10FC            13      DJNZ    S16K1
                                
010835 CE9E 1A               7      LD  A,(DE)
010836 CE9F BE               7      CP  (HL)
010837 CEA0 2015            12      JR  NZ,S16K2
010839 CEA2 13               6      INC DE
01083A CEA3 23               6      INC HL
01083B CEA4 1A               7      LD  A,(DE)
01083C CEA5 BE               7      CP  (HL)
01083D CEA6 200F            12      JR  NZ,S16K2
                                
01083F CEA8 E1              10      POP HL
010840 CEA9 FDE5            15      PUSH    IY
010842 CEAB D1              10      POP DE
010843 CEAC 7E               7      LD  A,(HL)
010844 CEAD CD5AD5          17      CALL    IS_SAME_DRV_A_DE
010847 CEB0 2006            12      JR  NZ,S16K3
                                                ;ここはCFが必ず0
010849 CEB2 ED52            15      SBC HL,DE       ;CP HL,DE
01084B CEB4 37               4      SCF
01084C CEB5 C0              11      RET NZ
01084D CEB6 E5              11      PUSH    HL
       CEB7                     S16K2:
01084E CEB7 E1              10      POP HL
       CEB8                     S16K3:
01084F CEB8 FDE5            15      PUSH    IY
010851 CEBA D1              10      POP DE
       CEBB                     _SYS13:     ;(BDOS)ファイルの削除
010852 CEBB CD45D5          17      CALL    SETDRV
010855 CEBE CDC9D7          17      CALL    KILL
       CEC1                     FEND13:
010858 CEC1 18C0            12      JR  FEND
                                
       CEC3                     _SYS14:     ;(BDOS)シーケンシャルな読み出し
01085A CEC3 CD45D5          17      CALL    SETDRV
01085D CEC6 CDFBD9          17      CALL    INIT_SEQ
       CEC9                     SREAD:
010860 CEC9 CD43DA          17      CALL    RB_READ
                                
010863 CECC C601             7      ADD A,001H
010865 CECE 38B3            12      JR  C,FEND
                                
010867 CED0 7D               4      LD  A,L
010868 CED1 D601             7      SUB 001H
       CED3                     FENDX:
01086A CED3 9F               4      SBC A,A
01086B CED4 E603             7      AND 3
01086D CED6 1F               4      RRA
01086E CED7 18AB            12      JR  FENDE
                                
       CED9                     _SYS15:     ;(BDOS)シーケンシャルな書き込み
010870 CED9 CD45D5          17      CALL    SETDRV
010873 CEDC CDFBD9          17      CALL    INIT_SEQ
       CEDF                     SWRITE:
010876 CEDF CD3CDA          17      CALL    RB_WRITE
                                
010879 CEE2 C6FF             7      ADD A,0FFH
01087B CEE4 18ED            12      JR  FENDX
                                
       CEE6                     _SYS17:     ;(BDOS)ファイル名の変更
01087D CEE6 CD45D5          17      CALL    SETDRV
010880 CEE9 CD1FD8          17      CALL    NAME
010883 CEEC 18D3            12      JR  FEND13
                                
       CEEE                     _SYS16:     ;(BDOS)ファイルの作成
010885 CEEE CD45D5          17      CALL    SETDRV
                                
010888 CEF1 CD93D8          17      CALL    CHKWILDX
01088B CEF4 38CB            12      JR  C,FEND13
01088D CEF6 FD7E01          19      LD  A,(IY+1)    ;(FCB)主ファイル名
010890 CEF9 FE05             7      CP  5
010892 CEFB 2805            12      JR  Z,_S16X2
010894 CEFD FE21             7      CP  021H
010896 CEFF DAC1CE          10      JP  C,FEND13
       CF02                     _S16X2:
                                ;               Clear FCB
010899 CF02 FDE5            15      PUSH    IY
01089B CF04 E1              10      POP HL
01089C CF05 011000          10      LD  BC,16
01089F CF08 09              11      ADD HL,BC
       CF09                     _S16X1:
0108A0 CF09 70               7      LD  (HL),B      ;B=0
0108A1 CF0A 23               6      INC HL
0108A2 CF0B 0D               4      DEC C
0108A3 CF0C 20FB            12      JR  NZ,_S16X1
                                
0108A5 CF0E CD94D9          17      CALL    SETTMSX
0108A8 CF11 FD360DFF        19      LD  (IY+13),0FFH    ;(FCB)Attribute
0108AC CF15 CD6FD5          17      CALL    SOPENX
0108AF CF18 3F               4      CCF
0108B0 CF19 CC94CE          17      CALL    Z,_S16K
0108B3 CF1C D44ED6          17      CALL    NC,COPEN
0108B6 CF1F D4A3D8          17      CALL    NC,SDIRENT
0108B9 CF22 C3B6CD          10      JP  _S16XX
                                
       CF25                     _SYS21:     ;(BDOS)ランダムな読み出し
0108BC CF25 CD45D5          17      CALL    SETDRV
0108BF CF28 CDDFD9          17      CALL    INIT_RND
0108C2 CF2B 189C            12      JR  SREAD
                                
       CF2D                     _SYS22:     ;(BDOS)ランダムな書き込み
       CF2D                     _SYS28:     ;(BDOS)ランダムな書き込み・その2
0108C4 CF2D CD45D5          17      CALL    SETDRV
0108C7 CF30 CDDFD9          17      CALL    INIT_RND
0108CA CF33 18AA            12      JR  SWRITE
                                
       CF35                     _SYS18:     ;(BDOS)ログインベクトルの獲得
0108CC CF35 21FF00          10      LD  HL,000FFH
0108CF CF38 AF               4      XOR A
0108D0 CF39 C9              10      RET
                                
       CF3A                     _SYS19:     ;(BDOS)カレントドライブ番号の獲得
0108D1 CF3A 3A87E4          13      LD  A,(_DVSW)
0108D4 CF3D A7               4      AND A
0108D5 CF3E C9              10      RET
                                
       CF3F                     _SYS1A:     ;(BDOS)DTAの設定
0108D6 CF3F ED538AE4        20      LD  (_DTA),DE
0108DA CF43 AF               4      XOR A
0108DB CF44 C9              10      RET
                                
       CF45                     _SYS1B:     ;(BDOS)ディスク情報の獲得
0108DC CF45 7B               4      LD  A,E
0108DD CF46 CD53D5          17      CALL    GETDRV
0108E0 CF49 CDDCE4          17      CALL    _GETDPB
0108E3 CF4C D4E2E4          17      CALL    NC,_RDFATX
0108E6 CF4F 210000          10      LD  HL,0
0108E9 CF52 D46DD9          17      CALL    NC,DSKF
                                
0108EC CF55 ED5B6ED9        20      LD  DE,(MAXCLP) ;DPB_MAXCL-1
0108F0 CF59 1B               6      DEC DE      ;DE←クラスタの総数
0108F1 CF5A FD2A7CE5        20      LD  IY,(_FATBF) ;IY←メモリ上のFATの先頭アドレス
0108F5 CF5E 9F               4      SBC A,A
0108F6 CF5F D8              11      RET C
0108F7 CF60 4F               4      LD  C,A     ;C=0
0108F8 CF61 DD7E0F          19      LD  A,(IX+DPB_BPS)
0108FB CF64 E607             7      AND 7
0108FD CF66 47               4      LD  B,A
0108FE CF67 DD7E07          19      LD  A,(IX+DPB_SECPCL)
010901 CF6A C9              10      RET
                                
       CF6B                     _SYS1D:     ;(BDOS)書き込みが禁止されているディスクの調査
010902 CF6B AF               4      XOR A
010903 CF6C 67               4      LD  H,A
010904 CF6D 6F               4      LD  L,A
010905 CF6E C9              10      RET
                                
       CF6F                     _SYS1F:     ;(BDOS)ディスク装置のパラメータの読み出し
010906 CF6F 2100E6          10      LD  HL,_DEVICE
010909 CF72 7B               4      LD  A,E
01090A CF73 C3DCE4          10      JP  _GETDPB
                                
       CF76                     _SYS23:     ;(BDOS)ファイルサイズの獲得
01090D CF76 E5              11      PUSH    HL
01090E CF77 2A1EE5          16      LD  HL,(STABLE+2*00FH)  ;ファイルのオープン
010911 CF7A CD0F00          17      CALL    JP_HL
010914 CF7D 381B            12      JR  C,_S23X1
                                
010916 CF7F D5              11      PUSH    DE      ;EX DE,IY
010917 CF80 FDE3            23      EX  (SP),IY     ;
                                ;   POP DE      ;
                                ;   PUSH    DE      ;DEを破壊しないように注意vv
010919 CF82 FD7E10          19      LD  A,(IY+16)   ;(FCB)ファイルのサイズ(バイト単位)
01091C CF85 FD6E11          19      LD  L,(IY+17)   ;
01091F CF88 FD6612          19      LD  H,(IY+18)   ;
010922 CF8B C5              11      PUSH    BC      ;
010923 CF8C FD4613          19      LD  B,(IY+19)   ;
010926 CF8F CDD1D9          17      CALL    GET_CPM_R_SIZE
010929 CF92 C1              10      POP BC
       CF93                     _S24X1:
01092A CF93 CDF1D9          17      CALL    SET_RR_AHL
                                ;   POP DE      ;^^^^^^^^^^^^^^^^^^^^^^^^
                                ;   PUSH    DE      ;EX DE,IY
01092D CF96 FDE3            23      EX  (SP),IY     ;
01092F CF98 D1              10      POP DE      ;
                                
010930 CF99 AF               4      XOR A
       CF9A                     _S23X1:
010931 CF9A E1              10      POP HL
010932 CF9B C9              10      RET
                                
       CF9C                     _SYS24:     ;(BDOS)ランダムレコードフィールドの設定
010933 CF9C E5              11      PUSH    HL
010934 CF9D D5              11      PUSH    DE      ;EX DE,IY
010935 CF9E FDE3            23      EX  (SP),IY     ;
                                ;   POP DE      ;
                                ;   PUSH    DE      ;DEを破壊しないように注意vv
010937 CFA0 CD03DA          17      CALL    GETSEQ
01093A CFA3 18EE            12      JR  _S24X1      ;^^^^^^^^^^^^^^^^^^^^^^^^
                                
       CFA5                     _SYS29:     ;(BDOS)ファイル名の解析(_PPATH)
01093C CFA5 C5              11      PUSH    BC
01093D CFA6 E5              11      PUSH    HL
01093E CFA7 CD5CD4          17      CALL    FILE
010941 CFAA E1              10      POP HL
010942 CFAB C1              10      POP BC
       CFAC                     S29X1:
010943 CFAC C5              11      PUSH    BC
010944 CFAD D5              11      PUSH    DE
010945 CFAE E5              11      PUSH    HL
010946 CFAF EB               4      EX  DE,HL
010947 CFB0 AF               4      XOR A
010948 CFB1 3221E4          13      LD  (FDRV+13),A
01094B CFB4 2114E4          10      LD  HL,FDRV
01094E CFB7 011000          10      LD  BC,16
010951 CFBA EDB0                    LDIR
010953 CFBC E1              10      POP HL
010954 CFBD D1              10      POP DE
010955 CFBE C1              10      POP BC
010956 CFBF C9              10      RET
                                
       CFC0                     _SYS30:     ;(BDOS)論理セクタを用いた書き込み
010957 CFC0 C5              11      PUSH    BC
010958 CFC1 0152E0          10      LD  BC,DWT24B
01095B CFC4 1804            12      JR  S2FX
       CFC6                     _SYS2F:
01095D CFC6 C5              11      PUSH    BC
01095E CFC7 0142E0          10      LD  BC,DRD24B
       CFCA                     S2FX:
010961 CFCA ED43E0CF        20      LD  (S2FPAT+1),BC
010965 CFCE CDDFE4          17      CALL    _FFLUSH
                                
010968 CFD1 D5              11      PUSH    DE
010969 CFD2 E5              11      PUSH    HL
01096A CFD3 7D               4      LD  A,L     ;Drive
01096B CFD4 CDD9E4          17      CALL    _CHGDRV
01096E CFD7 3809            12      JR  C,S30X2
010970 CFD9 44               4      LD  B,H     ;Number of clusters
010971 CFDA 2A8AE4          16      LD  HL,(_DTA)
                                
010974 CFDD 0E00             7      LD  C,0
010976 CFDF CD42E0          17  S2FPAT: CALL    DRD24B
       CFE2                     S30X2:
010979 CFE2 E1              10      POP HL
01097A CFE3 D1              10      POP DE
01097B CFE4 C1              10      POP BC
01097C CFE5 9F               4      SBC A,A
01097D CFE6 C9              10      RET
                                
       CFE7                     _SYS5A:     ;(BDOS)カレントディレクトリの変更
01097E CFE7 C5              11      PUSH    BC
01097F CFE8 D5              11      PUSH    DE
010980 CFE9 E5              11      PUSH    HL
010981 CFEA CD51D4          17      CALL    FILEC
010984 CFED 210000          10      LD  HL,0
010987 CFF0 1114E4          10      LD  DE,FDRV
01098A CFF3 2A4EE5          16      LD  HL,(STABLE+2*027H)  ;ランダムブロック読み込み
01098D CFF6 CD0F00          17      CALL    JP_HL
010990 CFF9 18E7            12      JR  S30X2
[EOF:LDOS.ASM:SHIFT_JIS]
                                    INCLUDE "MSXIO.ASM"
                                
                                ;   LSX-Dodgers IO
                                ;   MSX
                                
       CD6A                     _SYS04  EQU _ERROR      ;(BDOS)外部出力
       CD6A                     _SYS05  EQU _ERROR      ;(BDOS)プリンタ出力
       CD6A                     _SYS1C  EQU _ERROR      ;(BDOS)ディスクの書き込み禁止化
       CD6A                     _SYS1E  EQU _ERROR      ;(BDOS)ファイル属性の設定
       CD6A                     _SYS20  EQU _ERROR      ;(BDOS)利用者番号の設定と読み出し
       CD6A                     _SYS2E  EQU _ERROR      ;(BDOS)ベリファイ・フラグの設定
                                
       0000                     INT EQU 0
       0000                     INTCTCE EQU 0
       0000                     INTCTC2 EQU 0
                                
       0000                     CTRL00  EQU 0
       0000                     CTRL03  EQU 0
       0000                     CTRL04  EQU 0
       0000                     CTRL05  EQU 0
       0000                     CTRL06  EQU 0
       0000                     CTRL07  EQU 0
       0000                     CTRL08  EQU 0
       0000                     CTRL09  EQU 0
       0000                     CTRL0A  EQU 0
       0000                     CTRL0B  EQU 0
       0000                     CTRL0C  EQU 0
       0000                     CTRL0D  EQU 0
       0000                     CTRL0E  EQU 0
       0000                     CTRL12  EQU 0
       0000                     CTRL1B  EQU 0
       0000                     CTRL1C  EQU 0
       0000                     CTRL1D  EQU 0
       0000                     CTRL1E  EQU 0
       0000                     CTRL1F  EQU 0
                                
       CFFB                     PRINT:
010992 CFFB 7B               4      LD  A,E
010993 CFFC 1803            12      JR  MSG_A
                                
       CFFE                     _SYS01:     ;(BDOS)コンソール入力
010995 CFFE CD09E4          17      CALL    _SYS07
       D001                     MSG_A:
010998 D001 FE03             7      CP  3
01099A D003 2814            12      JR  Z,MSG_BR
       D005                     MSGA1:
01099C D005 F5              11      PUSH    AF
01099D D006 C5              11      PUSH    BC
01099E D007 D5              11      PUSH    DE
01099F D008 E5              11      PUSH    HL
0109A0 D009 DDE5            15      PUSH    IX
0109A2 D00B DD21A200        14      LD  IX,CHPUT
0109A6 D00F CD14D2          17      CALL    CALSLT_R
0109A9 D012 DDE1            14      POP IX
0109AB D014 E1              10      POP HL
0109AC D015 D1              10      POP DE
0109AD D016 C1              10      POP BC
       D017                     MSGA2:
0109AE D017 F1              10      POP AF
0109AF D018 C9              10      RET
       D019                     MSG_BR:
0109B0 D019 F5              11      PUSH    AF
0109B1 D01A 3ADDF3          13      LD  A,(CSRX)
0109B4 D01D FE02             7      CP  2
0109B6 D01F 38F6            12      JR  C,MSGA2
0109B8 D021 F1              10      POP AF
       D022                     MSG_CR:
0109B9 D022 F5              11      PUSH    AF
0109BA D023 3E0D             7      LD  A,00DH
0109BC D025 CD05D0          17      CALL    MSGA1
0109BF D028 3E0A             7      LD  A,00AH
0109C1 D02A CD05D0          17      CALL    MSGA1
0109C4 D02D F1              10      POP AF
0109C5 D02E C9              10      RET
                                
       D02F                     _SYS02:     ;(BDOS)コンソール出力
0109C6 D02F CD4AD0          17      CALL    BREAK
0109C9 D032 1805            12      JR  PRINTX
                                
       D034                     _SYS06:     ;(BDOS)コンソール直接入出力
0109CB D034 7B               4      LD  A,E
0109CC D035 3C               4      INC A
0109CD D036 CACAE4          10      JP  Z,_INKEY
       D039                     PRINTX:
0109D0 D039 C3CDE4          10      JP  _PRINT
                                
       D03C                     _SYS08:     ;(BDOS)エコーなしコンソール入力
0109D3 D03C CD09E4          17      CALL    _SYS07
0109D6 D03F FE03             7      CP  3
0109D8 D041 CCF4E4          17      CALL    Z,_BREAK
0109DB D044 FE13             7      CP  013H        ;CTRL+S
0109DD D046 C0              11      RET NZ
       D047                     PAUSE:
0109DE D047 CD61D0          17      CALL    KEYBC
                                
       D04A                     BREAK:
0109E1 D04A F5              11      PUSH    AF
0109E2 D04B C5              11      PUSH    BC
0109E3 D04C D5              11      PUSH    DE
0109E4 D04D E5              11      PUSH    HL
0109E5 D04E DDE5            15      PUSH    IX
0109E7 D050 DD21B700        14      LD  IX,BREAKX
0109EB D054 CD14D2          17      CALL    CALSLT_R
0109EE D057 DDE1            14      POP IX
0109F0 D059 E1              10      POP HL
0109F1 D05A D1              10      POP DE
0109F2 D05B C1              10      POP BC
0109F3 D05C DCF4E4          17      CALL    C,_BREAK
0109F6 D05F F1              10      POP AF
0109F7 D060 C9              10      RET
       D061                     KEYBC:
0109F8 D061 F5              11      PUSH    AF
0109F9 D062 C5              11      PUSH    BC
0109FA D063 D5              11      PUSH    DE
0109FB D064 E5              11      PUSH    HL
0109FC D065 DDE5            15      PUSH    IX
0109FE D067 DD215601        14      LD  IX,KILBUF
010A02 D06B CD14D2          17      CALL    CALSLT_R
010A05 D06E DDE1            14      POP IX
010A07 D070 E1              10      POP HL
010A08 D071 D1              10      POP DE
010A09 D072 C1              10      POP BC
010A0A D073 F1              10      POP AF
010A0B D074 C9              10      RET
       D075                     FLGET:
010A0C D075 C5              11      PUSH    BC
010A0D D076 D5              11      PUSH    DE
010A0E D077 E5              11      PUSH    HL
010A0F D078 DDE5            15      PUSH    IX
010A11 D07A CDDFE4          17      CALL    _FFLUSH
010A14 D07D 181B            12      JR  FLGET1
       D07E                     CBIOS_SWC1  EQU $-1
010A16 D07F CDFCD1          17      CALL    GETVRAM
                                
010A19 D082 E5              11      PUSH    HL
010A1A D083 DD214A00        14      LD  IX,RDVRM
010A1E D087 CD14D2          17      CALL    CALSLT_R
010A21 D08A E1              10      POP HL
010A22 D08B 32A6D0          13      LD  (SWCCHR),A
                                
010A25 D08E E5              11      PUSH    HL
010A26 D08F 3EFF             7      LD  A,0FFH
010A28 D091 DD214D00        14      LD  IX,WRTVRM
010A2C D095 CD14D2          17      CALL    CALSLT_R
010A2F D098 E1              10      POP HL
                                
010A30 D099 E5              11      PUSH    HL
       D09A                     FLGET1:
010A31 D09A DD219F00        14      LD  IX,CHGET
010A35 D09E CD14D2          17      CALL    CALSLT_R
010A38 D0A1 180C            12      JR  FLGET2
       D0A2                     CBIOS_SWC2  EQU $-1
010A3A D0A3 E1              10      POP HL
                                
010A3B D0A4 F5              11      PUSH    AF
010A3C D0A5 3E00             7      LD  A,0
       D0A6                     SWCCHR  EQU $-1
010A3E D0A7 DD214D00        14      LD  IX,WRTVRM
010A42 D0AB CD14D2          17      CALL    CALSLT_R
010A45 D0AE F1              10      POP AF
       D0AF                     FLGET2:
010A46 D0AF DDE1            14      POP IX
010A48 D0B1 E1              10      POP HL
010A49 D0B2 D1              10      POP DE
010A4A D0B3 C1              10      POP BC
010A4B D0B4 FE03             7      CP  3
010A4D D0B6 C0              11      RET NZ
010A4E D0B7 C300E4          10      JP  CPM_BOOT
                                
       D0BA                     INKEY:
010A51 D0BA CD06E4          17      CALL    CPM_CONST
010A54 D0BD C8              11      RET Z
010A55 D0BE 18B5            12      JR  FLGET
                                
       D0C0                     _SYS0A:     ;(BDOS)文字列入力
010A57 D0C0 C5              11      PUSH    BC
010A58 D0C1 E5              11      PUSH    HL
010A59 D0C2 D5              11      PUSH    DE
010A5A D0C3 CDECD0          17      CALL    GETL
010A5D D0C6 111FF4          10      LD  DE,KBUF
010A60 D0C9 E1              10      POP HL
010A61 D0CA E5              11      PUSH    HL
010A62 D0CB 0E00             7      LD  C,0
010A64 D0CD 3004            12      JR  NC,SAX0
010A66 D0CF 23               6      INC HL
010A67 D0D0 23               6      INC HL
010A68 D0D1 1808            12      JR  SAX4
       D0D3                     SAX0:
010A6A D0D3 46               7      LD  B,(HL)
010A6B D0D4 23               6      INC HL
       D0D5                     SAX1:
010A6C D0D5 23               6      INC HL
010A6D D0D6 1A               7      LD  A,(DE)
010A6E D0D7 13               6      INC DE
010A6F D0D8 B7               4      OR  A
010A70 D0D9 2004            12      JR  NZ,SAX2
       D0DB                     SAX4:
010A72 D0DB 360D            10      LD  (HL),00DH
010A74 D0DD 1804            12      JR  SAX3
       D0DF                     SAX2:
010A76 D0DF 77               7      LD  (HL),A
010A77 D0E0 0C               4      INC C
010A78 D0E1 10F2            13      DJNZ    SAX1
       D0E3                     SAX3:
010A7A D0E3 D1              10      POP DE
010A7B D0E4 79               4      LD  A,C
010A7C D0E5 13               6      INC DE
010A7D D0E6 12               7      LD  (DE),A
010A7E D0E7 1B               6      DEC DE
010A7F D0E8 E1              10      POP HL
010A80 D0E9 C1              10      POP BC
010A81 D0EA A7               4      AND A
010A82 D0EB C9              10      RET
       D0EC                     GETL:
010A83 D0EC DDE5            15      PUSH    IX
010A85 D0EE FDE5            15      PUSH    IY
                                
010A87 D0F0 2ADCF3          16      LD  HL,(CSRY)
010A8A D0F3 22CAFB          16      LD  (FSTPOS),HL
       D0F6                     GETL1:
010A8D D0F6 CD3CD0          17      CALL    _SYS08
010A90 D0F9 FE09             7      CP  9
010A92 D0FB 2008            12      JR  NZ,GETL1V
010A94 D0FD 211FF4          10      LD  HL,KBUF
010A97 D100 CD7BCD          17      CALL    MSX
010A9A D103 18F1            12      JR  GETL1
       D105                     GETL1V:
010A9C D105 5F               4      LD  E,A
010A9D D106 FE08             7      CP  8
010A9F D108 CCA2D1          17      CALL    Z,CTRL02
010AA2 D10B FE20             7      CP  020H
010AA4 D10D D4CED1          17      CALL    NC,INSERT
010AA7 D110 CD05D0          17      CALL    MSGA1
                                
010AAA D113 7B               4      LD  A,E
010AAB D114 FE0D             7      CP  00DH
010AAD D116 20DE            12      JR  NZ,GETL1
                                
010AAF D118 111FF4          10      LD  DE,KBUF
010AB2 D11B 3AB0F3          13      LD  A,(LINLEN)
010AB5 D11E 47               4      LD  B,A
010AB6 D11F CD1ECC          17      CALL    ZERO_MEMORY_DE
                                
010AB9 D122 2ACAFB          16      LD  HL,(FSTPOS)
010ABC D125 3ADCF3          13      LD  A,(CSRY)
010ABF D128 6F               4      LD  L,A
010AC0 D129 E5              11      PUSH    HL
010AC1 D12A CDFFD1          17      CALL    LOC0
010AC4 D12D 4D               4      LD  C,L
010AC5 D12E 44               4      LD  B,H
010AC6 D12F E1              10      POP HL
010AC7 D130 3AB0F3          13      LD  A,(LINLEN)
010ACA D133 94               4      SUB H
010ACB D134 3D               4      DEC A
010ACC D135 5F               4      LD  E,A
010ACD D136 211FF4          10      LD  HL,KBUF
       D139                     GETL2:
010AD0 D139 CDD0E4          17      CALL    _SCRN
010AD3 D13C 03               6      INC BC
010AD4 D13D 77               7      LD  (HL),A
010AD5 D13E 23               6      INC HL
010AD6 D13F 1D               4      DEC E
010AD7 D140 20F7            12      JR  NZ,GETL2
010AD9 D142 CD22D0          17      CALL    MSG_CR
                                
010ADC D145 FDE1            14      POP IY
010ADE D147 DDE1            14      POP IX
       D149                     GETL3:
010AE0 D149 2B               6      DEC HL
010AE1 D14A 7E               7      LD  A,(HL)
010AE2 D14B FE21             7      CP  021H
010AE4 D14D D0              11      RET NC
010AE5 D14E 3600            10      LD  (HL),0
010AE7 D150 15               4      DEC D
010AE8 D151 20F6            12      JR  NZ,GETL3
010AEA D153 C9              10      RET
                                
       D154                     _SYS0B:     ;(BDOS)コンソール状態のチェック
       D154                     CONSTX:
010AEB D154 C5              11      PUSH    BC
010AEC D155 D5              11      PUSH    DE
010AED D156 E5              11      PUSH    HL
010AEE D157 DDE5            15      PUSH    IX
010AF0 D159 DD219C00        14      LD  IX,CHSNS
010AF4 D15D CD14D2          17      CALL    CALSLT_R
010AF7 D160 DDE1            14      POP IX
010AF9 D162 E1              10      POP HL
010AFA D163 D1              10      POP DE
010AFB D164 C1              10      POP BC
010AFC D165 C9              10      RET
                                
       D166                     _SYS2A:     ;(BDOS)日付の獲得
010AFD D166 AF               4      XOR A
010AFE D167 57               4      LD  D,A
010AFF D168 5F               4      LD  E,A
010B00 D169 67               4      LD  H,A
010B01 D16A 6F               4      LD  L,A
010B02 D16B C9              10      RET
                                
       D16C                     _SYS2C:     ;(BDOS)時刻の獲得
010B03 D16C AF               4      XOR A
010B04 D16D 57               4      LD  D,A
010B05 D16E 5F               4      LD  E,A
010B06 D16F 67               4      LD  H,A
010B07 D170 6F               4      LD  L,A
010B08 D171 C9              10      RET
                                
       D172                     POS:
010B09 D172 F5              11      PUSH    AF
010B0A D173 2ADCF3          16      LD  HL,(CSRY)
010B0D D176 7D               4      LD  A,L
010B0E D177 6C               4      LD  L,H
010B0F D178 67               4      LD  H,A
010B10 D179 2C               4      INC L
010B11 D17A 24               4      INC H
010B12 D17B F1              10      POP AF
010B13 D17C C9              10      RET
                                
       D17D                     LOC:
010B14 D17D F5              11      PUSH    AF
010B15 D17E E5              11      PUSH    HL
010B16 D17F 7D               4      LD  A,L
010B17 D180 6C               4      LD  L,H
010B18 D181 67               4      LD  H,A
010B19 D182 2D               4      DEC L
010B1A D183 25               4      DEC H
010B1B D184 DDE5            15      PUSH    IX
010B1D D186 DD21C600        14      LD  IX,POSIT
010B21 D18A CD14D2          17      CALL    CALSLT_R
010B24 D18D DDE1            14      POP IX
010B26 D18F E1              10      POP HL
010B27 D190 F1              10      POP AF
010B28 D191 C9              10      RET
       D192                     SCRN:
010B29 D192 E5              11      PUSH    HL
010B2A D193 DDE5            15      PUSH    IX
                                
010B2C D195 69               4      LD  L,C
010B2D D196 60               4      LD  H,B
010B2E D197 DD214A00        14      LD  IX,RDVRM
010B32 D19B CD14D2          17      CALL    CALSLT_R
                                
010B35 D19E DDE1            14      POP IX
010B37 D1A0 E1              10      POP HL
010B38 D1A1 C9              10      RET
                                
       D1A2                     CTRL02:
010B39 D1A2 F5              11      PUSH    AF
010B3A D1A3 D5              11      PUSH    DE
010B3B D1A4 2ADCF3          16      LD  HL,(CSRY)
010B3E D1A7 3AB0F3          13      LD  A,(LINLEN)
010B41 D1AA 4F               4      LD  C,A
010B42 D1AB 94               4      SUB H   ;CSRX
010B43 D1AC C602             7      ADD A,2
010B45 D1AE 47               4      LD  B,A ;カーソルより右の文字数
010B46 D1AF 61               4      LD  H,C ;LINLEN
010B47 D1B0 C5              11      PUSH    BC
010B48 D1B1 CDFFD1          17      CALL    LOC0
010B4B D1B4 C1              10      POP BC
                                
010B4C D1B5 1620             7      LD  D,020H
       D1B7                     C8X1:
010B4E D1B7 DD214A00        14      LD  IX,RDVRM
010B52 D1BB CD14D2          17      CALL    CALSLT_R
010B55 D1BE 4F               4      LD  C,A
010B56 D1BF 7A               4      LD  A,D
010B57 D1C0 DD214D00        14      LD  IX,WRTVRM
010B5B D1C4 CD14D2          17      CALL    CALSLT_R
010B5E D1C7 2B               6      DEC HL
010B5F D1C8 51               4      LD  D,C
010B60 D1C9 10EC            13      DJNZ    C8X1
010B62 D1CB D1              10      POP DE
010B63 D1CC F1              10      POP AF
010B64 D1CD C9              10      RET
                                
       D1CE                     INSERT:
010B65 D1CE F5              11      PUSH    AF
010B66 D1CF D5              11      PUSH    DE
010B67 D1D0 2ADCF3          16      LD  HL,(CSRY)
010B6A D1D3 3AB0F3          13      LD  A,(LINLEN)
010B6D D1D6 4F               4      LD  C,A
010B6E D1D7 94               4      SUB H   ;CSRX
010B6F D1D8 3C               4      INC A
010B70 D1D9 47               4      LD  B,A ;カーソルより右の文字数
010B71 D1DA C5              11      PUSH    BC
010B72 D1DB CDFFD1          17      CALL    LOC0
010B75 D1DE C1              10      POP BC
                                
010B76 D1DF 1620             7      LD  D,020H
       D1E1                     INS1:
010B78 D1E1 DD214A00        14      LD  IX,RDVRM
010B7C D1E5 CD14D2          17      CALL    CALSLT_R
010B7F D1E8 4F               4      LD  C,A
010B80 D1E9 7A               4      LD  A,D
010B81 D1EA DD214D00        14      LD  IX,WRTVRM
010B85 D1EE CD14D2          17      CALL    CALSLT_R
010B88 D1F1 23               6      INC HL
010B89 D1F2 51               4      LD  D,C
010B8A D1F3 10EC            13      DJNZ    INS1
010B8C D1F5 D1              10      POP DE
010B8D D1F6 F1              10      POP AF
010B8E D1F7 C9              10      RET
                                
       D1F8                     CONOUT1:
010B8F D1F8 59               4      LD  E,C
010B90 D1F9 C3CDE4          10      JP  _PRINT
                                
       D1FC                     GETVRAM:
010B93 D1FC 2ADCF3          16      LD  HL,(CSRY)
       D1FF                     LOC0:
010B96 D1FF 2D               4      DEC L
010B97 D200 25               4      DEC H
010B98 D201 4C               4      LD  C,H ;CSRX-1
010B99 D202 5D               4      LD  E,L ;CSRY-1
       D203                     LOC1:
010B9A D203 3AB0F3          13      LD  A,(LINLEN)
010B9D D206 67               4      LD  H,A
010B9E D207 1600             7      LD  D,0
010BA0 D209 6A               4      LD  L,D ;0
010BA1 D20A 0608             7      LD  B,8
       D20C                     LOC2:
010BA3 D20C 29              11      ADD HL,HL
010BA4 D20D 3001            12      JR  NC,LOC3
010BA6 D20F 19              11      ADD HL,DE
       D210                     LOC3:
010BA7 D210 10FA            13      DJNZ    LOC2
010BA9 D212 09              11      ADD HL,BC
010BAA D213 C9              10      RET
                                
       D214                     CALSLT_R:
010BAB D214 FDE5            15      PUSH    IY
010BAD D216 FD2AC0FC        20      LD  IY,(EXPTBL-1)   ;メインROMスロット
010BB1 D21A CD30D2          17      CALL    CALSLTR
010BB4 D21D FDE1            14      POP IY
010BB6 D21F C9              10      RET
                                
       D220                     CALLF:
010BB7 D220 08               4      EX  AF,AF'
010BB8 D221 E3              19      EX  (SP),HL
010BB9 D222 7E               7      LD  A,(HL)
010BBA D223 FD67             9      LD  IYH,A
010BBC D225 23               6      INC HL
010BBD D226 7E               7      LD  A,(HL)
010BBE D227 DD6F             9      LD  IXL,A
010BC0 D229 23               6      INC HL
010BC1 D22A 7E               7      LD  A,(HL)
010BC2 D22B DD67             9      LD  IXH,A
010BC4 D22D 23               6      INC HL
010BC5 D22E E3              19      EX  (SP),HL
010BC6 D22F 08               4      EX  AF,AF'
       D230                     CALSLTR:
010BC7 D230 F3               4      DI
010BC8 D231 ED736AD2        20      LD  (CSSP),SP
010BCC D235 F5              11      PUSH    AF
010BCD D236 3E1C             7      LD  A,_CALSLT
       D238                     SLTCALL:
010BCF D238 3257D2          13      LD  (SLTCALLX),A
010BD2 D23B 3A6BD2          13      LD  A,(CSSP+1)
010BD5 D23E FE41             7      CP  040H+1
010BD7 D240 3005            12      JR  NC,CALSLTR1
010BD9 D242 F1              10      POP AF
010BDA D243 315EF5          10      LD  SP,BUF
010BDD D246 F5              11      PUSH    AF
       D247                     CALSLTR1:
010BDE D247 C5              11      PUSH    BC
010BDF D248 D5              11      PUSH    DE
010BE0 D249 E5              11      PUSH    HL
010BE1 D24A 2600             7      LD  H,0
010BE3 D24C 3AC1FC          13      LD  A,(EXPTBL)  ;メインROMに切り替える
010BE6 D24F CD6ED3          17      CALL    ENASLT
010BE9 D252 E1              10      POP HL
010BEA D253 D1              10      POP DE
010BEB D254 C1              10      POP BC
010BEC D255 F1              10      POP AF
010BED D256 CD1C00          17      CALL    _CALSLT
       D257                     SLTCALLX    EQU $-2
010BF0 D259 F5              11      PUSH    AF
010BF1 D25A C5              11      PUSH    BC
010BF2 D25B D5              11      PUSH    DE
010BF3 D25C E5              11      PUSH    HL
010BF4 D25D 2600             7      LD  H,0
010BF6 D25F 3A41F3          13      LD  A,(0F341H)  ;メインRAMに戻す
010BF9 D262 CD6ED3          17      CALL    ENASLT
010BFC D265 E1              10      POP HL
010BFD D266 D1              10      POP DE
010BFE D267 C1              10      POP BC
010BFF D268 F1              10      POP AF
010C00 D269 310000          10      LD  SP,0
       D26A                     CSSP    EQU $-2
010C03 D26C FB               4      EI
010C04 D26D C9              10      RET
                                
       D26E                     RDSLTR:
010C05 D26E ED736AD2        20      LD  (CSSP),SP
010C09 D272 F5              11      PUSH    AF
010C0A D273 3E0C             7      LD  A,_RDSLT
010C0C D275 18C1            12      JR  SLTCALL
                                
       D277                     WRSLTR:
010C0E D277 ED736AD2        20      LD  (CSSP),SP
010C12 D27B F5              11      PUSH    AF
010C13 D27C 3E14             7      LD  A,_WRSLT
010C15 D27E 18B8            12      JR  SLTCALL
                                
       D280                     INT38H:
010C17 D280 F5              11      PUSH    AF
010C18 D281 E5              11      PUSH    HL          ;メインROMを呼び出すのでスタックが被っていないかチェック
010C19 D282 2AACD2          16      LD  HL,(INTSP)
010C1C D285 7C               4      LD  A,H
010C1D D286 B5               4      OR  L
010C1E D287 202D            12      JR  NZ,INT38H2
010C20 D289 C5              11      PUSH    BC
010C21 D28A D5              11      PUSH    DE
010C22 D28B 2100BF          10      LD  HL,010000H-04100H   ;Page1
010C25 D28E 39              11      ADD HL,SP
010C26 D28F ED73ACD2        20      LD  (INTSP),SP
010C2A D293 3803            12      JR  C,INT38H1
010C2C D295 315EF5          10      LD  SP,BUF
       D298                     INT38H1:
010C2F D298 2600             7      LD  H,0
010C31 D29A 3AC1FC          13      LD  A,(EXPTBL)  ;メインROMに切り替える
010C34 D29D CD6ED3          17      CALL    ENASLT
010C37 D2A0 CD3800          17      CALL    00038H
010C3A D2A3 2600             7      LD  H,0
010C3C D2A5 3A41F3          13      LD  A,(0F341H)  ;メインRAMに戻す
010C3F D2A8 CD6ED3          17      CALL    ENASLT
010C42 D2AB 310000          10      LD  SP,0
       D2AC                     INTSP   EQU $-2
010C45 D2AE 210000          10      LD  HL,0
010C48 D2B1 22ACD2          16      LD  (INTSP),HL
010C4B D2B4 D1              10      POP DE
010C4C D2B5 C1              10      POP BC
       D2B6                     INT38H2:
010C4D D2B6 E1              10      POP HL
010C4E D2B7 F1              10      POP AF
010C4F D2B8 FB               4      EI
010C50 D2B9 C9              10      RET
                                
[EOF:MSXIO.ASM:SHIFT_JIS]
                                    INCLUDE "msx_cbios\\slot.asm"
                                ;-------------------------------------
                                ; 000Ch RDSLT
                                ; Reads a value from an address in another slot.
                                ; Input:   A  = slot ID: E000SSPP
                                ;          HL = address to read
                                ; Output:  A  = value read
                                ;          Interrupts disabled.
                                ; Changes: F, C, DE
       D2BA                     rdslt:
010C51 D2BA C5              11                  push    bc
010C52 D2BB E5              11                  push    hl
010C53 D2BC F5              11                  push    af
010C54 D2BD 57               4                  ld      d,a             ; init D in case call is not made
010C55 D2BE A7               4                  and     a               ; expanded slot?
010C56 D2BF F3               4                  di
010C57 D2C0 FCD9D3          17                  call    m,select_subslot
010C5A D2C3 F1              10                  pop     af
010C5B D2C4 E1              10                  pop     hl
                                
010C5C D2C5 E5              11                  push    hl              ; HL = address
010C5D D2C6 D5              11                  push    de              ; D = slot ID, E = saved SSL
010C5E D2C7 E5              11                  push    hl              ; HL = address
010C5F D2C8 F5              11                  push    af              ; A = slot ID
010C60 D2C9 7C               4                  ld      a,h
010C61 D2CA 07               4                  rlca
010C62 D2CB 07               4                  rlca
010C63 D2CC E603             7                  and     $03
010C65 D2CE 6F               4                  ld      l,a             ; L = page number
                                
010C66 D2CF 47               4                  ld      b,a
010C67 D2D0 3EFC             7                  ld      a,$FC
010C69 D2D2 CDF3D2          17                  call    rdsft
010C6C D2D5 5F               4                  ld      e,a             ; E = mask (shifted)
010C6D D2D6 45               4                  ld      b,l             ; B = page number
010C6E D2D7 F1              10                  pop     af              ; A = slot ID
010C6F D2D8 E603             7                  and     $03
010C71 D2DA CDF3D2          17                  call    rdsft
010C74 D2DD 47               4                  ld      b,a             ; B = primary slot (shifted)
010C75 D2DE DBA8            11                  in      a,(PSL_STAT)
010C77 D2E0 57               4                  ld      d,a             ; D = primary slot select for restore
010C78 D2E1 A3               4                  and     e
010C79 D2E2 B0               4                  or      b               ; A = primary slot select for read
010C7A D2E3 E1              10                  pop     hl              ; HL = address
                                
010C7B D2E4 CD80F3          17                  call    rdprim
010C7E D2E7 7B               4                  ld      a,e
010C7F D2E8 D1              10                  pop     de              ; D = slot ID, E = saved SSL
010C80 D2E9 F5              11                  push    af              ; A = value read
010C81 D2EA CB7A             8                  bit     7,d             ; expanded slot?
010C83 D2EC C415D4          17                  call    nz,restore_subslot
010C86 D2EF F1              10                  pop     af              ; A = value read
010C87 D2F0 E1              10                  pop     hl              ; HL = address
010C88 D2F1 C1              10                  pop     bc
010C89 D2F2 C9              10                  ret
                                
       D2F3                     rdsft:
010C8A D2F3 04               4                  inc     b
010C8B D2F4 05               4                  dec     b
010C8C D2F5 C8              11                  ret     z
       D2F6                     rdsft_lp:
010C8D D2F6 07               4                  rlca
010C8E D2F7 07               4                  rlca
010C8F D2F8 10FC            13                  djnz    rdsft_lp
010C91 D2FA C9              10                  ret
                                
                                ;-------------------------------------
                                ; $0014 WRSLT
                                ; Writes a value to an address in another slot.
                                ; Input:   A  = slot ID: E000SSPP
                                ;          HL = address to write
                                ;          E  = value to write
                                ; Output:  Interrupts disabled.
                                ; Changes: AF, BC, D
       D2FB                     wrslt:
010C92 D2FB E5              11                  push    hl
010C93 D2FC 57               4                  ld      d,a             ; D = slot ID
010C94 D2FD D5              11                  push    de
010C95 D2FE A7               4                  and     a               ; expanded slot?
010C96 D2FF F3               4                  di
010C97 D300 FCD9D3          17                  call    m,select_subslot
010C9A D303 C1              10                  pop     bc              ; B = slot ID, C = data
010C9B D304 E1              10                  pop     hl
010C9C D305 D5              11                  push    de              ; D = slot ID, E = saved SSL
                                
010C9D D306 E5              11                  push    hl              ; HL = address
010C9E D307 7C               4                  ld      a,h
010C9F D308 07               4                  rlca
010CA0 D309 07               4                  rlca
010CA1 D30A E603             7                  and     $03
010CA3 D30C 6F               4                  ld      l,a             ; L = page number
                                
010CA4 D30D 47               4                  ld      b,a             ; B = page number
010CA5 D30E 3EFC             7                  ld      a,$FC
010CA7 D310 CDF3D2          17                  call    rdsft
010CAA D313 5F               4                  ld      e,a             ; E = mask (shifted)
                                
010CAB D314 45               4                  ld      b,l             ; B = page number
010CAC D315 7A               4                  ld      a,d
010CAD D316 E603             7                  and     $03             ; A = 000000PP
010CAF D318 CDF3D2          17                  call    rdsft
010CB2 D31B 47               4                  ld      b,a             ; B = primary slot (shifted)
010CB3 D31C DBA8            11                  in      a,(PSL_STAT)
010CB5 D31E 57               4                  ld      d,a             ; D = primary slot select for restore
010CB6 D31F A3               4                  and     e
010CB7 D320 B0               4                  or      b               ; A = primary slot select for write
010CB8 D321 E1              10                  pop     hl              ; HL = address
010CB9 D322 59               4                  ld      e,c             ; E = data
010CBA D323 CD85F3          17                  call    wrprim
                                
010CBD D326 D1              10                  pop     de              ; D = slot ID, E = saved SSL
010CBE D327 E5              11                  push    hl              ; HL = address
010CBF D328 CB7A             8                  bit     7,d             ; expanded slot?
010CC1 D32A C415D4          17                  call    nz,restore_subslot
010CC4 D32D E1              10                  pop     hl
010CC5 D32E C9              10                  ret
                                
                                ;-------------------------------------
                                ; $001C CALSLT
                                ; Function : Executes inter-slot call.
                                ; Input    : IY - High byte with input for A in RDSLT
                                ;            IX - The address that will be called
                                ; Remark   : Variables can never be given in alternative registers
                                ;            of the Z-80 or IX and IY
                                
       D32F                     calslt:
010CC6 D32F 08               4                  ex      af,af'
010CC7 D330 D9               4                  exx
                                
                                ; Select secondary slot of target:
                                ; Note: This approach fails if target is in page 0 of slot 0.1, 0.2 or 0.3.
                                ; TODO: Put slot 0 specific routine in page 3, on the stack if necessary.
010CC8 D331 F3               4                  di
010CC9 D332 FDE5            15                  push    iy
010CCB D334 F1              10                  pop     af              ; A = slot ID: E000SSPP
010CCC D335 DDE5            15                  push    ix
010CCE D337 E1              10                  pop     hl              ; HL = address to call
010CCF D338 57               4                  ld      d,a             ; init D in case call is not made
010CD0 D339 A7               4                  and     a               ; expanded slot?
010CD1 D33A FCD9D3          17                  call    m,select_subslot
010CD4 D33D D5              11                  push    de              ; D = slot ID, E = saved SSL
                                
                                ; Calculate primary slot select value:
010CD5 D33E 7A               4                  ld      a,d             ; A = slot ID: E000SSPP
010CD6 D33F E603             7                  and     $03
010CD8 D341 47               4                  ld      b,a             ; B = primary slot
010CD9 D342 0EFC             7                  ld      c,$FC           ; C = mask
                                                ; Calculate page that contains call address.
010CDB D344 DDE5            15                  push    ix
010CDD D346 F1              10                  pop     af              ; A = high byte call address
010CDE D347 07               4                  rlca
010CDF D348 07               4                  rlca
010CE0 D349 E603             7                  and     $03             ; A = page
                                                ; Shift B and C page*2 positions to the left.
010CE2 D34B 87               4                  add     a,a
010CE3 D34C 2807            12                  jr      z,calslt_sh2
       D34E                     calslt_sh1:
010CE5 D34E CB00             4                  rlc     b
010CE7 D350 CB01             4                  rlc     c
010CE9 D352 3D               4                  dec     a
010CEA D353 20F9            12                  jr      nz,calslt_sh1
       D355                     calslt_sh2:
                                
                                ; Select primary slot of target and perform call:
010CEC D355 2162D3          10                  ld      hl,calslt_restore
010CEF D358 E5              11                  push    hl
010CF0 D359 DBA8            11                  in      a,(PSL_STAT)
010CF2 D35B F5              11                  push    af
010CF3 D35C A1               4                  and     c               ; C = mask (shifted)
010CF4 D35D B0               4                  or      b               ; B = primary slot (shifted)
010CF5 D35E D9               4                  exx
010CF6 D35F C38CF3          10                  jp      clprim
                                
       D362                     calslt_restore:
010CF9 D362 08               4                  ex      af,af'
010CFA D363 D9               4                  exx
                                
                                ; Restore secondary slot:
010CFB D364 F3               4                  di
010CFC D365 D1              10                  pop     de              ; D = slot ID, E = saved SSL
010CFD D366 CB7A             8                  bit     7,d             ; expanded slot?
010CFF D368 C415D4          17                  call    nz,restore_subslot
                                
                                ; Done:
010D02 D36B 08               4                  ex      af,af'
010D03 D36C D9               4                  exx
010D04 D36D C9              10                  ret
                                
                                ;-------------------------------------
                                ; $0024 ENASLT
                                ; Selects a slot in the page specified by an address.
                                ; Input:   A  = slot ID: ExxxSSPP
                                ;               E  = expanded flag
                                ;               SS = secondary slot number (only if expanded)
                                ;               PP = primary slot number
                                ;          HL = address inside the page to change
                                ; Output:  Interrupts disabled.
                                ; Changes: AF, BC, DE
                                
       D36E                     enaslt:
                                
                                ; A=(A >> 6)&0x3
010D05 D36E F3               4                  di
010D06 D36F E5              11                  push    hl
                                
010D07 D370 6F               4                  ld      l,a             ; L = ExxxSSPP
                                
010D08 D371 E603             7                  and     $03             ; A = 000000PP
010D0A D373 47               4                  ld      b,a
010D0B D374 3EAB             7                  ld      a,$AB
       D376                     psl_dup_lp:
010D0D D376 C655             7                  add     a,$55
010D0F D378 05               4                  dec     b
010D10 D379 F276D3          10                  jp      p,psl_dup_lp
                                
010D13 D37C 57               4                  ld      d,a             ; D = PP PP PP PP
                                
010D14 D37D 7C               4                  ld      a,h
010D15 D37E 07               4                  rlca
010D16 D37F 07               4                  rlca
010D17 D380 E603             7                  and     $03
                                
010D19 D382 67               4                  ld      h,a             ; H = page number (0-3)
                                
010D1A D383 47               4                  ld      b,a
                                
010D1B D384 3EC0             7                  ld      a,$C0
       D386                     page_msk_lp:
010D1D D386 07               4                  rlca
010D1E D387 07               4                  rlca
010D1F D388 05               4                  dec     b
010D20 D389 F286D3          10                  jp      p,page_msk_lp
                                
010D23 D38C 5F               4                  ld      e,a             ; E = page mask (00 00 00 11 << page)
010D24 D38D 2F               4                  cpl
010D25 D38E 4F               4                  ld      c,a             ; C = page mask complement
                                
010D26 D38F 7A               4                  ld      a,d
010D27 D390 A3               4                  and     e
010D28 D391 47               4                  ld      b,a             ; B = 00 00 00 PP << page
                                
010D29 D392 7D               4                  ld      a,l
010D2A D393 A7               4                  and     a
010D2B D394 F2D1D3          10                  jp      p,chg_psl
                                
                                ;SSL-Change
010D2E D397 0F               4                  rrca
010D2F D398 0F               4                  rrca
010D30 D399 E603             7                  and     $03             ; A = 000000SS
                                
010D32 D39B E5              11                  push    hl
010D33 D39C C5              11                  push    bc
                                
010D34 D39D 47               4                  ld      b,a
010D35 D39E 3EAB             7                  ld      a,$AB
       D3A0                     ssl_dup_lp:
010D37 D3A0 C655             7                  add     a,$55
010D39 D3A2 05               4                  dec     b
010D3A D3A3 F2A0D3          10                  jp      p,ssl_dup_lp
                                
010D3D D3A6 A3               4                  and     e
010D3E D3A7 47               4                  ld      b,a             ; B = 00 00 00 SS << page
                                
010D3F D3A8 7A               4                  ld      a,d
010D40 D3A9 E6C0             7                  and     $C0
010D42 D3AB 67               4                  ld      h,a
                                
010D43 D3AC DBA8            11                  in      a,(PSL_STAT)
010D45 D3AE 6F               4                  ld      l,a
010D46 D3AF E6C0             7                  and     $C0
010D48 D3B1 B4               4                  or      h
010D49 D3B2 D3A8            11                  out     (PSL_STAT),a
                                
010D4B D3B4 3AFFFF          13                  ld      a,(SSL_REGS)
010D4E D3B7 2F               4                  cpl
010D4F D3B8 A1               4                  and     c               ; preserve other pages
010D50 D3B9 B0               4                  or      b
010D51 D3BA 4F               4                  ld      c,a
010D52 D3BB 32FFFF          13                  ld      (SSL_REGS),a
                                
010D55 D3BE 7D               4                  ld      a,l
010D56 D3BF D3A8            11                  out     (PSL_STAT),a
                                
                                                ; (SLTTBL + PP) <- RegC
                                
010D58 D3C1 21C5FC          10                  ld      hl,SLTTBL
                                
010D5B D3C4 7A               4                  ld      a,d
010D5C D3C5 E603             7                  and     $03             ; A = 000000PP
                                
010D5E D3C7 85               4                  add     a,l
010D5F D3C8 6F               4                  ld      l,a             ; L = L + A
                                
010D60 D3C9 7C               4                  ld      a,h
010D61 D3CA CE00             7                  adc     a,0
010D63 D3CC 67               4                  ld      h,a             ; H = H + Cy
                                
010D64 D3CD 79               4                  ld      a,c
010D65 D3CE 77               7                  ld      (hl),a
                                
010D66 D3CF C1              10                  pop     bc
010D67 D3D0 E1              10                  pop     hl
                                
       D3D1                     chg_psl:
010D68 D3D1 DBA8            11                  in      a,(PSL_STAT)
010D6A D3D3 A1               4                  and     c
010D6B D3D4 B0               4                  or      b
010D6C D3D5 D3A8            11                  out     (PSL_STAT),a
                                
010D6E D3D7 E1              10                  pop     hl
010D6F D3D8 C9              10                  ret
                                
                                ;--------------------------------
                                ; Select subslot.
                                ; Input:   A  = slot ID: E000SSPP
                                ;          HL = address which specifies page to select
                                ;               (actually, only the highest 2 bits of H are relevant)
                                ; Output:  D  = slot ID (same as input)
                                ;          E  = original value of secondary slot select register
                                ;          SLTTBL[slot] = new value of secondary slot select register
                                ; Changes: AF, HL, BC
                                ; Note:    Interrupts must be disabled before calling this routine.
       D3D9                     select_subslot:
                                                ; Select primary slot of target in page 3.
                                                ; Note: Stack is unavailable until primary slot is restored.
010D70 D3D9 57               4                  ld      d,a             ; D = E000SSPP
010D71 D3DA 0F               4                  rrca
010D72 D3DB 0F               4                  rrca
010D73 D3DC 5F               4                  ld      e,a             ; E = PPE000SS
010D74 D3DD E6C0             7                  and     $C0
010D76 D3DF 6F               4                  ld      l,a             ; L = PP000000
010D77 D3E0 DBA8            11                  in      a,(PSL_STAT)
010D79 D3E2 4F               4                  ld      c,a             ; C = saved PSL
010D7A D3E3 E63F             7                  and     $3F
010D7C D3E5 B5               4                  or      l
010D7D D3E6 D3A8            11                  out     (PSL_STAT),a
                                                ; Shift mask and subslot according to page.
010D7F D3E8 7B               4                  ld      a,e             ; A = PPE000SS
010D80 D3E9 E603             7                  and     $03
010D82 D3EB 6F               4                  ld      l,a             ; L = subslot
010D83 D3EC 7C               4                  ld      a,h             ; A = high byte of address
010D84 D3ED 2603             7                  ld      h,$03           ; H = mask
010D86 D3EF 1802            12                  jr      select_subslot_next
       D3F1                     select_subslot_lp:
010D88 D3F1 29              11                  add     hl,hl           ; Shift 2 bits to the left.
010D89 D3F2 29              11                  add     hl,hl
       D3F3                     select_subslot_next:
010D8A D3F3 D640             7                  sub     $40             ; Subtract 1 page.
010D8C D3F5 30FA            12                  jr      nc,select_subslot_lp
010D8E D3F7 7C               4                  ld      a,h
010D8F D3F8 2F               4                  cpl
010D90 D3F9 67               4                  ld      h,a
                                                ; Select secondary slot of target.
010D91 D3FA 3AFFFF          13                  ld      a,(SSL_REGS)
010D94 D3FD 2F               4                  cpl
010D95 D3FE 5F               4                  ld      e,a             ; E = saved SSL
010D96 D3FF A4               4                  and     h               ; H = mask (shifted)
010D97 D400 B5               4                  or      l               ; L = subslot (shifted)
010D98 D401 32FFFF          13                  ld      (SSL_REGS),a
010D9B D404 6F               4                  ld      l,a             ; L = value written to SSL_REGS
                                                ; Restore original primary slot in page 3.
010D9C D405 79               4                  ld      a,c
010D9D D406 D3A8            11                  out     (PSL_STAT),a
                                                ; Update SLTTBL.
010D9F D408 7A               4                  ld      a,d
010DA0 D409 E603             7                  and     $03             ; A = 000000SS
010DA2 D40B 4F               4                  ld      c,a
010DA3 D40C 0600             7                  ld      b,0
010DA5 D40E 7D               4                  ld      a,l             ; A = value written to SSL_REGS
010DA6 D40F 21C5FC          10                  ld      hl,SLTTBL
010DA9 D412 09              11                  add     hl,bc
010DAA D413 77               7                  ld      (hl),a
010DAB D414 C9              10                  ret
                                
                                ;--------------------------------
                                ; Restore subslot, companion routine to select_subslot.
                                ; Input:   D  = slot ID: E000SSPP
                                ;          E  = original value of secondary slot select register
                                ; Output:  SLTTBL[slot] = original value of secondary slot select register
                                ; Changes: AF, HL, BC
                                ; Note:    Interrupts must be disabled before calling this routine.
       D415                     restore_subslot:
                                                ; Select primary slot of target in page 3.
                                                ; Note: Stack is unavailable until primary slot is restored.
010DAC D415 7A               4                  ld      a,d
010DAD D416 0F               4                  rrca
010DAE D417 0F               4                  rrca
010DAF D418 E6C0             7                  and     $C0
010DB1 D41A 47               4                  ld      b,a             ; B = PP000000
010DB2 D41B DBA8            11                  in      a,(PSL_STAT)
010DB4 D41D 4F               4                  ld      c,a             ; C = saved PSL
010DB5 D41E E63F             7                  and     $3F
010DB7 D420 B0               4                  or      b
010DB8 D421 D3A8            11                  out     (PSL_STAT),a
                                                ; Restore secondary slot.
010DBA D423 7B               4                  ld      a,e
010DBB D424 32FFFF          13                  ld      (SSL_REGS),a
                                                ; Restore original primary slot in page 3.
010DBE D427 79               4                  ld      a,c
010DBF D428 D3A8            11                  out     (PSL_STAT),a
                                                ; Update SLTTBL.
010DC1 D42A 7A               4                  ld      a,d
010DC2 D42B E603             7                  and     $03             ; A = 000000SS
010DC4 D42D 4F               4                  ld      c,a
010DC5 D42E 0600             7                  ld      b,0
010DC7 D430 21C5FC          10                  ld      hl,SLTTBL
010DCA D433 09              11                  add     hl,bc
010DCB D434 73               7                  ld      (hl),e
010DCC D435 C9              10                  ret
                                
                                ;--------------------------------
                                
       D436                     m_rdprim:
010DCD D436 D3A8            11                  out     (PSL_STAT),a
010DCF D438 5E               7                  ld      e,(hl)
010DD0 D439 1803            12                  jr      m_wrprm1
       D43B                     m_wrprim:
010DD2 D43B D3A8            11                  out     (PSL_STAT),a
010DD4 D43D 73               7                  ld      (hl),e
       D43E                     m_wrprm1:
010DD5 D43E 7A               4                  ld      a,d
010DD6 D43F D3A8            11                  out     (PSL_STAT),a
010DD8 D441 C9              10                  ret
       D442                     m_clprim:
010DD9 D442 D3A8            11                  out     (PSL_STAT),a
010DDB D444 08               4                  ex      af,af'
010DDC D445 CD98F3          17                  call    cl_jp
010DDF D448 08               4                  ex      af,af'
010DE0 D449 F1              10                  pop     af
010DE1 D44A D3A8            11                  out     (PSL_STAT),a
010DE3 D44C 08               4                  ex      af,af'
010DE4 D44D C9              10                  ret
       D44E                     m_cl_jp:
010DE5 D44E DDE9             8                  jp      (ix)
       D450                     m_prim_end:
010DE7 D450 00               4                  nop
                                
       F380                     rdprim:         equ     $F380
       F385                     wrprim:         equ     rdprim+(m_wrprim-m_rdprim)
       F38C                     clprim:         equ     rdprim+(m_clprim-m_rdprim)
       F398                     cl_jp:          equ     rdprim+(m_cl_jp-m_rdprim)
                                
                                ; vim:ts=8:expandtab:filetype=z8a:syntax=z8a:
[EOF:slot.asm:UTF_8]
                                    INCLUDE "LDFILE.ASM"
                                
                                ;   LSX-Dodgers FILE
                                
       D451                     FILEC:
010DE8 D451 CD5CD4          17      CALL    FILE
       D454                     FILEC2:
010DEB D454 3A15E4          13      LD  A,(FDRV+1)
010DEE D457 FE20             7      CP  020H
010DF0 D459 C8              11      RET Z
010DF1 D45A 1839            12      JR  SETDIR1
                                
       D45C                     FILE:
010DF3 D45C AF               4      XOR A
010DF4 D45D 3214E4          13      LD  (FDRV),A
010DF7 D460 67               4      LD  H,A
010DF8 D461 6F               4      LD  L,A
010DF9 D462 2222E4          16      LD  (FDRV+14),HL
010DFC D465 CD33D5          17      CALL    SPCUT
010DFF D468 CD18D5          17      CALL    CCHK3
010E02 D46B 2812            12      JR  Z,DEVI1
010E04 D46D 13               6      INC DE
010E05 D46E 1A               7      LD  A,(DE)
010E06 D46F 1B               6      DEC DE
010E07 D470 FE3A             7      CP  ':'
010E09 D472 200B            12      JR  NZ,DEVI1
010E0B D474 1A               7      LD  A,(DE)      ;DRIVE
010E0C D475 CD73D7          17      CALL    CAP
010E0F D478 D640             7      SUB '@'
010E11 D47A 13               6      INC DE
010E12 D47B 13               6      INC DE
010E13 D47C 3214E4          13      LD  (FDRV),A
       D47F                     DEVI1:
010E16 D47F 1A               7      LD  A,(DE)
010E17 D480 D65C             7      SUB 05CH        ;\
010E19 D482 2009            12      JR  NZ,NOROOT
010E1B D484 6F               4      LD  L,A     ;A=0でH=0のはずなのでHL=0
010E1C D485 222EE4          16      LD  (FDRV+26),HL
010E1F D488 2C               4      INC L
010E20 D489 2222E4          16      LD  (FDRV+14),HL
010E23 D48C 13               6      INC DE
       D48D                     NOROOT:
                                
       D48D                     SETDIR:
010E24 D48D CDB9D4          17      CALL    FILED
010E27 D490 1A               7      LD  A,(DE)
010E28 D491 FE5C             7      CP  05CH        ;\
010E2A D493 C0              11      RET NZ
010E2B D494 13               6      INC DE
       D495                     SETDIR1:
010E2C D495 3E10             7      LD  A,010H      ;Directory
010E2E D497 3221E4          13      LD  (FDRV+13),A
010E31 D49A D5              11      PUSH    DE
010E32 D49B 1114E4          10      LD  DE,FDRV
010E35 D49E 2A1EE5          16      LD  HL,(STABLE+2*00FH)
010E38 D4A1 CD0F00          17      CALL    JP_HL
010E3B D4A4 D1              10      POP DE
010E3C D4A5 B7               4      OR  A
010E3D D4A6 C0              11      RET NZ
                                
010E3E D4A7 3A21E4          13      LD  A,(FDRV+13)
010E41 D4AA CB67             8      BIT 4,A
010E43 D4AC C8              11      RET Z
                                
010E44 D4AD CD00D5          17      CALL    FILEI
010E47 D4B0 2A2EE4          16      LD  HL,(FDRV+26)
010E4A D4B3 23               6      INC HL
010E4B D4B4 2222E4          16      LD  (FDRV+14),HL
010E4E D4B7 18D4            12      JR  SETDIR
                                
       D4B9                     FILED:
010E50 D4B9 CD00D5          17      CALL    FILEI
010E53 D4BC 2115E4          10      LD  HL,FNAME
                                
010E56 D4BF 0608             7      LD  B,8
       D4C1                     FILE2:
010E58 D4C1 CD0DD5          17      CALL    CCHKF
010E5B D4C4 C8              11      RET Z
010E5C D4C5 FE2A             7      CP  '*'
010E5E D4C7 282E            12      JR  Z,FILE9
010E60 D4C9 FE2E             7      CP  '.'
010E62 D4CB 280C            12      JR  Z,FILE4
010E64 D4CD 77               7      LD  (HL),A
010E65 D4CE 23               6      INC HL
010E66 D4CF 10F0            13      DJNZ    FILE2
                                
       D4D1                     FILE3:
010E68 D4D1 CD0DD5          17      CALL    CCHKF
010E6B D4D4 C8              11      RET Z
010E6C D4D5 FE2E             7      CP  '.'
010E6E D4D7 20F8            12      JR  NZ,FILE3
                                
       D4D9                     FILE4:
010E70 D4D9 211DE4          10      LD  HL,FNAME+8
010E73 D4DC 0603             7      LD  B,3
                                
       D4DE                     FILE4L:
010E75 D4DE CD0DD5          17      CALL    CCHKF
010E78 D4E1 C8              11      RET Z
010E79 D4E2 FE2E             7      CP  '.'
010E7B D4E4 2008            12      JR  NZ,FILE12
010E7D D4E6 3215E4          13      LD  (FNAME),A   ;Parent directory(..)
010E80 D4E9 3216E4          13      LD  (FNAME+1),A
010E83 D4EC 3E20             7      LD  A,020H
       D4EE                     FILE12:
010E85 D4EE FE2A             7      CP  '*'
010E87 D4F0 280A            12      JR  Z,FILE10
010E89 D4F2 77               7      LD  (HL),A
010E8A D4F3 23               6      INC HL
010E8B D4F4 10E8            13      DJNZ    FILE4L
010E8D D4F6 C9              10      RET
                                
       D4F7                     FILE9:              ;名前の*処理、名前の残りを?で埋める
010E8E D4F7 CDFCD4          17      CALL    FILE10
010E91 D4FA 18D5            12      JR  FILE3
                                
       D4FC                     FILE10:
010E93 D4FC 3E3F             7      LD  A,'?'
010E95 D4FE 1808            12      JR  FILL_MEMORY
       D500                     FILEI:              ;名前＋拡張子をスペースで初期化
010E97 D500 3E20             7      LD  A,020H
010E99 D502 01000B          10      LD  BC,11*256   ;C=0にしておく
010E9C D505 2115E4          10      LD  HL,FNAME
       D508                     FILL_MEMORY:            ;HLからBバイトAで埋める
010E9F D508 77               7      LD  (HL),A
010EA0 D509 23               6      INC HL
010EA1 D50A 10FC            13      DJNZ    FILL_MEMORY
010EA3 D50C C9              10      RET
                                
       D50D                     CCHKF:
010EA4 D50D 1A               7      LD  A,(DE)
010EA5 D50E CD15D5          17      CALL    CCHK2
010EA8 D511 C8              11      RET Z
010EA9 D512 C380D8          10      JP  FKAN
                                
       D515                     CCHK2:
010EAC D515 0C               4      INC C
010EAD D516 0D               4      DEC C
010EAE D517 C0              11      RET NZ
       D518                     CCHK3:              ;ZF=1 で使えない文字
010EAF D518 FE2B             7      CP  '+'
010EB1 D51A C8              11      RET Z
010EB2 D51B FE2C             7      CP  ','
010EB4 D51D C8              11      RET Z
010EB5 D51E FE2F             7      CP  '/'
010EB7 D520 C8              11      RET Z
010EB8 D521 FE3A             7      CP  ':'
010EBA D523 C8              11      RET Z
010EBB D524 FE3B             7      CP  ';'
010EBD D526 C8              11      RET Z
010EBE D527 FE3D             7      CP  '='
010EC0 D529 C8              11      RET Z
010EC1 D52A FE5C             7      CP  05CH    ;\
010EC3 D52C C8              11      RET Z
010EC4 D52D FE20             7      CP  020H
010EC6 D52F D0              11      RET NC
010EC7 D530 BF               4      CP  A       ;Z=1
010EC8 D531 C9              10      RET
                                
       D532                     SS1:
010EC9 D532 13               6      INC DE
       D533                     SPCUT:              ;スペースをカット
010ECA D533 1A               7      LD  A,(DE)
010ECB D534 FE20             7      CP  020H
010ECD D536 28FA            12      JR  Z,SS1
010ECF D538 C9              10      RET
                                
       D539                     SETDRVF:
010ED0 D539 1114E4          10      LD  DE,FDRV
       D53C                     SETDRV0:
010ED3 D53C CD45D5          17      CALL    SETDRV
010ED6 D53F FDE1            14      POP IY
010ED8 D541 C1              10      POP BC
010ED9 D542 D1              10      POP DE
010EDA D543 E1              10      POP HL
010EDB D544 C9              10      RET
                                
       D545                     SETDRV:
010EDC D545 E3              19      EX  (SP),HL     ;HL=RETRN ADDRESS
010EDD D546 D5              11      PUSH    DE      ;PUSH HL/DE/BC/IY
010EDE D547 C5              11      PUSH    BC
010EDF D548 1A               7      LD  A,(DE)
010EE0 D549 D5              11      PUSH    DE
010EE1 D54A FDE3            23      EX  (SP),IY
                                
010EE3 D54C CD53D5          17      CALL    GETDRV
010EE6 D54F CDD9E4          17      CALL    _CHGDRV
                                
010EE9 D552 E9               4      JP  (HL)
                                
       D553                     GETDRV:
010EEA D553 CD66D5          17      CALL    GETDRV1
010EED D556 3288E4          13      LD  (_DRV),A
010EF0 D559 C9              10      RET
                                
       D55A                     IS_SAME_DRV_A_DE:
                                ;   A と (DE) が同じドライブか調べる
                                ;   ZF=1ならば同じドライブ
010EF1 D55A CD66D5          17      CALL    GETDRV1
010EF4 D55D C5              11      PUSH    BC
010EF5 D55E 4F               4      LD  C,A
010EF6 D55F 1A               7      LD  A,(DE)
010EF7 D560 CD66D5          17      CALL    GETDRV1
010EFA D563 A9               4      XOR C
010EFB D564 C1              10      POP BC
010EFC D565 C9              10      RET
       D566                     GETDRV1:
010EFD D566 E67F             7      AND 07FH
010EFF D568 D601             7      SUB 001H
010F01 D56A D0              11      RET NC
010F02 D56B 3A87E4          13      LD  A,(_DVSW)   ;Current Drive
010F05 D56E C9              10      RET
                                
       D56F                     SOPENX:
010F06 D56F 1139E4          10      LD  DE,SFILE
010F09 D572 FD7E00          19      LD  A,(IY+0)        ;(FCB)ドライブ番号
010F0C D575 CD5AD5          17      CALL    IS_SAME_DRV_A_DE
010F0F D578 2024            12      JR  NZ,SOPEN
010F11 D57A 13               6      INC DE
010F12 D57B FDE5            15      PUSH    IY
010F14 D57D E1              10      POP HL
010F15 D57E 23               6      INC HL
010F16 D57F CD0BD7          17      CALL    CPFILE
010F19 D582 201A            12      JR  NZ,SOPEN
                                
010F1B D584 2AF4E5          16      LD  HL,(SCDIR)
010F1E D587 FD750E          19      LD  (IY+14),L   ;(FCB)アクセスするディレクトリのクラスタ番号+1
010F21 D58A FD740F          19      LD  (IY+15),H
                                
010F24 D58D 2AF8E5          16      LD  HL,(SFNDF)  ;Direcroty location and Flags
010F27 D590 229FE4          16      LD  (_FILEN),HL
                                
010F2A D593 ED5BF6E5        20      LD  DE,(SFBPS)
010F2E D597 2139E4          10      LD  HL,SFILE
010F31 D59A 36FF            10      LD  (HL),0FFH
010F33 D59C 23               6      INC HL
010F34 D59D C9              10      RET
       D59E                     SOPEN:
010F35 D59E 21B3D6          10      LD  HL,FILESE
       D5A1                     SOPENC:
010F38 D5A1 22DAD5          16      LD  (OPENPAT),HL
                                
010F3B D5A4 CDE2E4          17      CALL    _RDFATX     ;Detect Media
010F3E D5A7 3856            12      JR  C,RDDERR
                                
010F40 D5A9 AF               4      XOR A
010F41 D5AA 329FE4          13      LD  (_FILEN),A
010F44 D5AD CDB3D7          17      CALL    LDDIRX1     ;A=0で呼び出す
010F47 D5B0 2818            12      JR  Z,SDIRX1
                                
010F49 D5B2 CDA4D6          17      CALL    READ_DIR    ;Sub Directory
010F4C D5B5 3808            12      JR  C,SDIRX0
010F4E D5B7 2A7EE5          16      LD  HL,(_DTBUF)
010F51 D5BA 7E               7      LD  A,(HL)
010F52 D5BB FE2E             7      CP  '.'
010F54 D5BD 280F            12      JR  Z,SOPEN1
       D5BF                     SDIRX0:
010F56 D5BF AF               4      XOR A
010F57 D5C0 32A0E4          13      LD  (_DIRF),A
010F5A D5C3 FD360E01        19      LD  (IY+14),1   ;(FCB)レコードサイズ
010F5E D5C7 FD770F          19      LD  (IY+15),A
       D5CA                     SDIRX1:
010F61 D5CA ED5BFCE5        20      LD  DE,(_DIRPS) ;Root Directory
       D5CE                     SOPEN1:
010F65 D5CE 0E20             7      LD  C,32        ;自己書き換え 1セクタ辺りのディレクトリエントリ数  1024=32 / 512=16 / 256=8
       D5CF                     SDECPAT EQU $-1
       D5D0                     SOPEN1X:
010F67 D5D0 CDA4D6          17      CALL    READ_DIR    ;FILE SEARCH
010F6A D5D3 382A            12      JR  C,RDDERR
010F6C D5D5 2A7EE5          16      LD  HL,(_DTBUF)
       D5D8                     SOPEN2:
010F6F D5D8 D5              11      PUSH    DE
010F70 D5D9 CDB3D6          17      CALL    FILESE      ;(self-modifying code)
       D5DA                     OPENPAT EQU $-2
010F73 D5DC D1              10      POP DE
010F74 D5DD 386D            12      JR  C,SOPENE
010F76 D5DF 281B            12      JR  Z,SCF_FF_RET
       D5E1                     SOPEN3:
010F78 D5E1 3AA0E4          13      LD  A,(_DIRF)   ;ディレクトリか判別
010F7B D5E4 B7               4      OR  A
010F7C D5E5 200C            12      JR  NZ,SOPEN5
010F7E D5E7 13               6      INC DE      ;ルートディレクトリ
010F7F D5E8 E5              11      PUSH    HL
010F80 D5E9 210C00          10      LD  HL,12       ;(self-modifying code)MAXDIR
       D5EA                     MD_PAT  EQU $-2
010F83 D5EC ED52            15      SBC HL,DE       ;CF=0 なので SUB HL,DE
010F85 D5EE E1              10      POP HL
010F86 D5EF 20DD            12      JR  NZ,SOPEN1
010F88 D5F1 1807            12      JR  SOPEN6
       D5F3                     SOPEN5:
010F8A D5F3 CDC2DE          17      CALL    GNCLX       ;END DIR
010F8D D5F6 D8              11      RET C
010F8E D5F7 CD6BD7          17      CALL    ENDCL
       D5FA                     SOPEN6:
010F91 D5FA 38D2            12      JR  C,SOPEN1
       D5FC                     SCF_FF_RET:
010F93 D5FC 37               4      SCF         ;CF=1
010F94 D5FD 9F               4      SBC A,A     ;A=0FFH
010F95 D5FE C9              10      RET
                                
       D5FF                     RDDERR:
010F96 D5FF BF               4      CP  A       ;READ ERR CF=1 ZF=1
010F97 D600 37               4      SCF
010F98 D601 C9              10      RET
                                
       D602                     NOPEN:
010F99 D602 21B3D6          10      LD  HL,FILESE
010F9C D605 22DAD5          16      LD  (OPENPAT),HL
010F9F D608 FD2A98E4        20      LD  IY,(_FCB)
010FA3 D60C CD93D8          17      CALL    CHKWILDX
010FA6 D60F 30EB            12      JR  NC,SCF_FF_RET
010FA8 D611 FD7E00          19      LD  A,(IY+0)
010FAB D614 CD53D5          17      CALL    GETDRV
010FAE D617 CDD9E4          17      CALL    _CHGDRV
010FB1 D61A D8              11      RET C
010FB2 D61B 2AF8E5          16      LD  HL,(SFNDF)  ;Direcroty location and Flags
010FB5 D61E 229FE4          16      LD  (_FILEN),HL
                                
010FB8 D621 CDAED7          17      CALL    LDDIRX
010FBB D624 ED5B9AE4        20      LD  DE,(_FBPS)
010FBF D628 CDA4D6          17      CALL    READ_DIR
010FC2 D62B 38D2            12      JR  C,RDDERR
010FC4 D62D 3A9EE4          13      LD  A,(_FBCNT)
010FC7 D630 3D               4      DEC A
010FC8 D631 28AE            12      JR  Z,SOPEN3
       D633                     NOPEN2:
010FCA D633 2A9CE4          16      LD  HL,(_FBAD)
010FCD D636 012000          10      LD  BC,020H
010FD0 D639 09              11      ADD HL,BC
010FD1 D63A 4F               4      LD  C,A
010FD2 D63B 189B            12      JR  SOPEN2
                                
       D63D                     SOPENE2:
010FD4 D63D 229CE4          16      LD  (_FBAD),HL
010FD7 D640 79               4      LD  A,C
010FD8 D641 329EE4          13      LD  (_FBCNT),A
010FDB D644 ED539AE4        20      LD  (_FBPS),DE
010FDF D648 FD2298E4        20      LD  (_FCB),IY
       D64C                     SOPENE:
010FE3 D64C AF               4      XOR A
010FE4 D64D C9              10      RET
                                
       D64E                     COPEN:
010FE5 D64E FD360D20        19      LD  (IY+13),020H    ;(FCB)属性(アトリビュート)
                                
010FE9 D652 21D0D6          10      LD  HL,NEXTSE
010FEC D655 CDA1D5          17      CALL    SOPENC
010FEF D658 D0              11      RET NC
010FF0 D659 C8              11      RET Z
010FF1 D65A 3AA0E4          13      LD  A,(_DIRF)   ;ディレクトリか判別
010FF4 D65D B7               4      OR  A
010FF5 D65E 37               4      SCF
010FF6 D65F C8              11      RET Z       ;ルートディレクトリ
010FF7 D660 0601             7      LD  B,1
010FF9 D662 CDF2D8          17      CALL    WRDF
010FFC D665 D8              11      RET C
010FFD D666 ED5BFEE5        20      LD  DE,(_CLPS)
011001 D66A D5              11      PUSH    DE
011002 D66B CD34D7          17      CALL    DCPAT
011005 D66E CD4DDD          17      CALL    DRDNX
011008 D671 2A7EE5          16      LD  HL,(_DTBUF) ;ディレクトリエントリを0クリア
01100B D674 3A57DC          13      LD  A,(SECSZ+2) ;1024=4 / 512=2 / 256=1
01100E D677 47               4      LD  B,A
01100F D678 AF               4      XOR A
011010 D679 4F               4      LD  C,A
       D67A                     COPENCL:
011011 D67A 77               7      LD  (HL),A
011012 D67B EDA1            16      CPI         ;HL=HL+1 BC=BC-1 BCが0の場合にP/V=0
011014 D67D EA7AD6          10      JP  PE,COPENCL
                                
011017 D680 3A52D7          13      LD  A,(SPCPAT)  ;1クラスタの論理セクタ数
01101A D683 3D               4      DEC A
01101B D684 2819            12      JR  Z,COPENE
01101D D686 3E01             7      LD  A,1     ;1セクタ辺りのセクタ数が2以上の場合
01101F D688 32BADE          13      LD  (_SECPS),A
011022 D68B D1              10      POP DE      ;DE=(_CLPS)
011023 D68C D5              11      PUSH    DE
       D68D                     COPEN1:
011024 D68D D5              11      PUSH    DE      ;データバッファに入らないセクタもゼロクリア
011025 D68E C5              11      PUSH    BC
011026 D68F 2A7EE5          16      LD  HL,(_DTBUF)
011029 D692 CD4ED7          17      CALL    CLUSTX
01102C D695 CD50E0          17      CALL    DWT24
01102F D698 C1              10      POP BC
011030 D699 D1              10      POP DE
011031 D69A CDB9DE          17      CALL    NEXTX
011034 D69D 20EE            12      JR  NZ,COPEN1
       D69F                     COPENE:
011036 D69F 2A7EE5          16      LD  HL,(_DTBUF)
011039 D6A2 D1              10      POP DE
01103A D6A3 C9              10      RET
                                
       D6A4                     READ_DIR:
01103B D6A4 ED53FEE5        20      LD  (_CLPS),DE
01103F D6A8 C5              11      PUSH    BC
011040 D6A9 D5              11      PUSH    DE
011041 D6AA CD34D7          17      CALL    DCPAT
011044 D6AD CD2DDD          17      CALL    DRDX
011047 D6B0 D1              10      POP DE
011048 D6B1 C1              10      POP BC
011049 D6B2 C9              10      RET
                                
       D6B3                     FILESE:
01104A D6B3 7E               7      LD  A,(HL)
01104B D6B4 B7               4      OR  A
01104C D6B5 C8              11      RET Z       ;END:ZF=1 CF=0
01104D D6B6 FEE5             7      CP  0E5H
01104F D6B8 280E            12      JR  Z,FILESE1
011051 D6BA FDE5            15      PUSH    IY
011053 D6BC D1              10      POP DE
011054 D6BD 13               6      INC DE
011055 D6BE E5              11      PUSH    HL
011056 D6BF CD0BD7          17      CALL    CPFILE
011059 D6C2 CC2CD7          17      CALL    Z,CPFILE2
01105C D6C5 E1              10      POP HL
01105D D6C6 37               4      SCF
01105E D6C7 C8              11      RET Z       ;!!!:(ZF=1) CF=1
       D6C8                     FILESE1:
01105F D6C8 CDDFD6          17      CALL    FNEXT
011062 D6CB 20E6            12      JR  NZ,FILESE
       D6CD                     ZF0_CF0_AFF_RET:
011064 D6CD F6FF             7      OR  0FFH        ;ZF=0 CF=0
011066 D6CF C9              10      RET
                                
       D6D0                     NEXTSE:
011067 D6D0 7E               7      LD  A,(HL)
011068 D6D1 B7               4      OR  A
011069 D6D2 37               4      SCF
01106A D6D3 C8              11      RET Z       ;!!!:ZF=1 CF=1
01106B D6D4 FEE5             7      CP  0E5H
01106D D6D6 37               4      SCF
01106E D6D7 C8              11      RET Z       ;!!!:(ZF=1) CF=1
01106F D6D8 CDDFD6          17      CALL    FNEXT
011072 D6DB 20F3            12      JR  NZ,NEXTSE
011074 D6DD 18EE            12      JR  ZF0_CF0_AFF_RET
                                
       D6DF                     FNEXT:
011076 D6DF E5              11      PUSH    HL
011077 D6E0 219FE4          10      LD  HL,_FILEN
01107A D6E3 34              11      INC (HL)
01107B D6E4 E1              10      POP HL
01107C D6E5 112000          10      LD  DE,020H
01107F D6E8 19              11      ADD HL,DE
011080 D6E9 0D               4      DEC C
011081 D6EA C9              10      RET
                                
       D6EB                     CPNAME:
011082 D6EB C5              11      PUSH    BC
011083 D6EC D5              11      PUSH    DE
011084 D6ED E5              11      PUSH    HL
011085 D6EE CD05D7          17      CALL    CPFILE4
011088 D6F1 E1              10      POP HL
011089 D6F2 23               6      INC HL
01108A D6F3 23               6      INC HL
01108B D6F4 23               6      INC HL
01108C D6F5 23               6      INC HL
01108D D6F6 D1              10      POP DE
01108E D6F7 C1              10      POP BC
01108F D6F8 2005            12      JR  NZ,CPNAME1
011091 D6FA 7E               7      LD  A,(HL)
011092 D6FB 23               6      INC HL
011093 D6FC 66               7      LD  H,(HL)
011094 D6FD 6F               4      LD  L,A
011095 D6FE C9              10      RET
       D6FF                     CPNAME1:
011096 D6FF 23               6      INC HL
011097 D700 23               6      INC HL
011098 D701 10E8            13      DJNZ    CPNAME
01109A D703 37               4      SCF
01109B D704 C9              10      RET
                                
       D705                     CPFILE4:
01109C D705 C5              11      PUSH    BC
01109D D706 010004          10      LD  BC,00400H
0110A0 D709 1804            12      JR  CPSTR1
       D70B                     CPFILE:
0110A2 D70B C5              11      PUSH    BC
0110A3 D70C 01000B          10      LD  BC,00B00H
       D70F                     CPSTR1:
0110A6 D70F 1A               7      LD  A,(DE)
0110A7 D710 FE3F             7      CP  '?'     ;Wild card
0110A9 D712 2812            12      JR  Z,CPSTR2
0110AB D714 7E               7      LD  A,(HL)
0110AC D715 CD79D8          17      CALL    FKANC
0110AF D718 E5              11      PUSH    HL
0110B0 D719 67               4      LD  H,A
0110B1 D71A 1A               7      LD  A,(DE)
0110B2 D71B CB01             4      RLC C
0110B4 D71D CD79D8          17      CALL    FKANC
0110B7 D720 CB09             4      RRC C
0110B9 D722 BC               4      CP  H       ;CP (HL),(DE)
0110BA D723 E1              10      POP HL
0110BB D724 2004            12      JR  NZ,CPSTR3
       D726                     CPSTR2:
0110BD D726 13               6      INC DE
0110BE D727 23               6      INC HL
0110BF D728 10E5            13      DJNZ    CPSTR1
       D72A                     CPSTR3:
0110C1 D72A C1              10      POP BC
0110C2 D72B C9              10      RET
                                
       D72C                     CPFILE2:
0110C3 D72C FD7E0D          19      LD  A,(IY+13)   ;(FCB)属性(アトリビュート)
0110C6 D72F F6E1             7      OR  0E1H
0110C8 D731 2F               4      CPL
0110C9 D732 A6               7      AND (HL)
0110CA D733 C9              10      RET
                                
       D734                     DCPAT:
0110CB D734 0E00             7      LD  C,0
0110CD D736 2A7EE5          16      LD  HL,(_DTBUF)
0110D0 D739 3AA0E4          13      LD  A,(_DIRF)   ;ディレクトリか判別
0110D3 D73C B7               4      OR  A
0110D4 D73D C8              11      RET Z       ;ルートディレクトリの場合はCレジスタを0にしておく(CDEがセクタ番号)
0110D5 D73E 3A52D7          13      LD  A,(SPCPAT)
0110D8 D741 4F               4      LD  C,A
0110D9 D742 3ABADE          13      LD  A,(_SECPS)
0110DC D745 B9               4      CP  C
0110DD D746 3801            12      JR  C,DC1
0110DF D748 AF               4      XOR A
       D749                     DC1:
0110E0 D749 F680             7      OR  080H
0110E2 D74B 32A0E4          13      LD  (_DIRF),A   ;bit0-6:セクタインデックス
       D74E                     CLUSTX:
0110E5 D74E E5              11      PUSH    HL
0110E6 D74F EB               4      EX  DE,HL
0110E7 D750 AF               4      XOR A
0110E8 D751 0E01             7      LD  C,1     ;自己書き換え（1クラスタの論理セクタ数）
       D752                     SPCPAT  EQU $-1
       D753                     L_CLDBL:
0110EA D753 CB19             8      RR  C       ;->CF
0110EC D755 3804            12      JR  C,E_CLDBL
0110EE D757 29              11      ADD HL,HL       ;*2
0110EF D758 8F               4      ADC A,A
0110F0 D759 18F8            12      JR  L_CLDBL
       D75B                     E_CLDBL:
0110F2 D75B 4F               4      LD  C,A
0110F3 D75C 3ABADE          13      LD  A,(_SECPS)
0110F6 D75F B5               4      OR  L
0110F7 D760 6F               4      LD  L,A
0110F8 D761 110800          10      LD  DE,8    ;+8 (2D)  !ADDCL (self-modifying code)
       D762                     CLSPAT  EQU $-2
0110FB D764 AF               4      XOR A
0110FC D765 19              11      ADD HL,DE   ;データ格納領域の先頭論理セクタ番号
0110FD D766 89               4      ADC A,C
0110FE D767 4F               4      LD  C,A
0110FF D768 EB               4      EX  DE,HL
011100 D769 E1              10      POP HL
011101 D76A C9              10      RET
                                
       D76B                     ENDCL:
011102 D76B 7A               4      LD  A,D ;END CLUSTER
011103 D76C FE01             7      CP  1   ;164=356    (self-modifying code)
       D76D                     CLPAT1  EQU $-1
011105 D76E C0              11      RET NZ
011106 D76F 7B               4      LD  A,E
011107 D770 FE64             7      CP  064H    ;       (self-modifying code)
       D771                     CLPAT2  EQU $-1
011109 D772 C9              10      RET
                                
       D773                     CAP:
01110A D773 FE61             7      CP  'a'
01110C D775 D8              11      RET C
01110D D776 FE7B             7      CP  'z'+1
01110F D778 D0              11      RET NC
011110 D779 D620             7      SUB 020H
011112 D77B C9              10      RET
       D77C                     CAP2:
011113 D77C CD73D7          17      CALL    CAP
       D77F                     CAP3:               ;
011116 D77F FE05             7      CP  5
011118 D781 2803            12      JR  Z,CAP4
01111A D783 FE21             7      CP  021H
01111C D785 C9              10      RET
       D786                     CAP4:
01111D D786 3EE5             7      LD  A,0E5H
01111F D788 C9              10      RET
                                
       D789                     CHDIR:
011120 D789 CD63E1          17      CALL    GETDPBD
011123 D78C 381D            12      JR  C,CHDIR2
011125 D78E DD751A          19      LD  (IX+DPB_SDIR),L
011128 D791 DD741B          19      LD  (IX+DPB_SDIR+1),H
01112B D794 1815            12      JR  CHDIR2      ;POP_IX_RET
                                
       D796                     LDDIR:
01112D D796 CD63E1          17      CALL    GETDPBD
011130 D799 DD5E1A          19      LD  E,(IX+DPB_SDIR)
011133 D79C DD561B          19      LD  D,(IX+DPB_SDIR+1)
011136 D79F 13               6      INC DE
011137 D7A0 FD730E          19      LD  (IY+14),E   ;(FCB)アクセスするディレクトリのクラスタ番号+1
01113A D7A3 FD720F          19      LD  (IY+15),D
01113D D7A6 1B               6      DEC DE
01113E D7A7 AF               4      XOR A
01113F D7A8 32A0E4          13      LD  (_DIRF),A
       D7AB                     CHDIR2:
011142 D7AB DDE1            14      POP IX
011144 D7AD C9              10      RET
                                
       D7AE                     LDDIRX:
011145 D7AE 3AA0E4          13      LD  A,(_DIRF)   ;(FCB)アクセスするディレクトリのセクタインデックス
011148 D7B1 E67F             7      AND 07FH
       D7B3                     LDDIRX1:
01114A D7B3 32BADE          13      LD  (_SECPS),A
01114D D7B6 FD5E0E          19      LD  E,(IY+14)   ;(FCB)アクセスするディレクトリのクラスタ番号+1
011150 D7B9 FD560F          19      LD  D,(IY+15)
011153 D7BC 1B               6      DEC DE
011154 D7BD CD6BD7          17      CALL    ENDCL
011157 D7C0 D496D7          17      CALL    NC,LDDIR
       D7C3                     LDDIRS:
01115A D7C3 7A               4      LD  A,D
01115B D7C4 B3               4      OR  E
01115C D7C5 32A0E4          13      LD  (_DIRF),A   ;ディレクトリか判別
01115F D7C8 C9              10      RET
                                
       D7C9                     KILL:
011160 D7C9 CD93D8          17      CALL    CHKWILDX
011163 D7CC 3834            12      JR  C,KILLW
011165 D7CE CD6FD5          17      CALL    SOPENX
       D7D1                     KILLS:
011168 D7D1 3E1F             7      LD  A,01FH
01116A D7D3 D415D8          17      CALL    NC,CHKATT
01116D D7D6 D8              11      RET C
       D7D7                     KILLSX:
01116E D7D7 36E5            10      LD  (HL),0E5H   ;DIR
011170 D7D9 CD6DD8          17      CALL    WTDB
011173 D7DC 111A00          10      LD  DE,01AH
011176 D7DF 19              11      ADD HL,DE
011177 D7E0 5E               7      LD  E,(HL)
011178 D7E1 23               6      INC HL
011179 D7E2 56               7      LD  D,(HL)
       D7E3                     KILLS1:
01117A D7E3 CD6BD7          17      CALL    ENDCL
01117D D7E6 D0              11      RET NC      ;CF=0
01117E D7E7 21FEFF          10      LD  HL,0-2
011181 D7EA 19              11      ADD HL,DE
011182 D7EB D0              11      RET NC      ;DE= 0 or 1
011183 D7EC D5              11      PUSH    DE
011184 D7ED CDF7E4          17      CALL    _GNCL
011187 D7F0 ED53FEE5        20      LD  (_CLPS),DE
01118B D7F4 D1              10      POP DE
01118C D7F5 210000          10      LD  HL,0
01118F D7F8 D4FAE4          17      CALL    NC,_SNCL
011192 D7FB D8              11      RET C
011193 D7FC ED5BFEE5        20      LD  DE,(_CLPS)  ;FAT
011197 D800 18E1            12      JR  KILLS1
                                
       D802                     KILLW:
011199 D802 CD9ED5          17      CALL    SOPEN
       D805                     KILLW1:
01119C D805 380B            12      JR  C,KILLW2
01119E D807 CD3DD6          17      CALL    SOPENE2
0111A1 D80A CDD1D7          17      CALL    KILLS
0111A4 D80D CD02D6          17      CALL    NOPEN
0111A7 D810 18F3            12      JR  KILLW1
       D812                     KILLW2:
0111A9 D812 C8              11      RET Z
0111AA D813 3F               4      CCF
0111AB D814 C9              10      RET
                                
       D815                     CHKATT:
0111AC D815 E5              11      PUSH    HL
0111AD D816 110B00          10      LD  DE,00BH
0111B0 D819 19              11      ADD HL,DE
0111B1 D81A A6               7      AND (HL)
0111B2 D81B E1              10      POP HL
0111B3 D81C C8              11      RET Z
0111B4 D81D 37               4      SCF
0111B5 D81E C9              10      RET
                                
       D81F                     NAME:
0111B6 D81F CD93D8          17      CALL    CHKWILDX
0111B9 D822 D8              11      RET C
0111BA D823 110400          10      LD  DE,4
0111BD D826 19              11      ADD HL,DE
0111BE D827 223CD8          16      LD  (NAMEP),HL
0111C1 D82A 23               6      INC HL
0111C2 D82B CD97D8          17      CALL    CHKWILD
0111C5 D82E D8              11      RET C
                                
0111C6 D82F CD6FD5          17      CALL    SOPENX
0111C9 D832 3E0F             7      LD  A,00FH
0111CB D834 D415D8          17      CALL    NC,CHKATT
0111CE D837 D8              11      RET C
                                
0111CF D838 FDE5            15      PUSH    IY
0111D1 D83A FD210000        14      LD  IY,0        ;自己書き換え
       D83C                     NAMEP   EQU $-2
0111D5 D83E CD6FD5          17      CALL    SOPENX
0111D8 D841 FDE3            23      EX  (SP),IY
0111DA D843 3F               4      CCF
0111DB D844 D49ED5          17      CALL    NC,SOPEN
0111DE D847 EB               4      EX  DE,HL
0111DF D848 E1              10      POP HL
0111E0 D849 D8              11      RET C
                                
       D84A                     SETNAME:
0111E1 D84A 01000B          10      LD  BC,11*256
0111E4 D84D 23               6      INC HL
0111E5 D84E 7E               7      LD  A,(HL)
0111E6 D84F FEE5             7      CP  0E5H
0111E8 D851 2004            12      JR  NZ,SNAME1
0111EA D853 3E05             7      LD  A,5
0111EC D855 180E            12      JR  SNAME3
       D857                     SNAME1:
0111EE D857 7E               7      LD  A,(HL)
0111EF D858 0C               4      INC C
0111F0 D859 0D               4      DEC C
0111F1 D85A 2009            12      JR  NZ,SNAME3
0111F3 D85C CD73D7          17      CALL    CAP
0111F6 D85F FEA0             7      CP  0A0H
0111F8 D861 2002            12      JR  NZ,SNAME3
0111FA D863 3E20             7      LD  A,020H
       D865                     SNAME3:
0111FC D865 12               7      LD  (DE),A
0111FD D866 7E               7      LD  A,(HL)
0111FE D867 23               6      INC HL
0111FF D868 CD80D8          17      CALL    FKAN
011202 D86B 10EA            13      DJNZ    SNAME1
       D86D                     WTDB:
011204 D86D 3EFF             7      LD  A,0FFH
011206 D86F 3239E4          13      LD  (SFILE),A
       D872                     SWTDBF:
011209 D872 3E01             7      LD  A,1
01120B D874 32A4E4          13      LD  (_WTDBF),A
01120E D877 AF               4      XOR A
01120F D878 C9              10      RET
                                
       D879                     FKANC:
011210 D879 CB41             8      BIT 0,C
011212 D87B CC7CD7          17      CALL    Z,CAP2
011215 D87E 1801            12      JR  FKANX
       D880                     FKAN:           ;漢字チェック
011217 D880 13               6      INC DE
       D881                     FKANX:
011218 D881 CB41             8      BIT 0,C
01121A D883 CB81             8      RES 0,C
01121C D885 C0              11      RET NZ
01121D D886 FE80             7      CP  080H
01121F D888 D8              11      RET C
011220 D889 FEA0             7      CP  0A0H
011222 D88B 3803            12      JR  C,FKAN1
011224 D88D FEE0             7      CP  0E0H
011226 D88F D8              11      RET C
       D890                     FKAN1:
011227 D890 0C               4      INC C
011228 D891 A7               4      AND A
011229 D892 C9              10      RET
                                
       D893                     CHKWILDX:
01122A D893 FDE5            15      PUSH    IY
01122C D895 E1              10      POP HL
01122D D896 23               6      INC HL
       D897                     CHKWILD:
01122E D897 060B             7      LD  B,11
011230 D899 3E3F             7      LD  A,'?'
       D89B                     CHKWIL1:
011232 D89B BE               7      CP  (HL)
011233 D89C 23               6      INC HL
011234 D89D 37               4      SCF
011235 D89E C8              11      RET Z
011236 D89F 10FA            13      DJNZ    CHKWIL1
011238 D8A1 AF               4      XOR A
011239 D8A2 C9              10      RET
                                
       D8A3                     SDIRENT:        ;IY=FCB HL=DIR
01123A D8A3 D5              11      PUSH    DE
01123B D8A4 E5              11      PUSH    HL
01123C D8A5 FDE5            15      PUSH    IY
01123E D8A7 D1              10      POP DE
01123F D8A8 EB               4      EX  DE,HL
011240 D8A9 CD4AD8          17      CALL    SETNAME
                                ;               Attribute
011243 D8AC FD7E0D          19      LD  A,(IY+13)   ;(FCB)属性(アトリビュート)
011246 D8AF 12               7      LD  (DE),A
011247 D8B0 13               6      INC DE
                                ;               Reserved
011248 D8B1 AF               4      XOR A
011249 D8B2 060A             7      LD  B,10
       D8B4                     SDE1:
01124B D8B4 12               7      LD  (DE),A
01124C D8B5 13               6      INC DE
01124D D8B6 10FC            13      DJNZ    SDE1
                                                    ;(FCB)更新時刻
01124F D8B8 21E4E5          10      LD  HL,SDDATA       ;(FCB)更新年月日
011252 D8BB 060A             7      LD  B,SDDATAE-SDDATA    ;(FCB)ファイルの先頭クラスタ
       D8BD                     SDLOOP:                 ;(FCB)ファイルのサイズ(バイト単位)
011254 D8BD 7E               7      LD  A,(HL)
011255 D8BE 23               6      INC HL
011256 D8BF 32C4D8          13      LD  (SDPAT),A
011259 D8C2 FD7E00          19      LD  A,(IY+0)    ;LD A,(IY+A)
       D8C4                     SDPAT   EQU $-1
01125C D8C5 12               7      LD  (DE),A
01125D D8C6 13               6      INC DE
01125E D8C7 10F4            13      DJNZ    SDLOOP
                                
011260 D8C9 AF               4      XOR A
011261 D8CA E1              10      POP HL
011262 D8CB D1              10      POP DE
011263 D8CC C9              10      RET
                                
       D8CD                     WOPEN:
011264 D8CD FD7E0D          19      LD  A,(IY+13)   ;(FCB)属性(アトリビュート)
011267 D8D0 E61F             7      AND 01FH
011269 D8D2 37               4      SCF
01126A D8D3 C0              11      RET NZ
01126B D8D4 FD361CFE        19      LD  (IY+28),0FEH    ;(FCB)オープンモード
       D8D8                     TOPEN2:
01126F D8D8 AF               4      XOR A
       D8D9                     TOPEN:              ;Initializes the time stamp
011270 D8D9 FD3617FF        19      LD  (IY+23),0FFH    ;(FCB)更新時刻
011274 D8DD C9              10      RET
                                
       D8DE                     WRDFX:
011275 D8DE 3A52D7          13      LD  A,(SPCPAT)  ;1クラスタの論理セクタ
       D8E1                     L_WRFX:
011278 D8E1 1F               4      RRA         ;->CF
011279 D8E2 3806            12      JR  C,E_WRFX
01127B D8E4 CB39             8      SRL C
01127D D8E6 CB1C             8      RR  H       ;CH=CH/2
01127F D8E8 18F7            12      JR  L_WRFX
       D8EA                     E_WRFX:
011281 D8EA 41               4      LD  B,C
011282 D8EB 4C               4      LD  C,H
011283 D8EC 03               6      INC BC
011284 D8ED 3E37             7      LD  A,037H      ;SCF
011286 D8EF 324ADD          13      LD  (DRDN1),A
                                
       D8F2                     WRDF:               ;BCクラスタ分FATを確保する
011289 D8F2 110200          10      LD  DE,2
01128C D8F5 AF               4      XOR A
01128D D8F6 32BADE          13      LD  (_SECPS),A
       D8F9                     WRDF1:
011290 D8F9 C5              11      PUSH    BC
011291 D8FA D5              11      PUSH    DE
011292 D8FB CDF7E4          17      CALL    _GNCL
011295 D8FE 381C            12      JR  C,WRDF3
011297 D900 7A               4      LD  A,D     ;空いているかチェック
011298 D901 B3               4      OR  E
011299 D902 202A            12      JR  NZ,WRDF4
01129B D904 E1              10      POP HL      ;HL=空いているクラスタ
01129C D905 E5              11      PUSH    HL
01129D D906 ED5BFEE5        20      LD  DE,(_CLPS)  ;DE=元の(_CLPS)
0112A1 D90A 22FEE5          16      LD  (_CLPS),HL
0112A4 D90D 7A               4      LD  A,D     ;元の(_CLPS)が 0 か?
0112A5 D90E B3               4      OR  E
0112A6 D90F 2008            12      JR  NZ,WRDF2
0112A8 D911 FD751A          19      LD  (IY+26),L   ;(FCB)ファイルの先頭クラスタ
0112AB D914 FD741B          19      LD  (IY+27),H   ;元が空の場合はFCBにクラスタをセットする
0112AE D917 1803            12      JR  WRDF3
       D919                     WRDF2:
0112B0 D919 CDFAE4          17      CALL    _SNCL
       D91C                     WRDF3:
0112B3 D91C D1              10      POP DE
0112B4 D91D C1              10      POP BC
0112B5 D91E D8              11      RET C
0112B6 D91F 0B               6      DEC BC
0112B7 D920 78               4      LD  A,B
0112B8 D921 B1               4      OR  C
0112B9 D922 200C            12      JR  NZ,WRDF5    ;ここでループカウンタチェック
0112BB D924 ED5BFEE5        20      LD  DE,(_CLPS)
0112BF D928 21FFFF          10      LD  HL,0FFFFH   ;FATエントリ終了(EOCマーク)
0112C2 D92B C3FAE4          10      JP  _SNCL
                                
       D92E                     WRDF4:              ;DEクラスタが空じゃないので次に移動する
0112C5 D92E D1              10      POP DE
0112C6 D92F C1              10      POP BC
       D930                     WRDF5:
0112C7 D930 13               6      INC DE
0112C8 D931 CD6BD7          17      CALL    ENDCL
0112CB D934 38C3            12      JR  C,WRDF1
0112CD D936 37               4      SCF
0112CE D937 C9              10      RET
                                
       D938                     RWXR:
0112CF D938 3A57DC          13      LD  A,(SECSZ+2) ;1024=4 / 512=2 / 256=1
       D93B                     L_RWX:
0112D2 D93B 1F               4      RRA     ;->CF
0112D3 D93C 3808            12      JR  C,E_RWX
0112D5 D93E CB38             8      SRL B   ;BCH=BCH/2
0112D7 D940 CB19             8      RR  C   ;
0112D9 D942 CB1C             8      RR  H   ;
0112DB D944 18F5            12      JR  L_RWX
       D946                     E_RWX:
0112DD D946 FD5E1A          19      LD  E,(IY+26)   ;(FCB)ファイルの先頭クラスタ
0112E0 D949 FD561B          19      LD  D,(IY+27)
0112E3 D94C AF               4      XOR A
0112E4 D94D 32BADE          13      LD  (_SECPS),A
       D950                     RWX1:
0112E7 D950 ED53FEE5        20      LD  (_CLPS),DE
0112EB D954 7A               4      LD  A,D
0112EC D955 B3               4      OR  E
0112ED D956 2813            12      JR  Z,SCF_RET   ;RET DE==0 => CF=1
                                
0112EF D958 78               4      LD  A,B
0112F0 D959 B1               4      OR  C
0112F1 D95A B4               4      OR  H
0112F2 D95B C8              11      RET Z       ;RET BCH==0 => CF=0
                                
0112F3 D95C CDC2DE          17      CALL    GNCLX
0112F6 D95F D8              11      RET C
0112F7 D960 7C               4      LD  A,H     ;
0112F8 D961 25               4      DEC H       ;
0112F9 D962 B7               4      OR  A       ;DEC BCH
0112FA D963 2001            12      JR  NZ,RWX2     ;
0112FC D965 0B               6      DEC BC      ;
       D966                     RWX2:
0112FD D966 CD6BD7          17      CALL    ENDCL
011300 D969 38E5            12      JR  C,RWX1
       D96B                     SCF_RET:
011302 D96B 37               4      SCF
011303 D96C C9              10      RET
                                
       D96D                     DSKF:
011304 D96D 110000          10      LD  DE,0
       D96E                     MAXCLP  EQU $-2
011307 D970 2AACE4          16      LD  HL,(_FAKEFREE)
01130A D973 7C               4      LD  A,H
01130B D974 B5               4      OR  L
01130C D975 2803            12      JR  Z,DSKF1
01130E D977 110100          10      LD  DE,1
       D97A                     DSKF1:
011311 D97A D5              11      PUSH    DE
011312 D97B CDF7E4          17      CALL    _GNCL
011315 D97E 380C            12      JR  C,POPSCF
011317 D980 7A               4      LD  A,D
011318 D981 B3               4      OR  E
011319 D982 2001            12      JR  NZ,DSKF2
01131B D984 23               6      INC HL
       D985                     DSKF2:
01131C D985 D1              10      POP DE
01131D D986 1B               6      DEC DE
01131E D987 7A               4      LD  A,D
01131F D988 B3               4      OR  E
011320 D989 20EF            12      JR  NZ,DSKF1
011322 D98B C9              10      RET
                                
       D98C                     POPSCF:
011323 D98C F1              10      POP AF
011324 D98D 37               4      SCF
011325 D98E C9              10      RET
                                
       D98F                     SETTMS:
011326 D98F FD7E17          19      LD  A,(IY+23)   ;(FCB)ファイルを最後に変更した時刻
011329 D992 3C               4      INC A
01132A D993 C0              11      RET NZ      ;ファイルが更新されていない
       D994                     SETTMSX:            ;FCBに日付時刻をセットする
01132B D994 CD6CD1          17      CALL    _SYS2C      ;(BDOS)時刻の獲得
                                                ;H←時  L←分  D←秒
01132E D997 CB25             8      SLA L       ;   *2
011330 D999 CB25             8      SLA L       ;   *4
011332 D99B 29              11      ADD HL,HL       ;*2 *8
011333 D99C 29              11      ADD HL,HL       ;*4 *16
011334 D99D 29              11      ADD HL,HL       ;*8 *32
011335 D99E 7A               4      LD  A,D
011336 D99F 0F               4      RRCA            ;bit.0->7->->->0->C
011337 D9A0 E61F             7      AND 01FH
011339 D9A2 B5               4      OR  L
01133A D9A3 FD7716          19      LD  (IY+22),A   ;(FCB)ファイルを最後に変更した時刻
01133D D9A6 FD7417          19      LD  (IY+23),H
                                
011340 D9A9 CD66D1          17      CALL    _SYS2A      ;(BDOS)日付の獲得
                                                ;HL←年  D←月  E←日
011343 D9AC 0144F8          10      LD  BC,0-1980
011346 D9AF 09              11      ADD HL,BC
011347 D9B0 65               4      LD  H,L
                                
011348 D9B1 7A               4      LD  A,D
011349 D9B2 87               4      ADD A,A     ;*2
01134A D9B3 87               4      ADD A,A     ;*4
01134B D9B4 87               4      ADD A,A     ;*8
01134C D9B5 87               4      ADD A,A     ;*16
01134D D9B6 6F               4      LD  L,A
01134E D9B7 29              11      ADD HL,HL       ;*32
01134F D9B8 7D               4      LD  A,L
011350 D9B9 B3               4      OR  E
011351 D9BA FD7714          19      LD  (IY+20),A   ;(FCB)ファイルを最後に変更した日付
011354 D9BD FD7415          19      LD  (IY+21),H
011357 D9C0 C9              10      RET
                                
       D9C1                     PUSHRR:
011358 D9C1 3259DA          13      LD  (SETSEQ_SWC_RND),A
01135B D9C4 226BDA          16      LD  (SETSEQ_SWC_SEQ_RR),HL
01135E D9C7 CDE7D9          17      CALL    GET_RR_AHL
011361 D9CA 220FE4          16      LD  (RR_BUF_HL),HL
011364 D9CD 3211E4          13      LD  (RR_BUF_A),A
011367 D9D0 C9              10      RET
                                
       D9D1                     GET_CPM_R_SIZE:     ;バイト単位からCP/Mのレコード単位を求める（1レコード=128バイト）
011368 D9D1 87               4      ADD A,A     ;in BHLA => out AHL
011369 D9D2 ED6A            15      ADC HL,HL
01136B D9D4 CB18             8      RR  B
01136D D9D6 B7               4      OR  A
01136E D9D7 78               4      LD  A,B     ;ここでフラグは変化しない
01136F D9D8 C8              11      RET Z
011370 D9D9 2C               4      INC L       ;INC AHL
011371 D9DA C0              11      RET NZ      ;
011372 D9DB 24               4      INC H       ;
011373 D9DC C0              11      RET NZ      ;
011374 D9DD 3C               4      INC A       ;
011375 D9DE C9              10      RET
                                
       D9DF                     INIT_RND:
011376 D9DF 3ECD             7      LD  A,0CDH      ;CALL ????
011378 D9E1 212EDA          10      LD  HL,POPRR
01137B D9E4 CDC1D9          17      CALL    PUSHRR
       D9E7                     GET_RR_AHL:
01137E D9E7 FD6E21          19      LD  L,(IY+33)   ;(FCB)Random record
011381 D9EA FD6622          19      LD  H,(IY+34)   ;
011384 D9ED FD7E23          19      LD  A,(IY+35)   ;
011387 D9F0 C9              10      RET
       D9F1                     SET_RR_AHL:
011388 D9F1 FD7521          19      LD  (IY+33),L   ;(FCB)Random record
01138B D9F4 FD7422          19      LD  (IY+34),H
01138E D9F7 FD7723          19      LD  (IY+35),A
011391 D9FA C9              10      RET
       D9FB                     INIT_SEQ:
011392 D9FB 3E01             7      LD  A,1     ;LD BC,????
011394 D9FD 212BDA          10      LD  HL,SETSEQ
011397 DA00 CDC1D9          17      CALL    PUSHRR
       DA03                     GETSEQ:
01139A DA03 FD6E20          19      LD  L,(IY+32)   ;(FCB)カレントレコード
01139D DA06 FD660C          19      LD  H,(IY+12)   ;(FCB)カレントブロック
0113A0 DA09 AF               4      XOR A
                                
0113A1 DA0A CB25             8      SLA L   ;L=L*2
                                
0113A3 DA0C CB3C             8      SRL H   ;HL=HL/2
0113A5 DA0E CB1D             8      RR  L   ;
0113A7 DA10 C9              10      RET
                                
       DA11                     SETSEQ1:
0113A8 DA11 F5              11      PUSH    AF
0113A9 DA12 E5              11      PUSH    HL      ;AHL=Random record
0113AA DA13 CDE7D9          17      CALL    GET_RR_AHL
0113AD DA16 47               4      LD  B,A     ;AHL→HLA
0113AE DA17 7D               4      LD  A,L     ;(IY+33)(FCB)ランダムレコード
0113AF DA18 6C               4      LD  L,H     ;(IY+34)
0113B0 DA19 60               4      LD  H,B     ;(IY+35)
0113B1 DA1A 0600             7      LD  B,0
                                
0113B3 DA1C CDD1D9          17      CALL    GET_CPM_R_SIZE
                                
0113B6 DA1F 29              11      ADD HL,HL
0113B7 DA20 CB3D             8      SRL L       ;L=L/2
0113B9 DA22 FD7520          19      LD  (IY+32),L   ;(FCB)カレントレコード
0113BC DA25 FD740C          19      LD  (IY+12),H   ;(FCB)カレントブロック
0113BF DA28 E1              10      POP HL
0113C0 DA29 F1              10      POP AF
0113C1 DA2A C9              10      RET
       DA2B                     SETSEQ:
0113C2 DA2B CD11DA          17      CALL    SETSEQ1
       DA2E                     POPRR:
0113C5 DA2E F5              11      PUSH    AF
0113C6 DA2F E5              11      PUSH    HL
0113C7 DA30 2A0FE4          16      LD  HL,(RR_BUF_HL)
0113CA DA33 3A11E4          13      LD  A,(RR_BUF_A)
0113CD DA36 CDF1D9          17      CALL    SET_RR_AHL
0113D0 DA39 E1              10      POP HL
0113D1 DA3A F1              10      POP AF
0113D2 DA3B C9              10      RET
                                
       DA3C                     RB_WRITE:
0113D3 DA3C C5              11      PUSH    BC
0113D4 DA3D ED4B4CE5        20      LD  BC,(STABLE+2*026H)  ;(BDOS)ランダムブロック書き込み
0113D8 DA41 1805            12      JR  RBRW
       DA43                     RB_READ:
0113DA DA43 C5              11      PUSH    BC
0113DB DA44 ED4B4EE5        20      LD  BC,(STABLE+2*027H)  ;(BDOS)ランダムブロック読み込み
       DA48                     RBRW:
0113DF DA48 1F               4      RRA     ;AHL = AHL*128
0113E0 DA49 7C               4      LD  A,H ;AHL = AHL0/2
0113E1 DA4A 1F               4      RRA     ;A
0113E2 DA4B 65               4      LD  H,L ;
0113E3 DA4C CB1C             8      RR  H   ;H
0113E5 DA4E 2E00             7      LD  L,0 ;
0113E7 DA50 CB1D             8      RR  L   ;L
0113E9 DA52 CDF1D9          17      CALL    SET_RR_AHL
0113EC DA55 218000          10      LD  HL,128
0113EF DA58 C5              11      PUSH    BC
       DA59                     SETSEQ_SWC_RND:
0113F0 DA59 CD11DA          17      CALL    SETSEQ1
0113F3 DA5C C1              10      POP BC
0113F4 DA5D FDCB20FE        23      SET 7,(IY+32)   ;(FCB)カレントレコード
0113F8 DA61 FDE5            15      PUSH    IY
0113FA DA63 D1              10      POP DE
0113FB DA64 D5              11      PUSH    DE
0113FC DA65 CD73DA          17      CALL    JP_BC
0113FF DA68 FDE1            14      POP IY
011401 DA6A CD2BDA          17      CALL    SETSEQ
       DA6B                     SETSEQ_SWC_SEQ_RR   EQU $-2
011404 DA6D FDCB20BE        23      RES 7,(IY+32)   ;(FCB)カレントレコード
                                
011408 DA71 C1              10      POP BC
011409 DA72 C9              10      RET
       DA73                     JP_BC:
01140A DA73 C5              11      PUSH    BC
01140B DA74 C9              10      RET
                                
       D5FC                     _SYS03  EQU SCF_FF_RET  ;(BDOS)外部入力
       D5FC                     _SYS2B  EQU SCF_FF_RET  ;(BDOS)日付の設定
       D5FC                     _SYS2D  EQU SCF_FF_RET  ;(BDOS)時刻の設定
       D5FC                     _SYS39  EQU SCF_FF_RET  ;(BDOS)サブディレクトリの作成
       D5FC                     _SYS3A  EQU SCF_FF_RET  ;(BDOS)サブディレクトリの削除
                                
[EOF:LDFILE.ASM:SHIFT_JIS]
                                    INCLUDE "LDFILE2.ASM"
                                
                                ;   LSX-Dodgers FILE2
                                
                                                ;Write random block
       DA75                     _SYS26:     ;(BDOS)ランダムブロック書き込み
01140C DA75 AF               4      XOR A
01140D DA76 324ADD          13      LD  (DRDN1),A   ;NOP
011410 DA79 229ADC          16      LD  (RBSIZE),HL ;HL←書き込むレコード数
011413 DA7C 225DE4          16      LD  (LEFTX),HL
011416 DA7F CD45D5          17      CALL    SETDRV
                                
011419 DA82 CDF2DB          17      CALL    RBX0
01141C DA85 DA12DB          10      JP  C,RBWERR
01141F DA88 CDCDD8          17      CALL    WOPEN
011422 DA8B DA12DB          10      JP  C,RBWERR
011425 DA8E 7C               4      LD  A,H
011426 DA8F B5               4      OR  L
011427 DA90 CA0BDB          10      JP  Z,RBW1
                                
01142A DA93 2B               6      DEC HL
                                
01142B DA94 CDB0DC          17      CALL    GET_RR_BCDE ;BCDE=Random record
                                
01142E DA97 19              11      ADD HL,DE       ;BCHL=HL+BCDE
01142F DA98 3001            12      JR  NC,S26X1    ;
011431 DA9A 03               6      INC BC      ;
       DA9B                     S26X1:
011432 DA9B CD38D9          17      CALL    RWXR
011435 DA9E DCDED8          17      CALL    C,WRDFX
011438 DAA1 DA12DB          10      JP  C,RBWERR
                                
01143B DAA4 CD21DC          17      CALL    RBX2
01143E DAA7 281A            12      JR  Z,RBWB      ;NZ=セクタ以下の端数がある
011440 DAA9 CD40DC          17      CALL    RBXA
011443 DAAC 3864            12      JR  C,RBWERR
011445 DAAE EB               4      EX  DE,HL
011446 DAAF C5              11      PUSH    BC
011447 DAB0 EDB0                    LDIR
011449 DAB2 225FE4          16      LD  (DTAX),HL
                                
01144C DAB5 CD72D8          17      CALL    SWTDBF      ;バッファデータは更新された
                                
01144F DAB8 2A5DE4          16      LD  HL,(LEFTX)
011452 DABB D1              10      POP DE
011453 DABC ED52            15      SBC HL,DE
011455 DABE 225DE4          16      LD  (LEFTX),HL
011458 DAC1 2831            12      JR  Z,RBWEND
                                
       DAC3                     RBWB:
01145A DAC3 CD75DC          17      CALL    RBXB
01145D DAC6 2814            12      JR  Z,RBWC
       DAC8                     RBWB1:
01145F DAC8 C5              11      PUSH    BC
011460 DAC9 D5              11      PUSH    DE
011461 DACA CD4ED7          17      CALL    CLUSTX
011464 DACD CDC4DC          17      CALL    DWTC
011467 DAD0 D1              10      POP DE
011468 DAD1 C1              10      POP BC
011469 DAD2 D4C2DE          17      CALL    NC,GNCLX
01146C DAD5 383B            12      JR  C,RBWERR
01146E DAD7 10EF            13      DJNZ    RBWB1
011470 DAD9 CD14DD          17      CALL    DRW_FLUSH
       DADC                     RBWC:
011473 DADC CD8DDC          17      CALL    RBXC
011476 DADF 2813            12      JR  Z,RBWEND
011478 DAE1 C5              11      PUSH    BC
011479 DAE2 CD4ED7          17      CALL    CLUSTX
01147C DAE5 CD49DD          17      CALL    DRDN
01147F DAE8 C1              10      POP BC
011480 DAE9 3827            12      JR  C,RBWERR
011482 DAEB ED5B7EE5        20      LD  DE,(_DTBUF)
011486 DAEF EDB0                    LDIR
011488 DAF1 CD72D8          17      CALL    SWTDBF      ;バッファデータは更新された
       DAF4                     RBWEND:
01148B DAF4 CD99DC          17      CALL    RBXEND
                                
01148E DAF7 CD01DC          17      CALL    RBX1
011491 DAFA 300F            12      JR  NC,RBW1     ;ランダムレコードの方が大きい場合はサイズを合わせる
011493 DAFC CDB0DC          17      CALL    GET_RR_BCDE ;BCDE=Random record
011496 DAFF FD7310          19      LD  (IY+16),E   ;ファイルのサイズ(バイト単位)
011499 DB02 FD7211          19      LD  (IY+17),D   ;
01149C DB05 FD7112          19      LD  (IY+18),C   ;
01149F DB08 FD7013          19      LD  (IY+19),B   ;
       DB0B                     RBW1:
0114A2 DB0B FDE1            14      POP IY
0114A4 DB0D C1              10      POP BC
0114A5 DB0E D1              10      POP DE
0114A6 DB0F E1              10      POP HL
       DB10                     DD_NUL:
0114A7 DB10 AF               4      XOR A
       DB11                     DRDF0:
       DB11                     DWTF0:
0114A8 DB11 C9              10      RET
                                
       DB12                     RBWERR:
0114A9 DB12 FDE5            15      PUSH    IY
0114AB DB14 D1              10      POP DE
0114AC DB15 2A20E5          16      LD  HL,(STABLE+2*010H)
0114AF DB18 CD0F00          17      CALL    JP_HL
       DB1B                     RBRERR1:
0114B2 DB1B 3E01             7      LD  A,001H
       DB1D                     RBRERR2:
0114B4 DB1D FDE1            14      POP IY
0114B6 DB1F C1              10      POP BC
0114B7 DB20 D1              10      POP DE
0114B8 DB21 E1              10      POP HL
0114B9 DB22 37               4      SCF
0114BA DB23 210000          10      LD  HL,0
0114BD DB26 C9              10      RET
                                
       DB27                     RBRERR:
0114BE DB27 3EFF             7      LD  A,0FFH
0114C0 DB29 18F2            12      JR  RBRERR2
                                
       DB2B                     RBRFL:
0114C2 DB2B 3E00             7  RBRFLP: LD  A,000H
0114C4 DB2D FE0D             7      CP  00DH
0114C6 DB2F 2005            12      JR  NZ,RBRFL1
0114C8 DB31 D5              11      PUSH    DE
0114C9 DB32 1E0A             7      LD  E,00AH
0114CB DB34 1805            12      JR  RBRFL2
       DB36                     RBRFL1:
0114CD DB36 D5              11      PUSH    DE
0114CE DB37 CD09E4          17      CALL    _SYS07
0114D1 DB3A 5F               4      LD  E,A
       DB3B                     RBRFL2:
0114D2 DB3B CDCDE4          17      CALL    _PRINT
0114D5 DB3E 7B               4      LD  A,E
0114D6 DB3F D1              10      POP DE
0114D7 DB40 322CDB          13      LD  (RBRFLP+1),A
0114DA DB43 C9              10      RET
       DB44                     DDX:
0114DB DB44 FD7E01          19      LD  A,(IY+1)    ;(FCB)主ファイル名
0114DE DB47 CD73D7          17      CALL    CAP
0114E1 DB4A FE41             7      CP  'A'
0114E3 DB4C C9              10      RET
                                
                                                ;Read random block
       DB4D                     _SYS27:     ;(BDOS)ランダムブロック読み込み
0114E4 DB4D 225DE4          16      LD  (LEFTX),HL
0114E7 DB50 CD45D5          17      CALL    SETDRV
                                
0114EA DB53 FDCB0D66        20      BIT 4,(IY+13)   ;(FCB)属性(アトリビュート)
0114EE DB57 C2E0DB          10      JP  NZ,RBRDIR   ;ディレクトリ
0114F1 DB5A CDF2DB          17      CALL    RBX0
0114F4 DB5D DA27DB          10      JP  C,RBRERR
0114F7 DB60 CD01DC          17      CALL    RBX1
0114FA DB63 D419DC          17      CALL    NC,RBX1R
0114FD DB66 DA1BDB          10      JP  C,RBRERR1
011500 DB69 EB               4      EX  DE,HL
011501 DB6A ED52            15      SBC HL,DE       ;CP 00HL,BCDE
011503 DB6C 19              11      ADD HL,DE
011504 DB6D 79               4      LD  A,C
011505 DB6E DE00             7      SBC A,0
011507 DB70 78               4      LD  A,B
011508 DB71 DE00             7      SBC A,0
01150A DB73 3801            12      JR  C,RBR1
01150C DB75 EB               4      EX  DE,HL
       DB76                     RBR1:
01150D DB76 9F               4      SBC A,A
01150E DB77 E601             7      AND 1
011510 DB79 32DEDB          13      LD  (RBRAP+1),A
                                
011513 DB7C 7C               4      LD  A,H
011514 DB7D B5               4      OR  L
011515 DB7E 2857            12      JR  Z,RBREND0
                                
011517 DB80 229ADC          16      LD  (RBSIZE),HL ;HL←読み込むレコード数
01151A DB83 225DE4          16      LD  (LEFTX),HL
                                
01151D DB86 CD21DC          17      CALL    RBX2
011520 DB89 2819            12      JR  Z,RBRB
011522 DB8B CD40DC          17      CALL    RBXA
011525 DB8E DA27DB          10      JP  C,RBRERR
011528 DB91 C5              11      PUSH    BC
011529 DB92 EDB0                    LDIR
01152B DB94 ED535FE4        20      LD  (DTAX),DE
01152F DB98 2A5DE4          16      LD  HL,(LEFTX)
011532 DB9B D1              10      POP DE
011533 DB9C A7               4      AND A
011534 DB9D ED52            15      SBC HL,DE
011536 DB9F 225DE4          16      LD  (LEFTX),HL
011539 DBA2 2830            12      JR  Z,RBREND
                                
       DBA4                     RBRB:
01153B DBA4 CD75DC          17      CALL    RBXB
01153E DBA7 2815            12      JR  Z,RBRC
       DBA9                     RBRB1:
011540 DBA9 C5              11      PUSH    BC
011541 DBAA D5              11      PUSH    DE
011542 DBAB CD4ED7          17      CALL    CLUSTX
011545 DBAE CDCADC          17      CALL    DRDC
011548 DBB1 D1              10      POP DE
011549 DBB2 C1              10      POP BC
01154A DBB3 D4C2DE          17      CALL    NC,GNCLX
01154D DBB6 DA27DB          10      JP  C,RBRERR
011550 DBB9 10EE            13      DJNZ    RBRB1
011552 DBBB CD14DD          17      CALL    DRW_FLUSH
       DBBE                     RBRC:
011555 DBBE CD8DDC          17      CALL    RBXC
011558 DBC1 2811            12      JR  Z,RBREND
01155A DBC3 C5              11      PUSH    BC
01155B DBC4 CD4ED7          17      CALL    CLUSTX
01155E DBC7 CD2DDD          17      CALL    DRDX
011561 DBCA C1              10      POP BC
011562 DBCB DA27DB          10      JP  C,RBRERR
011565 DBCE EB               4      EX  DE,HL
011566 DBCF 2A7EE5          16      LD  HL,(_DTBUF)
011569 DBD2 EDB0                    LDIR
       DBD4                     RBREND:
01156B DBD4 CD99DC          17      CALL    RBXEND
       DBD7                     RBREND0:
01156E DBD7 FDE1            14      POP IY
011570 DBD9 C1              10      POP BC
011571 DBDA D1              10      POP DE
011572 DBDB F1              10      POP AF  ;(HL)
011573 DBDC AF               4      XOR A
011574 DBDD 3E00             7  RBRAP:  LD  A,000H
011576 DBDF C9              10      RET
                                
       DBE0                     RBRDIR:
011577 DBE0 FD6E1A          19      LD  L,(IY+26)   ;(FCB)ファイルの先頭クラスタ
01157A DBE3 FD661B          19      LD  H,(IY+27)
01157D DBE6 CD89D7          17      CALL    CHDIR
011580 DBE9 AF               4      XOR A
011581 DBEA 67               4      LD  H,A
011582 DBEB 6F               4      LD  L,A
011583 DBEC 3C               4      INC A
011584 DBED 32DEDB          13      LD  (RBRAP+1),A
011587 DBF0 18E5            12      JR  RBREND0
                                
       DBF2                     RBX0:
011589 DBF2 2A8AE4          16      LD  HL,(_DTA)
01158C DBF5 225FE4          16      LD  (DTAX),HL
01158F DBF8 2A5DE4          16      LD  HL,(LEFTX)
011592 DBFB FD7E1C          19      LD  A,(IY+28)   ;(FCB)オープンモード
011595 DBFE D6FD             7      SUB 0FDH
011597 DC00 C9              10      RET
                                
       DC01                     RBX1:               ;ファイルサイズとランダムレコードを比べる
011598 DC01 E5              11      PUSH    HL      ;Record byte
                                                ;AHL=File size
011599 DC02 FD6E10          19      LD  L,(IY+16)   ;ファイルのサイズ(バイト単位)
01159C DC05 FD6611          19      LD  H,(IY+17)   ;
01159F DC08 FD7E12          19      LD  A,(IY+18)   ;
                                
0115A2 DC0B CDB0DC          17      CALL    GET_RR_BCDE ;BCDE=Random record
                                
0115A5 DC0E A7               4      AND A
0115A6 DC0F ED52            15      SBC HL,DE
0115A8 DC11 99               4      SBC A,C
0115A9 DC12 4F               4      LD  C,A
0115AA DC13 FD7E13          19      LD  A,(IY+19)   ;ファイルのサイズ
0115AD DC16 98               4      SBC A,B
0115AE DC17 D1              10      POP DE
0115AF DC18 C9              10      RET
       DC19                     RBX1R:
0115B0 DC19 47               4      LD  B,A
0115B1 DC1A B1               4      OR  C
0115B2 DC1B EB               4      EX  DE,HL   ;BCDE=File byte HL=Record byte
0115B3 DC1C B2               4      OR  D
0115B4 DC1D B3               4      OR  E
0115B5 DC1E C0              11      RET NZ
0115B6 DC1F 37               4      SCF
0115B7 DC20 C9              10      RET
                                
       DC21                     RBX2:               ;Cluster settings
0115B8 DC21 FD6622          19      LD  H,(IY+34)   ;(+33)(FCB)ランダムレコード
0115BB DC24 FD4E23          19      LD  C,(IY+35)
0115BE DC27 0600             7      LD  B,0
0115C0 DC29 FDCB207E        20      BIT 7,(IY+32)   ;(FCB)カレントレコード
0115C4 DC2D 2003            12      JR  NZ,RBX3
0115C6 DC2F FD4624          19      LD  B,(IY+36)
       DC32                     RBX3:
0115C9 DC32 CD38D9          17      CALL    RWXR
0115CC DC35 3A57DC          13      LD  A,(SECSZ+2) ;1024=4 / 512=2 / 256=1
0115CF DC38 3D               4      DEC A
0115D0 DC39 FDA622          19      AND (IY+34)
0115D3 DC3C FDB621          19      OR  (IY+33)
0115D6 DC3F C9              10      RET
                                
       DC40                     RBXA:
0115D7 DC40 C5              11      PUSH    BC
0115D8 DC41 D5              11      PUSH    DE
0115D9 DC42 CD4ED7          17      CALL    CLUSTX
0115DC DC45 CD2DDD          17      CALL    DRDX
0115DF DC48 D1              10      POP DE
0115E0 DC49 C1              10      POP BC
0115E1 DC4A D4C2DE          17      CALL    NC,GNCLX
0115E4 DC4D D8              11      RET C
0115E5 DC4E ED53FEE5        20      LD  (_CLPS),DE
                                
0115E9 DC52 FD4E21          19      LD  C,(IY+33)   ;(FCB)ランダムレコード
0115EC DC55 210004          10  SECSZ:  LD  HL,0400H    ;自己書き換え 1024=0400H / 512=0200H ここに1セクタのサイズが格納される
0115EF DC58 7C               4      LD  A,H
0115F0 DC59 3D               4      DEC A       ;1024=3 / 512=1
0115F1 DC5A FDA622          19      AND (IY+34)     ;(FCB)ランダムレコード
0115F4 DC5D 47               4      LD  B,A     ;BCに1セクタ以下の端数が入る
0115F5 DC5E ED42            15      SBC HL,BC       ;残りを計算
                                
0115F7 DC60 ED5B5DE4        20      LD  DE,(LEFTX)
0115FB DC64 ED52            15      SBC HL,DE       ;CP HL,DE
0115FD DC66 19              11      ADD HL,DE       ;
0115FE DC67 3801            12      JR  C,RBXA1     ;DEとHLを比較して大きい方をHLに
011600 DC69 EB               4      EX  DE,HL
       DC6A                     RBXA1:
011601 DC6A E5              11      PUSH    HL
011602 DC6B 2A7EE5          16      LD  HL,(_DTBUF)
011605 DC6E 09              11      ADD HL,BC
011606 DC6F ED5B5FE4        20      LD  DE,(DTAX)
01160A DC73 C1              10      POP BC
01160B DC74 C9              10      RET
                                
       DC75                     RBXB:
01160C DC75 2A5FE4          16      LD  HL,(DTAX)
01160F DC78 ED5BFEE5        20      LD  DE,(_CLPS)
011613 DC7C 3A5EE4          13      LD  A,(LEFTX+1)
011616 DC7F 47               4      LD  B,A
011617 DC80 3A57DC          13      LD  A,(SECSZ+2) ;1024=4 / 512=2 / 256=1
       DC83                     RBXB1:
01161A DC83 1F               4      RRA     ;->CF
01161B DC84 3804            12      JR  C,RBXB2
01161D DC86 CB38             8      SRL B   ;B=B/2
01161F DC88 18F9            12      JR  RBXB1
       DC8A                     RBXB2:
011621 DC8A 78               4      LD  A,B
011622 DC8B B7               4      OR  A
011623 DC8C C9              10      RET
                                
       DC8D                     RBXC:
011624 DC8D ED4B5DE4        20      LD  BC,(LEFTX)
011628 DC91 3A57DC          13      LD  A,(SECSZ+2) ;1024=4 / 512=2 / 256=1
01162B DC94 3D               4      DEC A
01162C DC95 A0               4      AND B
01162D DC96 47               4      LD  B,A     ;1セクタ以下の端数がない場合はZ
01162E DC97 B1               4      OR  C
01162F DC98 C9              10      RET
                                
       DC99                     RBXEND:             ;レコード数だけランダムレコードを進める
011630 DC99 110000          10      LD  DE,0        ;進めるレコード数(RBSIZE)
       DC9A                     RBSIZE  EQU $-2
011633 DC9C CDE7D9          17      CALL    GET_RR_AHL
011636 DC9F 19              11      ADD HL,DE
011637 DCA0 CE00             7      ADC A,0
011639 DCA2 CDF1D9          17      CALL    SET_RR_AHL
01163C DCA5 EB               4      EX  DE,HL       ;HL=進めるレコード数
01163D DCA6 D0              11      RET NC
01163E DCA7 FDCB207E        20      BIT 7,(IY+32)   ;(FCB)カレントレコード
011642 DCAB C0              11      RET NZ
011643 DCAC FD3424          23      INC (IY+36)
011646 DCAF C9              10      RET
                                
       DCB0                     GET_RR_BCDE:            ;BCDE=Random record
011647 DCB0 FD5E21          19      LD  E,(IY+33)   ;(FCB)ランダムレコード
01164A DCB3 FD5622          19      LD  D,(IY+34)
01164D DCB6 FD4E23          19      LD  C,(IY+35)
011650 DCB9 0600             7      LD  B,0     ;CP/M互換のアクセスの場合はFCBは36バイト
011652 DCBB FDCB207E        20      BIT 7,(IY+32)   ;(FCB)カレントレコード
011656 DCBF C0              11      RET NZ
011657 DCC0 FD4624          19      LD  B,(IY+36)
01165A DCC3 C9              10      RET
                                
                                ;   ランダムブロックアクセスの連続したセクタをまとめる
                                
       DCC4                     DWTC:
01165B DCC4 E5              11      PUSH    HL
01165C DCC5 2152E0          10      LD  HL,DWT24B
01165F DCC8 1804            12      JR  DWTC1
       DCCA                     DRDC:
011661 DCCA E5              11      PUSH    HL
011662 DCCB 2142E0          10      LD  HL,DRD24B
       DCCE                     DWTC1:
011665 DCCE 2228DD          16      LD  (DRWF_MODE),HL
011668 DCD1 E1              10      POP HL
011669 DCD2 3A18DD          13      LD  A,(DRWF_B)
01166C DCD5 B7               4      OR  A
01166D DCD6 200F            12      JR  NZ,DRDC1
       DCD8                     SAVE_DRWC:
01166F DCD8 0601             7      LD  B,1
011671 DCDA ED4317DD        20      LD  (DRWF_C),BC
011675 DCDE ED531EDD        20      LD  (DRWF_E),DE
011679 DCE2 2221DD          16      LD  (DRWF_HL),HL
01167C DCE5 1820            12      JR  INC_HL_DRWC
       DCE7                     DRDC1:
01167E DCE7 E5              11      PUSH    HL
01167F DCE8 211EDD          10      LD  HL,DRWF_E
011682 DCEB 86               7      ADD A,(HL)
011683 DCEC F5              11      PUSH    AF
011684 DCED BB               4      CP  E
011685 DCEE 201D            12      JR  NZ,DRDC2
011687 DCF0 F1              10      POP AF
011688 DCF1 23               6      INC HL
011689 DCF2 7E               7      LD  A,(HL)
01168A DCF3 CE00             7      ADC A,0
01168C DCF5 F5              11      PUSH    AF
01168D DCF6 BA               4      CP  D
01168E DCF7 2014            12      JR  NZ,DRDC2
011690 DCF9 F1              10      POP AF
011691 DCFA 3A17DD          13      LD  A,(DRWF_C)
011694 DCFD CE00             7      ADC A,0
011696 DCFF B9               4      CP  C
011697 DD00 200C            12      JR  NZ,DRDC3
011699 DD02 2118DD          10      LD  HL,DRWF_B
01169C DD05 34              11      INC (HL)
01169D DD06 E1              10      POP HL
       DD07                     INC_HL_DRWC:
01169E DD07 3A57DC          13      LD  A,(SECSZ+2)     ;1セクタのサイズの上位1バイト
0116A1 DD0A 84               4      ADD A,H
0116A2 DD0B 67               4      LD  H,A
0116A3 DD0C C9              10      RET
       DD0D                     DRDC2:
0116A4 DD0D F1              10      POP AF
       DD0E                     DRDC3:
0116A5 DD0E CD14DD          17      CALL    DRW_FLUSH
0116A8 DD11 E1              10      POP HL
0116A9 DD12 18C4            12      JR  SAVE_DRWC
                                
                                ;   ランダムブロックアクセスの連続したセクタをまとめたものをフラッシュする
       DD14                     DRW_FLUSH:
0116AB DD14 C5              11      PUSH    BC
0116AC DD15 D5              11      PUSH    DE
0116AD DD16 010000          10      LD  BC,0
       DD17                     DRWF_C  EQU $-2
       DD18                     DRWF_B  EQU $-1
0116B0 DD19 78               4      LD  A,B
0116B1 DD1A B7               4      OR  A
0116B2 DD1B 280D            12      JR  Z,DRDF1
0116B4 DD1D 110000          10      LD  DE,0
       DD1E                     DRWF_E  EQU $-2
       DD1F                     DRWF_D  EQU $-1
0116B7 DD20 210000          10      LD  HL,0
       DD21                     DRWF_HL EQU $-2
0116BA DD23 AF               4      XOR A
0116BB DD24 3218DD          13      LD  (DRWF_B),A
0116BE DD27 CD42E0          17      CALL    DRD24B
       DD28                     DRWF_MODE   EQU $-2
       DD2A                     DRDF1:
0116C1 DD2A D1              10      POP DE
0116C2 DD2B C1              10      POP BC
0116C3 DD2C C9              10      RET
[EOF:LDFILE2.ASM:SHIFT_JIS]
                                    INCLUDE "LDDIO.ASM"
                                
                                ;   LSX-Dodgers DIO
                                
       DD2D                     DRDX:
0116C4 DD2D CD6BDD          17      CALL    DRDY
0116C7 DD30 C8              11      RET Z
0116C8 DD31 CD51DD          17      CALL    DRDX1       ;データバッファの情報を保存
0116CB DD34 D8              11      RET C
0116CC DD35 E5              11      PUSH    HL
0116CD DD36 C5              11      PUSH    BC
0116CE DD37 D5              11      PUSH    DE
0116CF DD38 2A7EE5          16      LD  HL,(_DTBUF)
0116D2 DD3B 3A94DD          13      LD  A,(_DBS24)
0116D5 DD3E 4F               4      LD  C,A
0116D6 DD3F CD40E0          17      CALL    DRD24
0116D9 DD42 DC66DD          17      CALL    C,DRDNE
       DD45                     POP_DE_BC_HL_RET:
0116DC DD45 D1              10      POP DE
0116DD DD46 C1              10      POP BC
0116DE DD47 E1              10      POP HL
0116DF DD48 C9              10      RET
                                
                                ;   CDE:セクタ番号
       DD49                     DRDN:
0116E0 DD49 AF               4      XOR A
0116E1 DD4A 00               4  DRDN1:  NOP         ;自己書き換え NOP / SCF
0116E2 DD4B 30E0            12      JR  NC,DRDX
       DD4D                     DRDNX:
0116E4 DD4D CD6BDD          17      CALL    DRDY
0116E7 DD50 C8              11      RET Z
       DD51                     DRDX1:
0116E8 DD51 CD81DD          17      CALL    DWTX
                                                ;データバッファの読み込んだドライブ・セクタ情報を保存
0116EB DD54 ED53A6E4        20      LD  (_DBSEC),DE
0116EF DD58 79               4      LD  A,C
0116F0 DD59 3294DD          13      LD  (_DBS24),A
                                
0116F3 DD5C 3A88E4          13      LD  A,(_DRV)
0116F6 DD5F 32A5E4          13      LD  (_DBDRV),A
0116F9 DD62 CDD9E4          17      CALL    _CHGDRV
0116FC DD65 D0              11      RET NC
       DD66                     DRDNE:
0116FD DD66 9F               4      SBC A,A     ;CF=1ならばA=0FFH
0116FE DD67 32A5E4          13      LD  (_DBDRV),A
011701 DD6A C9              10      RET
                                
                                ;   CDE:セクタ番号
       DD6B                     DRDY:
011702 DD6B 3A94DD          13      LD  A,(_DBS24)
011705 DD6E B9               4      CP  C
011706 DD6F C0              11      RET NZ
                                
011707 DD70 E5              11      PUSH    HL
011708 DD71 3A88E4          13      LD  A,(_DRV)
01170B DD74 21A5E4          10      LD  HL,_DBDRV
01170E DD77 AE               7      XOR (HL)
01170F DD78 2005            12      JR  NZ,POP_HL_RET
                                
011711 DD7A 2AA6E4          16      LD  HL,(_DBSEC)
011714 DD7D ED52            15      SBC HL,DE       ;上でXORを使っているのでCF=0のはず
       DD7F                     POP_HL_RET:
011716 DD7F E1              10      POP HL
011717 DD80 C9              10      RET
                                
       DD81                     DWTX:
011718 DD81 3AA4E4          13      LD  A,(_WTDBF)
01171B DD84 B7               4      OR  A
01171C DD85 C8              11      RET Z
01171D DD86 AF               4      XOR A
01171E DD87 32A4E4          13      LD  (_WTDBF),A
                                
011721 DD8A E5              11      PUSH    HL
011722 DD8B C5              11      PUSH    BC
011723 DD8C D5              11      PUSH    DE
011724 DD8D 3AA5E4          13      LD  A,(_DBDRV)
011727 DD90 CDD9E4          17      CALL    _CHGDRV
01172A DD93 0E00             7      LD  C,0
       DD94                     _DBS24  EQU $-1
01172C DD95 ED5BA6E4        20      LD  DE,(_DBSEC)
011730 DD99 2A7EE5          16      LD  HL,(_DTBUF)
011733 DD9C D450E0          17      CALL    NC,DWT24
       DD9F                     POP_DE_BC_HL_RET2:
011736 DD9F 18A4            12      JR  POP_DE_BC_HL_RET
                                
       DDA1                     RDFATX:
011738 DDA1 E5              11      PUSH    HL
011739 DDA2 3A88E4          13      LD  A,(_DRV)
01173C DDA5 21AAE4          10      LD  HL,_FATDRV
01173F DDA8 AE               7      XOR (HL)
011740 DDA9 28D4            12      JR  Z,POP_HL_RET
                                
011742 DDAB C5              11      PUSH    BC
011743 DDAC D5              11      PUSH    DE
011744 DDAD DDE5            15      PUSH    IX
011746 DDAF CDCBDD          17      CALL    WTFATX
011749 DDB2 3813            12      JR  C,POP_IX_DE_BC_HL_RET
                                
01174B DDB4 AF               4      XOR A
01174C DDB5 32ABE4          13      LD  (_FATIX),A
01174F DDB8 3A88E4          13      LD  A,(_DRV)
011752 DDBB 32AAE4          13      LD  (_FATDRV),A
011755 DDBE CDE5E4          17      CALL    _RDFAT
       DDC1                     RDFATE2:
011758 DDC1 3004            12      JR  NC,POP_IX_DE_BC_HL_RET
01175A DDC3 9F               4      SBC A,A     ;A=0xFF
01175B DDC4 32AAE4          13      LD  (_FATDRV),A
       DDC7                     POP_IX_DE_BC_HL_RET:
01175E DDC7 DDE1            14      POP IX
011760 DDC9 18D4            12      JR  POP_DE_BC_HL_RET2
                                
       DDCB                     WTFATX:
011762 DDCB 3AA2E4          13      LD  A,(_WTFATF)
011765 DDCE B7               4      OR  A
011766 DDCF C8              11      RET Z
011767 DDD0 E5              11      PUSH    HL
011768 DDD1 3AAAE4          13      LD  A,(_FATDRV)
01176B DDD4 21A5E4          10      LD  HL,_DBDRV
01176E DDD7 AE               7      XOR (HL)
01176F DDD8 CC81DD          17      CALL    Z,DWTX
011772 DDDB 38A2            12      JR  C,POP_HL_RET
011774 DDDD C5              11      PUSH    BC
011775 DDDE D5              11      PUSH    DE
011776 DDDF DDE5            15      PUSH    IX
011778 DDE1 CD5DE0          17      CALL    WTFAT
01177B DDE4 AF               4      XOR A
01177C DDE5 32A2E4          13      LD  (_WTFATF),A
01177F DDE8 18DD            12      JR  POP_IX_DE_BC_HL_RET
                                
       DDEA                     NCL1:
011781 DDEA 7A               4      LD  A,D
011782 DDEB B3               4      OR  E
011783 DDEC 37               4      SCF
011784 DDED C8              11      RET Z
                                
011785 DDEE 7A               4      LD  A,D
011786 DDEF CB3F             8      SRL A   ;/2
011788 DDF1 CB3F             8      SRL A   ;/2
                                
01178A DDF3 E5              11      PUSH    HL
01178B DDF4 3213DE          13      LD  (NCLPAT_FATIX),A    ;_FATIX
01178E DDF7 2AAAE4          16      LD  HL,(_FATDRV)    ;L=_FATDRV H=_FATIX
011791 DDFA BC               4      CP  H
011792 DDFB 3A88E4          13      LD  A,(_DRV)    ;LDではフラグは変化しない
011795 DDFE 3212DE          13      LD  (NCLPAT_FATDRV),A   ;_FATDRV
011798 DE01 2005            12      JR  NZ,NCL2     ;FATIXが違う
01179A DE03 BD               4      CP  L
01179B DE04 2002            12      JR  NZ,NCL2     ;ドライブが違う
01179D DE06 E1              10      POP HL
01179E DE07 C9              10      RET
       DE08                     NCL2:
01179F DE08 C5              11      PUSH    BC
0117A0 DE09 D5              11      PUSH    DE
0117A1 DE0A DDE5            15      PUSH    IX
0117A3 DE0C CDCBDD          17      CALL    WTFATX
0117A6 DE0F 38B6            12      JR  C,POP_IX_DE_BC_HL_RET
0117A8 DE11 010000          10      LD  BC,0        ;自己書き換え C=_FATDRV B=_FATIX
       DE13                     NCLPAT_FATIX    EQU $-1
       DE12                     NCLPAT_FATDRV   EQU $-2
0117AB DE14 ED43AAE4        20      LD  (_FATDRV),BC
0117AF DE18 CD32E0          17      CALL    RDFATS
0117B2 DE1B 18A4            12      JR  RDFATE2
                                
       DE1D                     NCL3:
0117B4 DE1D CB9A             8      RES 3,D
0117B6 DE1F CB92             8      RES 2,D
0117B8 DE21 6B               4      LD  L,E
0117B9 DE22 62               4      LD  H,D
0117BA DE23 CB3C             8      SRL H   ;
0117BC DE25 CB1D             8      RR  L   ;HLA=HLA/2
0117BE DE27 1F               4      RRA     ;
0117BF DE28 F5              11      PUSH    AF
0117C0 DE29 3AABE4          13      LD  A,(_FATIX)
0117C3 DE2C 0F               4      RRCA
0117C4 DE2D 300B            12      JR  NC,NCL3X1
0117C6 DE2F 3A57DC          13      LD  A,(SECSZ+2)
0117C9 DE32 FE04             7      CP  4       ;1セクタ1024バイトの場合は奇数インデックスの場合に先頭を512バイトずらす
0117CB DE34 2004            12      JR  NZ,NCL3X1
0117CD DE36 010002          10      LD  BC,512
0117D0 DE39 09              11      ADD HL,BC
       DE3A                     NCL3X1:
0117D1 DE3A F1              10      POP AF
0117D2 DE3B ED4B7CE5        20      LD  BC,(_FATBF)
0117D6 DE3F 19              11      ADD HL,DE
0117D7 DE40 09              11      ADD HL,BC
0117D8 DE41 17               4      RLA
0117D9 DE42 C9              10      RET
                                
       DE43                     GNCL:
0117DA DE43 CDEADD          17      CALL    NCL1        ;GET NEXT CLUSTER
0117DD DE46 D8              11      RET C
0117DE DE47 C5              11      PUSH    BC
0117DF DE48 E5              11      PUSH    HL
0117E0 DE49 CD1DDE          17      CALL    NCL3
0117E3 DE4C 3809            12      JR  C,GNC1
0117E5 DE4E 5E               7      LD  E,(HL)
0117E6 DE4F 23               6      INC HL
0117E7 DE50 7E               7      LD  A,(HL)
0117E8 DE51 E60F             7      AND 00FH
0117EA DE53 57               4      LD  D,A
0117EB DE54 E1              10      POP HL
0117EC DE55 C1              10      POP BC
0117ED DE56 C9              10      RET
       DE57                     GNC1:
0117EE DE57 7E               7      LD  A,(HL)
0117EF DE58 23               6      INC HL
0117F0 DE59 56               7      LD  D,(HL)
0117F1 DE5A 0604             7      LD  B,4
       DE5C                     GNC1L:
0117F3 DE5C CB3A             8      SRL D   ;DA=DA/2
0117F5 DE5E 1F               4      RRA     ;
0117F6 DE5F 10FB            13      DJNZ    GNC1L
                                
0117F8 DE61 5F               4      LD  E,A
0117F9 DE62 E1              10      POP HL
0117FA DE63 C1              10      POP BC
0117FB DE64 A7               4      AND A
0117FC DE65 C9              10      RET
                                
       DE66                     SNCL:
0117FD DE66 CDEADD          17      CALL    NCL1
011800 DE69 D8              11      RET C
                                ;               SET NEXT CLUSTER
011801 DE6A E5              11      PUSH    HL
011802 DE6B C5              11      PUSH    BC
011803 DE6C D5              11      PUSH    DE
011804 DE6D E5              11      PUSH    HL
011805 DE6E CD1DDE          17      CALL    NCL3
011808 DE71 D1              10      POP DE
                                ;CF=ODD
011809 DE72 7E               7      LD  A,(HL)
01180A DE73 73               7      LD  (HL),E
01180B DE74 3806            12      JR  C,SNC1
                                ;EVEN
                                ;M[0] = E
                                ;M[1] = (M[1] & 0xF0) | (D & 0x0F)
01180D DE76 23               6      INC HL
01180E DE77 ED67            18      RRD     ;M={A[3:0],E[3:0]}
011810 DE79 7A               4      LD  A,D
011811 DE7A 1804            12      JR  SNC11
       DE7C                     SNC1:
                                ;ODD
                                ;HL[0] = (HL[0]&0x0F) | (E<<4)
                                ;HL[1] = DE>>4
011813 DE7C ED6F            18      RLD     ;M={D[3:0],E[7:4]}
011815 DE7E 23               6      INC HL
011816 DE7F 72               7      LD  (HL),D  ;M={D[3:0],E[7:4]}
       DE80                     SNC11:
011817 DE80 ED6F            18      RLD     ;M={M[7:4],D[3:0]}
011819 DE82 B7               4      OR  A
01181A DE83 D1              10      POP DE
01181B DE84 C1              10      POP BC
01181C DE85 E1              10      POP HL
       DE86                     FAT_CHANGED:
01181D DE86 3E01             7      LD  A,1
01181F DE88 32A2E4          13      LD  (_WTFATF),A
011822 DE8B C9              10      RET
                                
       DE8C                     N16CL3:
011823 DE8C C5              11      PUSH    BC
011824 DE8D 6B               4      LD  L,E
011825 DE8E 7A               4      LD  A,D
011826 DE8F E603             7      AND 3
011828 DE91 67               4      LD  H,A
011829 DE92 29              11      ADD HL,HL
01182A DE93 ED4B7CE5        20      LD  BC,(_FATBF)
01182E DE97 09              11      ADD HL,BC
01182F DE98 C1              10      POP BC
011830 DE99 C9              10      RET
                                
       DE9A                     GNCL16:
011831 DE9A CDEADD          17      CALL    NCL1        ;GET NEXT CLUSTER for FAT16
011834 DE9D D8              11      RET C
011835 DE9E E5              11      PUSH    HL
011836 DE9F CD8CDE          17      CALL    N16CL3
011839 DEA2 5E               7      LD  E,(HL)
01183A DEA3 23               6      INC HL
01183B DEA4 56               7      LD  D,(HL)
01183C DEA5 E1              10      POP HL
01183D DEA6 C9              10      RET
                                
       DEA7                     SNCL16:
01183E DEA7 CDEADD          17      CALL    NCL1        ;GET NEXT CLUSTER for FAT16
011841 DEAA D8              11      RET C
011842 DEAB D5              11      PUSH    DE
011843 DEAC E5              11      PUSH    HL
011844 DEAD CD8CDE          17      CALL    N16CL3
011847 DEB0 D1              10      POP DE      ;HL
011848 DEB1 73               7      LD  (HL),E
011849 DEB2 23               6      INC HL
01184A DEB3 72               7      LD  (HL),D
01184B DEB4 6B               4      LD  L,E
01184C DEB5 62               4      LD  H,D
01184D DEB6 D1              10      POP DE
01184E DEB7 18CD            12      JR  FAT_CHANGED
                                
                                ;------------------------
                                ;次のセクタを探す際に_SECPSの値をチェック
                                ;in
                                ;   DE : セクタ番号
                                ;out
                                ;   DE : 次のセクタ番号
                                ;note
                                ;
                                ;------------------------
       DEB9                     NEXTX:
011850 DEB9 3E00             7      LD  A,0 ;自己書き換え
       DEBA                     _SECPS  EQU $-1
011852 DEBB 3C               4      INC A
011853 DEBC E600             7      AND 0   ;自己書き換え　1クラスタの論理セクタ数-1
       DEBD                     _NCPAT  EQU $-1
011855 DEBE 32BADE          13      LD  (_SECPS),A
011858 DEC1 C9              10      RET
                                
       DEC2                     GNCLX:
011859 DEC2 CDB9DE          17      CALL    NEXTX
01185C DEC5 C0              11      RET NZ  ;1クラスタのセクタ未満の場合は戻る
01185D DEC6 C3F7E4          10      JP  _GNCL   ;次のクラスタを探す
                                
       DEC9                     RDFAT:
011860 DEC9 3E80             7      LD  A,080H
011862 DECB 3270E4          13      LD  (CHECK),A
       DECE                     RDFAT1:
011865 DECE 3A88E4          13      LD  A,(_DRV)
011868 DED1 CD6CE1          17      CALL    CHGDRVR
01186B DED4 D8              11      RET C
01186C DED5 DD7E12          19      LD  A,(IX+DPB_DEVICE)
01186F DED8 CB6F             8      BIT 5,A
011871 DEDA 2868            12      JR  Z,RDFAT0X
011873 DEDC 2170E4          10      LD  HL,CHECK
011876 DEDF A6               7      AND (HL)
011877 DEE0 77               7      LD  (HL),A
011878 DEE1 110000          10      LD  DE,0        ;BPB
01187B DEE4 2A7CE5          16      LD  HL,(_FATBF)
01187E DEE7 CD3EE0          17      CALL    DRD16
011881 DEEA 3024            12      JR  NC,GETBPB
011883 DEEC 2170E4          10      LD  HL,CHECK
011886 DEEF CB06            15      RLC (HL)
011888 DEF1 3F               4      CCF
011889 DEF2 D8              11      RET C
01188A DEF3 DDCB0A1E        23      RR  (IX+DPB_FDMODE)
01188E DEF7 3F               4      CCF         ;フロッピーディスクのFDモードを切り替える
01188F DEF8 DDCB0A16        23      RL  (IX+DPB_FDMODE)
011893 DEFC 3EFF             7      LD  A,0FFH
011895 DEFE 3289E4          13      LD  (_DSK),A
011898 DF01 3A84E4          13      LD  A,(_DRIVE)
01189B DF04 E603             7      AND 3
01189D DF06 F680             7      OR  080H
01189F DF08 6F               4      LD  L,A
0118A0 DF09 26E4             7      LD  H,_CYL0/256
0118A2 DF0B 3EFF             7      LD  A,0FFH
0118A4 DF0D 77               7      LD  (HL),A
0118A5 DF0E 18BE            12      JR  RDFAT1
       DF10                     GETBPB:
0118A7 DF10 FDE5            15      PUSH    IY
0118A9 DF12 FD2A7CE5        20      LD  IY,(_FATBF) ;BPB
0118AD DF16 CDF1E4          17      CALL    _BPB2DPB
0118B0 DF19 FDE1            14      POP IY
0118B2 DF1B DD7E12          19      LD  A,(IX+DPB_DEVICE)
0118B5 DF1E 3021            12      JR  NC,GETBPBOK
0118B7 DF20 E60F             7      AND 00FH
0118B9 DF22 FE07             7      CP  7
0118BB DF24 37               4      SCF
0118BC DF25 C0              11      RET NZ
0118BD DF26 DDCB0A46        20      BIT 0,(IX+DPB_FDMODE)
0118C1 DF2A 21C0E5          10      LD  HL,M2D
0118C4 DF2D 2002            12      JR  NZ,SETFDMODE
0118C6 DF2F 2ED2             7      LD  L,M2HD-STABLE
       DF31                     SETFDMODE:
0118C8 DF31 DDE5            15      PUSH    IX
0118CA DF33 D1              10      POP DE
0118CB DF34 EDA0            16      LDI
0118CD DF36 EDA0            16      LDI
0118CF DF38 13               6      INC DE
0118D0 DF39 13               6      INC DE
0118D1 DF3A 13               6      INC DE
0118D2 DF3B 13               6      INC DE
0118D3 DF3C 010C00          10      LD  BC,12
0118D6 DF3F EDB0                    LDIR
       DF41                     GETBPBOK:
0118D8 DF41 CDD8E0          17      CALL    CHGDRV2
       DF44                     RDFAT0X:
0118DB DF44 CD32E0          17      CALL    RDFATS
0118DE DF47 D8              11      RET C
0118DF DF48 DDAE06          19      XOR (IX+DPB_FATID)
0118E2 DF4B C8              11      RET Z
0118E3 DF4C DDCB126E        20      BIT 5,(IX+DPB_DEVICE)
0118E7 DF50 C0              11      RET NZ      ;BPBを取得している場合はFATIDをチェックしない
0118E8 DF51 37               4      SCF
0118E9 DF52 C9              10      RET
                                
       DF53                     POP_HL_SCF_RET:
0118EA DF53 E1              10      POP HL
0118EB DF54 37               4      SCF
0118EC DF55 C9              10      RET
                                
       DF56                     BPB2DPB:
0118ED DF56 FD7E0B          19      LD  A,(IY+11)   ;BPB_BytsPerSec
0118F0 DF59 B7               4      OR  A
0118F1 DF5A 37               4      SCF
0118F2 DF5B C0              11      RET NZ
       DF5C                     BPBOK:
0118F3 DF5C FD7E0D          19      LD  A,(IY+13)   ;BPB_SecPerClus
0118F6 DF5F DD7707          19      LD  (IX+DPB_SECPCL),A
                                
0118F9 DF62 FD7E16          19      LD  A,(IY+22)   ;BPB_FATSz16
0118FC DF65 DD7700          19      LD  (IX+DPB_FATLN),A
0118FF DF68 FD7E17          19      LD  A,(IY+23)   ;BPB_FATSz16
011902 DF6B DD7701          19      LD  (IX+DPB_FATLN+1),A
                                
011905 DF6E FD6E0E          19      LD  L,(IY+14)   ;BPB_RsvdSecCnt
011908 DF71 FD660F          19      LD  H,(IY+15)
01190B DF74 DD750E          19      LD  (IX+DPB_FATPS),L
01190E DF77 FD5E16          19      LD  E,(IY+22)   ;BPB_FATSz16
011911 DF7A FD5617          19      LD  D,(IY+23)
011914 DF7D FD4610          19      LD  B,(IY+16)   ;BPB_NumFATs
       DF80                     BPBDP1:             ;BPB_FATSz16 * BPB_NumFATs
011917 DF80 19              11      ADD HL,DE
011918 DF81 10FD            13      DJNZ    BPBDP1
       DF83                     BPBDP2:
01191A DF83 DD7510          19      LD  (IX+DPB_DIRPS),L
01191D DF86 DD7411          19      LD  (IX+DPB_DIRPS+1),H
011920 DF89 E5              11      PUSH    HL
                                
011921 DF8A FD6E11          19      LD  L,(IY+17)   ;BPB_RootEntCnt
011924 DF8D FD6612          19      LD  H,(IY+18)
011927 DF90 FD7E0C          19      LD  A,(IY+12)   ;BPB_BytsPerSec
01192A DF93 B7               4      OR  A
01192B DF94 28BD            12      JR  Z,POP_HL_SCF_RET
01192D DF96 0606             7      LD  B,6
       DF98                     BPBBPS1:
01192F DF98 05               4      DEC B
011930 DF99 0F               4      RRCA
011931 DF9A 30FC            12      JR  NC,BPBBPS1
       DF9C                     BPBDE1:
011933 DF9C 29              11      ADD HL,HL
011934 DF9D 10FD            13      DJNZ    BPBDE1
                                
011936 DF9F 7C               4      LD  A,H
011937 DFA0 DD770B          19      LD  (IX+DPB_DIRSCNT),A  ;
                                
01193A DFA3 D1              10      POP DE      ;DPB_DIRPS
01193B DFA4 6C               4      LD  L,H
01193C DFA5 2600             7      LD  H,0
01193E DFA7 19              11      ADD HL,DE       ;MAXDIR
01193F DFA8 E5              11      PUSH    HL
011940 DFA9 FD4E0D          19      LD  C,(IY+13)   ;BPB_SecPerClus
011943 DFAC CB21             8      SLA C       ;*2
011945 DFAE AF               4      XOR A
011946 DFAF 47               4      LD  B,A
011947 DFB0 ED42            15      SBC HL,BC
011949 DFB2 DD7514          19      LD  (IX+DPB_ADDCL),L
01194C DFB5 DD7415          19      LD  (IX+DPB_ADDCL+1),H
                                
01194F DFB8 D1              10      POP DE      ;DE=DPB_MAXDIR
011950 DFB9 FD6E13          19      LD  L,(IY+19)   ;BPB_TotSec16
011953 DFBC FD6614          19      LD  H,(IY+20)
                                
011956 DFBF DD7E12          19      LD  A,(IX+DPB_DEVICE)
011959 DFC2 E60F             7      AND 00FH
01195B DFC4 FE07             7      CP  7       ;フロッピー
01195D DFC6 2019            12      JR  NZ,NOT_FD
01195F DFC8 E5              11      PUSH    HL
011960 DFC9 FD4E18          19      LD  C,(IY+24)   ;BPB_SecPerTr
011963 DFCC DD710D          19      LD  (IX+DPB_MAXSEC),C
011966 DFCF AF               4      XOR A
011967 DFD0 CB21             8      SLA C       ;両面なのでセクタ数を２倍
011969 DFD2 0610             7      LD  B,16
       DFD4                     DIVSEC:             ;MAXCYL = BPB_TotSec16 / (BPB_SecPerTr * 2)
01196B DFD4 29              11      ADD HL,HL
01196C DFD5 17               4      RLA
01196D DFD6 B9               4      CP  C
01196E DFD7 3802            12      JR  C,DIVSEC1
011970 DFD9 91               4      SUB C
011971 DFDA 2C               4      INC L
       DFDB                     DIVSEC1:
011972 DFDB 10F7            13      DJNZ    DIVSEC
011974 DFDD DD750C          19      LD  (IX+DPB_MAXCYL),L
011977 DFE0 E1              10      POP HL  ;ここまでフロッピー専用
       DFE1                     NOT_FD:
011978 DFE1 7C               4      LD  A,H
011979 DFE2 B5               4      OR  L
01197A DFE3 3E00             7      LD  A,0     ;LDでフラグは変化しない。BPB_TotSec16を AHL で扱う為、Aに0を入れる
01197C DFE5 200E            12      JR  NZ,BPB16BIT ;BPB_TotSec16が「0」の場合はBPB_TotSec32で計算
01197E DFE7 2F               4      CPL         ;A=0FFH
01197F DFE8 FD8623          19      ADD A,(IY+35)   ;念のために総セクタ数が24ビットを超える場合はエラーを返す
011982 DFEB D8              11      RET C
011983 DFEC FD6E20          19      LD  L,(IY+32)   ;BPB_TotSec32 は AHL の24ビットで扱う
011986 DFEF FD6621          19      LD  H,(IY+33)   ;1クラスタの論理セクタ数(DPB_SECPCL)が最大128なので、
011989 DFF2 FD7E22          19      LD  A,(IY+34)   ;FAT12,FAT16では総セクタ数が24ビットを超えることは無い
       DFF5                     BPB16BIT:
01198C DFF5 ED52            15      SBC HL,DE       ;DE=DPB_MAXDIR
01198E DFF7 DE00             7      SBC A,0
011990 DFF9 FD460D          19      LD  B,(IY+13)   ;BPB_SecPerClus
       DFFC                     BPBTC1:             ;総クラスタ数(AHL) = 総セクタ数(AHL) / セクタサイズ(B)
011993 DFFC CB18             8      RR  B       ;->CY
011995 DFFE 3808            12      JR  C,BPBTC2
011997 E000 CB3F             8      SRL A
011999 E002 CB1C             8      RR  H       ;AHL=AHL/2
01199B E004 CB1D             8      RR  L
01199D E006 18F4            12      JR  BPBTC1
       E008                     BPBTC2:
01199F E008 C6FF             7      ADD A,0FFH
0119A1 E00A D8              11      RET C       ;念のため(クラスタ数が16ビットを超える場合)
0119A2 E00B 23               6      INC HL
0119A3 E00C 23               6      INC HL
0119A4 E00D DD7508          19      LD  (IX+DPB_MAXCL),L
0119A7 E010 DD7409          19      LD  (IX+DPB_MAXCL+1),H
                                
0119AA E013 FD7E15          19      LD  A,(IY+21)   ;BPB_Media
0119AD E016 DD7706          19      LD  (IX+DPB_FATID),A
                                
0119B0 E019 FD7E10          19      LD  A,(IY+16)   ;BPB_NumFATs
0119B3 E01C C6FE             7      ADD A,0-2       ;>2:CF=1
0119B5 E01E FD7E0C          19      LD  A,(IY+12)   ;BPB_BytsPerSec
0119B8 E021 6F               4      LD  L,A
0119B9 E022 3002            12      JR  NC,BPBFAT1
0119BB E024 F680             7      OR  080H
       E026                     BPBFAT1:            ;ここではCF=0
0119BD E026 DD770F          19      LD  (IX+DPB_BPS),A
0119C0 E029 2D               4      DEC L       ;以下のセクタサイズに合致しない場合はCF=1でエラーにする
0119C1 E02A C8              11      RET Z       ;1セクタ256バイト
0119C2 E02B 2D               4      DEC L
0119C3 E02C C8              11      RET Z       ;1セクタ512バイト
0119C4 E02D 2D               4      DEC L
0119C5 E02E 2D               4      DEC L
0119C6 E02F C8              11      RET Z       ;1セクタ1024バイト
0119C7 E030 37               4      SCF
0119C8 E031 C9              10      RET
                                
       E032                     RDFATS:
0119C9 E032 CD63E0          17      CALL    FATSETUP
0119CC E035 D8              11      RET C
0119CD E036 CD42E0          17      CALL    DRD24B
0119D0 E039 2A7CE5          16      LD  HL,(_FATBF)
0119D3 E03C 7E               7      LD  A,(HL)
0119D4 E03D C9              10      RET
                                
       E03E                     DRD16:
0119D5 E03E 0E00             7      LD  C,0
       E040                     DRD24:
0119D7 E040 0601             7      LD  B,1
       E042                     DRD24B:
0119D9 E042 DDE5            15      PUSH    IX
0119DB E044 DD2AA8E4        20      LD  IX,(_DPB)
0119DF E048 CDB1E1          17      CALL    FDRD        ;自己書き換え（ディスク読み込み）
       E049                     DRDPAT  EQU $-2
       E04B                     POP_IX_RET:
0119E2 E04B DDE1            14      POP IX
0119E4 E04D C9              10      RET
                                
       E04E                     DWT16:
0119E5 E04E 0E00             7      LD  C,0
       E050                     DWT24:
0119E7 E050 0601             7      LD  B,1
       E052                     DWT24B:
0119E9 E052 DDE5            15      PUSH    IX
0119EB E054 DD2AA8E4        20      LD  IX,(_DPB)
0119EF E058 CDAFE1          17      CALL    FDWT        ;自己書き換え（ディスク書き込み）
       E059                     DWTPAT  EQU $-2
0119F2 E05B 18EE            12      JR  POP_IX_RET
                                
       E05D                     WTFAT:
0119F4 E05D CD63E0          17      CALL    FATSETUP
0119F7 E060 30F0            12      JR  NC,DWT24B
0119F9 E062 C9              10      RET
                                ;   CALL    NC,DWT24B   ;予備FATの保存ルーチン
                                ;   RET C
                                ;   BIT 7,(IX+DPB_BPS)
                                ;   RET Z       ;予備FATが無い
                                ;   CALL    FATS2
                                ;   PUSH    HL      ;予備FAT
                                ;   LD  L,(IX+DPB_FATLN)
                                ;   LD  H,(IX+DPB_FATLN+1)
                                ;   ADD HL,DE
                                ;   EX  DE,HL
                                ;   POP HL
                                ;   JR  DWT24B
                                ;------------------------
                                ;FATのセットアップ
                                ;out
                                ;   B  : FATセクタ数
                                ;   DE : FAT先頭セクタ番号
                                ;   HL : FATバッファポインタ
                                ;   CF : 1=ドライブ切り替えエラー
                                ;note
                                ;   FATサイズがFATバッファを超える場合は
                                ;   対象クラスタ領域==(_FATIX)によって
                                ;   FAT12:対象クラスタ1024毎に1.5KBを切り替える
                                ;   FAT16:対象クラスタ1024毎に2KBを切り替える
                                ;------------------------
       E063                     FATSETUP:
0119FA E063 3AAAE4          13      LD  A,(_FATDRV)
0119FD E066 CD6CE1          17      CALL    CHGDRVR     ;ドライブ切り替え
011A00 E069 D8              11      RET C
       E06A                     FATS2:
011A01 E06A DD7E0F          19      LD  A,(IX+DPB_BPS)  ;512=2 1024=4
011A04 E06D 0F               4      RRCA
011A05 E06E CD9EE0          17      CALL    FATSETUP12  ;自己書き換え
       E06F                     FATSX   EQU $-2
011A08 E071 210000          10      LD  HL,0
011A0B E074 4A               4      LD  C,D
011A0C E075 54               4      LD  D,H
011A0D E076 3AABE4          13      LD  A,(_FATIX)  ;範囲FAT12:0-3/FAT16:0-63(0-03FH):65535*2/2048
011A10 E079 47               4      LD  B,A
011A11 E07A 04               4      INC B
011A12 E07B DD7E00          19      LD  A,(IX+DPB_FATLN)
       E07E                     FAT_SKP:
011A15 E07E 05               4      DEC B
011A16 E07F 2809            12      JR  Z,FAT1
011A18 E081 19              11      ADD HL,DE
011A19 E082 93               4      SUB E
011A1A E083 30F9            12      JR  NC,FAT_SKP
011A1C E085 DDCB0146        20      BIT 0,(IX+DPB_FATLN+1)  ;FATサイズが0100H(256)の場合
011A20 E089 C8              11      RET Z
       E08A                     FAT1:
011A21 E08A EB               4      EX  DE,HL
011A22 E08B B7               4      OR  A       ;0の場合は0100Hとして扱う
011A23 E08C 2803            12      JR  Z,FAT3
011A25 E08E B9               4      CP  C       ;C=FATバッファに読み込めるセクタ数
011A26 E08F 3801            12      JR  C,FAT2
       E091                     FAT3:
011A28 E091 79               4      LD  A,C
       E092                     FAT2:
011A29 E092 47               4      LD  B,A
                                
011A2A E093 2AFAE5          16      LD  HL,(_FATPS) ;fat sector pos
011A2D E096 19              11      ADD HL,DE
011A2E E097 EB               4      EX  DE,HL
011A2F E098 2A7CE5          16      LD  HL,(_FATBF)
011A32 E09B AF               4      XOR A       ;CF=0
011A33 E09C 4F               4      LD  C,A
011A34 E09D C9              10      RET
                                ;
                                ;   FATバッファに読み込める最大のセクタ数と_FATIXで進めるセクタ数
                                ;   FATSETUP* (FAT12/FAT16)
                                ;out
                                ;   D : FATバッファに読み込める最大のセクタ数
                                ;   E : _FATIXで進めるセクタ数
       E09E                     FATSETUP12:
011A35 E09E 110606          10      LD  DE,0606H    ;256
011A38 E0A1 D8              11      RET C
011A39 E0A2 110303          10      LD  DE,0303H    ;512
011A3C E0A5 0F               4      RRCA
011A3D E0A6 D8              11      RET C
011A3E E0A7 110102          10      LD  DE,0201H    ;1024
011A41 E0AA C9              10      RET
                                
       E0AB                     FATSETUP16:
011A42 E0AB 110808          10      LD  DE,0808H    ;256
011A45 E0AE D8              11      RET C
011A46 E0AF 110404          10      LD  DE,0404H
011A49 E0B2 0F               4      RRCA            ;512
011A4A E0B3 D8              11      RET C
011A4B E0B4 110202          10      LD  DE,0202H    ;1024
011A4E E0B7 C9              10      RET
                                
       E0B8                     CHGDRV:
011A4F E0B8 E5              11      PUSH    HL
011A50 E0B9 2189E4          10      LD  HL,_DSK
011A53 E0BC BE               7      CP  (HL)
011A54 E0BD 280A            12      JR  Z,CHGDRVE
       E0BF                     CHGDRV1:
011A56 E0BF DDE5            15      PUSH    IX
011A58 E0C1 CDCBE0          17      CALL    CHGDRV0
011A5B E0C4 3A89E4          13      LD  A,(_DSK)
011A5E E0C7 DDE1            14      POP IX
       E0C9                     CHGDRVE:
011A60 E0C9 E1              10      POP HL
011A61 E0CA C9              10      RET
                                
       E0CB                     CHGDRV0:
011A62 E0CB 6F               4      LD  L,A
011A63 E0CC CDDCE4          17      CALL    _GETDPB
011A66 E0CF D8              11      RET C
011A67 E0D0 DD22A8E4        20      LD  (_DPB),IX
011A6B E0D4 7D               4      LD  A,L
011A6C E0D5 3289E4          13      LD  (_DSK),A
       E0D8                     CHGDRV2:
011A6F E0D8 C5              11      PUSH    BC
011A70 E0D9 D5              11      PUSH    DE
011A71 E0DA ED7323E1        20      LD  (SPPAT2),SP
011A75 E0DE F3               4      DI
011A76 E0DF DDF9            10      LD  SP,IX
                                
011A78 E0E1 E1              10      POP HL      ;00:DPB_FATLN
011A79 E0E2 E1              10      POP HL      ;02:DPB_DRD
011A7A E0E3 2249E0          16      LD  (DRDPAT),HL
                                
011A7D E0E6 E1              10      POP HL
011A7E E0E7 2259E0          16      LD  (DWTPAT),HL ;04:DPB_DWT
                                
011A81 E0EA E1              10      POP HL      ;L=06:DPB_FATID H=07:DPB_SECPCL
011A82 E0EB 7C               4      LD  A,H
011A83 E0EC 3252D7          13      LD  (SPCPAT),A  ;1クラスタの論理セクタ数
011A86 E0EF 3D               4      DEC A
011A87 E0F0 32BDDE          13      LD  (_NCPAT),A
                                
011A8A E0F3 E1              10      POP HL      ;08:DPB_MAXCL
011A8B E0F4 7D               4      LD  A,L
011A8C E0F5 3271D7          13      LD  (CLPAT2),A
011A8F E0F8 7C               4      LD  A,H
011A90 E0F9 326DD7          13      LD  (CLPAT1),A
011A93 E0FC 2B               6      DEC HL
011A94 E0FD 226ED9          16      LD  (MAXCLP),HL
                                
011A97 E100 E1              10      POP HL      ;L=0A:DPB_FDMODE H=0B:DPB_DIRSCNT
011A98 E101 4C               4      LD  C,H
                                
011A99 E102 E1              10      POP HL      ;L=0C:DPB_MAXCYL H=0D:DPB_MAXSEC
                                
011A9A E103 E1              10      POP HL      ;L=0E:DPB_FATPS H=0F:DPB_BPS
011A9B E104 7C               4      LD  A,H     ;DPB_BPS
011A9C E105 E607             7      AND 7
011A9E E107 3257DC          13      LD  (SECSZ+2),A ;1セクタのサイズの上位1バイト 0x400 - 0x200 - 0x100
                                                ;1セクタ512 2D/2DD/2HC/2HQ(2HD1.44MB)/EMM/BRAM/EMEM等
                                                ;1セクタ1024 2HD/2HDE98
                                                ;1セクタ256 GRAM/RAMF/CMOS/等
                                                ;1024   512 256
                                                ;4  2   1
011AA1 E10A 87               4      ADD A,A     ;8  4   2
011AA2 E10B 87               4      ADD A,A     ;010H   8   4
011AA3 E10C 87               4      ADD A,A     ;020H   010H    8
011AA4 E10D 32CFD5          13      LD  (SDECPAT),A ;1セクタ辺りのディレクトリエントリ数
                                
011AA7 E110 2600             7      LD  H,0
011AA9 E112 22FAE5          16      LD  (_FATPS),HL
                                
011AAC E115 E1              10      POP HL      ;10:DPB_DIRPS
011AAD E116 22FCE5          16      LD  (_DIRPS),HL
                                
011AB0 E119 E1              10      POP HL      ;L=12:DPB_DEVICE H=13:DPB_UNITNO
011AB1 E11A 7C               4      LD  A,H
011AB2 E11B 3284E4          13      LD  (_DRIVE),A
                                
011AB5 E11E E1              10      POP HL      ;14:DPB_ADDCL
011AB6 E11F 2262D7          16      LD  (CLSPAT),HL
                                
011AB9 E122 310000          10      LD  SP,0        ;元のSPを復元
       E123                     SPPAT2  EQU $-2
011ABC E125 FB               4      EI
011ABD E126 2AFCE5          16      LD  HL,(_DIRPS)
011AC0 E129 0600             7      LD  B,0
011AC2 E12B 09              11      ADD HL,BC       ;C=DPB_DIRSCNT
011AC3 E12C 22EAD5          16      LD  (MD_PAT),HL
                                
011AC6 E12F 2A6ED9          16      LD  HL,(MAXCLP)
011AC9 E132 110AF0          10      LD  DE,-4086    ;クラスタ数が4086未満:FAT12 4086以上:FAT16
011ACC E135 19              11      ADD HL,DE
011ACD E136 380F            12      JR  C,SETFAT16
011ACF E138 2143DE          10      LD  HL,GNCL     ;FAT12
011AD2 E13B 1166DE          10      LD  DE,SNCL
011AD5 E13E 019EE0          10      LD  BC,FATSETUP12
011AD8 E141 DDCB0FAE        23      RES 5,(IX+DPB_BPS)  ;DPB_BPS(FAT12)
011ADC E145 180D            12      JR  EXTRA1
       E147                     SETFAT16:
011ADE E147 219ADE          10      LD  HL,GNCL16   ;FAT16
011AE1 E14A 11A7DE          10      LD  DE,SNCL16
011AE4 E14D 01ABE0          10      LD  BC,FATSETUP16
011AE7 E150 DDCB0FEE        23      SET 5,(IX+DPB_BPS)  ;DPB_BPS(FAT16)
       E154                     EXTRA1:
011AEB E154 22F8E4          16      LD  (GNCPAT),HL
011AEE E157 ED53FBE4        20      LD  (SNCPAT),DE
011AF2 E15B ED436FE0        20      LD  (FATSX),BC
011AF6 E15F D1              10      POP DE
011AF7 E160 C1              10      POP BC
011AF8 E161 AF               4      XOR A
011AF9 E162 C9              10      RET
                                
       E163                     GETDPBD:
011AFA E163 DDE3            23      EX  (SP),IX
011AFC E165 DDE5            15      PUSH    IX
011AFE E167 3A88E4          13      LD  A,(_DRV)
011B01 E16A 1807            12      JR  GETDPB1
                                
       E16C                     CHGDRVR:
011B03 E16C CDD9E4          17      CALL    _CHGDRV
011B06 E16F D8              11      RET C
011B07 E170 3A89E4          13      LD  A,(_DSK)
       E173                     GETDPB1:
011B0A E173 C3DCE4          10      JP  _GETDPB
                                
       E176                     GETDPB:
011B0D E176 FE08             7      CP  8
011B0F E178 3F               4      CCF
011B10 E179 D8              11      RET C
011B11 E17A 0F               4      RRCA
011B12 E17B 0F               4      RRCA
011B13 E17C 0F               4      RRCA
011B14 E17D DD                      DB  0DDH        ;Z80未定義命令
011B15 E17E 6F               4      LD  L,A     ;LD IXL,A
011B16 E17F DD                      DB  0DDH        ;Z80未定義命令
011B17 E180 26E6             7      LD  H,_DEVICE/256   ;LD IXH,_DEVICE/256
011B19 E182 DD7E00          19      LD  A,(IX+DPB_FATLN)
011B1C E185 A7               4      AND A       ;CF=0の為
011B1D E186 DDCB0F6E        20      BIT 5,(IX+DPB_BPS)
011B21 E18A C0              11      RET NZ      ;FAT16
011B22 E18B DDCB126E        20      BIT 5,(IX+DPB_DEVICE)
011B26 E18F C0              11      RET NZ      ;BPB
011B27 E190 FE01             7      CP  001H        ;A=0 THEN CF=1
011B29 E192 C9              10      RET
                                
       E193                     _SYS5F:
011B2A E193 AF               4      XOR A
       E194                     FFLUSH:
011B2B E194 F5              11      PUSH    AF
011B2C E195 CDCBDD          17      CALL    WTFATX
011B2F E198 AF               4      XOR A
011B30 E199 32ABE4          13      LD  (_FATIX),A
011B33 E19C 2F               4      CPL         ;0FFH
011B34 E19D 32AAE4          13      LD  (_FATDRV),A
011B37 E1A0 3E                      DB  03EH        ;次のPUSH AFをスキップ
       E1A1                     FFLUSHBUF:
011B38 E1A1 F5              11      PUSH    AF
011B39 E1A2 CD81DD          17      CALL    DWTX
011B3C E1A5 3EFF             7      LD  A,0FFH
011B3E E1A7 3239E4          13      LD  (SFILE),A
011B41 E1AA 32A5E4          13      LD  (_DBDRV),A
011B44 E1AD F1              10      POP AF
011B45 E1AE C9              10      RET
                                
[EOF:LDDIO.ASM:SHIFT_JIS]
                                    INCLUDE "MSXDISK.ASM"
                                
                                ;   LSX-Dodgers DISK
                                ;   MSX
                                
                                ;   ROM DISK DRIVER
                                ;   1セクタ可変(256/512/1024)
                                
       E1AF                     WTTRK:
       E1AF                     FDWT:
011B46 E1AF 37               4      SCF
011B47 E1B0 C9              10      RET
       E1B1                     FDRD:
011B48 E1B1 ED7342E2        20      LD  (DRDSP),SP
011B4C E1B5 3A43E2          13      LD  A,(DRDSPH)  ;スタックがカートリッジと被っていないかチェック
011B4F E1B8 FE7F             7      CP  07FH
011B51 E1BA 3807            12      JR  C,FDRD1
011B53 E1BC FEC1             7      CP  0C1H
011B55 E1BE 3003            12      JR  NC,FDRD1
011B57 E1C0 315EF5          10      LD  SP,BUF
       E1C3                     FDRD1:
011B5A E1C3 C5              11      PUSH    BC
011B5B E1C4 D5              11      PUSH    DE
                                
011B5C E1C5 E5              11      PUSH    HL
011B5D E1C6 EB               4      EX  DE,HL
011B5E E1C7 DD460F          19      LD  B,(IX+DPB_BPS)
       E1CA                     EADR1:
011B61 E1CA CB18             8      RR  B
011B63 E1CC 3803            12      JR  C,EADR2
011B65 E1CE 29              11      ADD HL,HL
011B66 E1CF 18F9            12      JR  EADR1
       E1D1                     EADR2:
011B68 E1D1 E5              11      PUSH    HL  ;あとでDEで受け取る
011B69 E1D2 29              11      ADD HL,HL   ;64KB→32KB
011B6A E1D3 29              11      ADD HL,HL   ;32KB→16KB
       E1D4                     ASCII16K1:
011B6B E1D4 29              11      ADD HL,HL   ;16KB→8KB  ;ASCII-16Kの場合はここがNOPに置き換えられる
                                
011B6C E1D5 DD7E0C          19      LD  A,(IX+DPB_MAXCYL)   ;16KB単位でカートリッジ内のディスクが存在する位置を指定
       E1D8                     ASCII16K2:
011B6F E1D8 87               4      ADD A,A         ;ASCII-16Kの場合はここがNOPに置き換えられる
011B70 E1D9 84               4      ADD A,H
011B71 E1DA 5F               4      LD  E,A
011B72 E1DB 3A62E4          13      LD  A,(ROM_SLT)
011B75 E1DE 210070          10      LD  HL,BANK2_SEL
       E1DF                     ROM8000H    EQU $-2
011B78 E1E1 CDFBD2          17      CALL    WRSLT
                                
011B7B E1E4 2680             7      LD  H,080H
011B7D E1E6 3A62E4          13      LD  A,(ROM_SLT) ;カートリッジROMに切り替える
011B80 E1E9 CD6ED3          17      CALL    ENASLT
                                
011B83 E1EC D1              10      POP DE
011B84 E1ED E1              10      POP HL      ;HLは読み出し先のメモリアドレス
                                
011B85 E1EE 7B               4      LD  A,E
011B86 E1EF E61F             7      AND 01FH        ;セグメントのサイズでフィルタする(8K:1F/16K:3F)
       E1F0                     ASCII16K3   EQU $-1
011B88 E1F1 1E00             7      LD  E,0     ;DEはROMディスクから読み出すアドレス
011B8A E1F3 C680             7      ADD A,080H
011B8C E1F5 57               4      LD  D,A
                                
011B8D E1F6 3E                      DB  03EH
011B8E E1F7 A7               4      AND A
011B8F E1F8 3225E2          13      LD  (DRD_SWC3),A
011B92 E1FB 7C               4      LD  A,H     ;読み出し先がカートリッジと被っていないかチェック
011B93 E1FC FE7B             7      CP  07BH
011B95 E1FE 3812            12      JR  C,DRD2
011B97 E200 FEC1             7      CP  0C1H
011B99 E202 300E            12      JR  NC,DRD2
011B9B E204 222CE2          16      LD  (DRD_SWC1),HL   ;被っている場合はデータバッファをフラッシュして一時的に使う
011B9E E207 2100EF          10      LD  HL,DTBUF
011BA1 E20A 3E                      DB  03EH
011BA2 E20B 37               4      SCF
011BA3 E20C 3225E2          13      LD  (DRD_SWC3),A
011BA6 E20F CDA1E1          17      CALL    FFLUSHBUF
       E212                     DRD2:
011BA9 E212 DD7E0F          19      LD  A,(IX+DPB_BPS)  ;BCは読み出すセクタサイズ
011BAC E215 E607             7      AND 7
011BAE E217 47               4      LD  B,A
011BAF E218 4B               4      LD  C,E ;E=0
                                
011BB0 E219 EB               4      EX  DE,HL
011BB1 E21A EDB0                    LDIR
011BB3 E21C D5              11      PUSH    DE
011BB4 E21D 2680             7      LD  H,080H
011BB6 E21F 3A43F3          13      LD  A,(0F341H+2)    ;メインRAMに戻す
011BB9 E222 CD6ED3          17      CALL    ENASLT
       E225                     DRD_SWC3:
011BBC E225 A7               4      AND A       ;自己書き換え)被っている場合はSCFになる
011BBD E226 3012            12      JR  NC,DRD3
                                
011BBF E228 2100EF          10      LD  HL,DTBUF
011BC2 E22B 110000          10      LD  DE,0
       E22C                     DRD_SWC1    EQU $-2
011BC5 E22E DD7E0F          19      LD  A,(IX+DPB_BPS)  ;BCは読み出すセクタサイズ
011BC8 E231 E607             7      AND 7
011BCA E233 47               4      LD  B,A
011BCB E234 0E00             7      LD  C,0
011BCD E236 EDB0                    LDIR
011BCF E238 E1              10      POP HL
011BD0 E239 D5              11      PUSH    DE
       E23A                     DRD3:
011BD1 E23A E1              10      POP HL
011BD2 E23B D1              10      POP DE
011BD3 E23C 13               6      INC DE
011BD4 E23D C1              10      POP BC
011BD5 E23E 1083            13      DJNZ    FDRD1
011BD7 E240 AF               4      XOR A
011BD8 E241 310000          10      LD  SP,0
       E242                     DRDSP   EQU $-2
       E243                     DRDSPH  EQU $-1
011BDB E244 FB               4      EI
011BDC E245 C9              10      RET
                                
       E246                     PDWT:
011BDD E246 37               4      SCF
011BDE E247 CB7C             8      BIT 7,H
011BE0 E249 2056            12      JR  NZ,PDWX
011BE2 E24B CDA1E1          17      CALL    FFLUSHBUF
       E24E                     PDWT1:
011BE5 E24E C5              11      PUSH    BC
011BE6 E24F D5              11      PUSH    DE
011BE7 E250 1100EF          10      LD  DE,DTBUF
011BEA E253 DD7E0F          19      LD  A,(IX+DPB_BPS)  ;BCは読み出すセクタサイズ
011BED E256 E607             7      AND 7
011BEF E258 47               4      LD  B,A
011BF0 E259 0E00             7      LD  C,0
011BF2 E25B EDB0                    LDIR
011BF4 E25D E5              11      PUSH    HL
011BF5 E25E 2100EF          10      LD  HL,DTBUF
011BF8 E261 0601             7      LD  B,1
011BFA E263 37               4      SCF
011BFB E264 CDA1E2          17      CALL    PDWX
011BFE E267 3834            12      JR  C,PDRWERR
011C00 E269 E1              10      POP HL
011C01 E26A D1              10      POP DE
011C02 E26B 13               6      INC DE
011C03 E26C C1              10      POP BC
011C04 E26D 10D7            13      DJNZ    PDWT
011C06 E26F AF               4      XOR A
011C07 E270 C9              10      RET
       E271                     PDRD:
011C08 E271 A7               4      AND A
011C09 E272 CB7C             8      BIT 7,H
011C0B E274 202B            12      JR  NZ,PDWX
011C0D E276 CDA1E1          17      CALL    FFLUSHBUF
       E279                     PDRD1:
011C10 E279 C5              11      PUSH    BC
011C11 E27A D5              11      PUSH    DE
011C12 E27B E5              11      PUSH    HL
011C13 E27C 2100EF          10      LD  HL,DTBUF
011C16 E27F 0601             7      LD  B,1
011C18 E281 A7               4      AND A
011C19 E282 CDA1E2          17      CALL    PDWX
011C1C E285 3816            12      JR  C,PDRWERR
011C1E E287 D1              10      POP DE
011C1F E288 2100EF          10      LD  HL,DTBUF
011C22 E28B DD7E0F          19      LD  A,(IX+DPB_BPS)  ;BCは読み出すセクタサイズ
011C25 E28E E607             7      AND 7
011C27 E290 47               4      LD  B,A
011C28 E291 0E00             7      LD  C,0
011C2A E293 EDB0                    LDIR
011C2C E295 EB               4      EX  DE,HL
011C2D E296 D1              10      POP DE
011C2E E297 13               6      INC DE
011C2F E298 C1              10      POP BC
011C30 E299 10D6            13      DJNZ    PDRD
011C32 E29B AF               4      XOR A
011C33 E29C C9              10      RET
       E29D                     PDRWERR:
011C34 E29D E1              10      POP HL
011C35 E29E D1              10      POP DE
011C36 E29F C1              10      POP BC
011C37 E2A0 C9              10      RET
       E2A1                     PDWX:                   ;CF=0 READ CF=1 WRITE
011C38 E2A1 DDCB1266        20      BIT 4,(IX+DPB_DEVICE)   ;デバイス情報
011C3C E2A5 2003            12      JR  NZ,PDWX1
011C3E E2A7 DD4E06          19      LD  C,(IX+DPB_FATID)    ;メディアバイト
       E2AA                     PDWX1:
011C41 E2AA DD7E13          19      LD  A,(IX+DPB_UNITNO)   ;デバイスドライバ内におけるユニット番号
011C44 E2AD C5              11      PUSH    BC
011C45 E2AE D5              11      PUSH    DE
011C46 E2AF E5              11      PUSH    HL
011C47 E2B0 DDE5            15      PUSH    IX
011C49 E2B2 FDE5            15      PUSH    IY
011C4B E2B4 CDA7FF          17      CALL    H_PHYD
011C4E E2B7 FDE1            14      POP IY
011C50 E2B9 DDE1            14      POP IX
011C52 E2BB E1              10      POP HL
011C53 E2BC D1              10      POP DE
011C54 E2BD C1              10      POP BC
011C55 E2BE D8              11      RET C
       E2BF                     PDWX2:
011C56 E2BF 13               6      INC DE
011C57 E2C0 DD7E0F          19      LD  A,(IX+DPB_BPS)  ;BCは読み出すセクタサイズ
011C5A E2C3 E607             7      AND 7
011C5C E2C5 84               4      ADD A,H
011C5D E2C6 67               4      LD  H,A
011C5E E2C7 10F6            13      DJNZ    PDWX2
011C60 E2C9 AF               4      XOR A
011C61 E2CA C9              10      RET
[EOF:MSXDISK.ASM:UTF_8]
                                    INCLUDE "LDCCPWK.ASM"
                                
                                ;   LSX-Dodgers CCP WORK
                                
       003B                     PATHX   EQU 59
011C62 E2CB                     PATHD:  DS  PATHX
011C9D E306 00                  PATHE:  DB  0
                                
       E307                     DTA_CCP:
011C9E E307                         DS  37
                                
       E32C                     FCB_BAT:
011CC3 E32C                         DS  37
                                
011CE8 E351 2020203C4449523E    DIRMES: DB  "   <DIR>  $"
            202024              
011CF3 E35C 20667265652024      FREE:   DB  " free $"
[EOF:LDCCPWK.ASM:UTF_8]
                                    INCLUDE "LDWORK.ASM"
                                
                                ;   LSX-Dodgers WORK0
                                ;
                                ;   CP/M互換BIOS
                                ;   BOOT:アドレス下位1バイトが0になるように
       E363                     AT_WORK:
011CFA E363                         DS  WORKAD-AT_WORK
                                
       E400                     CPM_BOOT:
011D97 E400 C30000          10      JP  0
       E403                     _SYS00:     ;(BDOS)プログラム終了
       E403                     CPM_WBOOT:
011D9A E403 C309C9          10      JP  WBOOT1
       E406                     CPM_CONST:
011D9D E406 C354D1          10      JP  CONSTX
       E409                     _SYS07:     ;(BDOS)コンソール直接入力
       E409                     CPM_CONIN:
011DA0 E409 C375D0          10      JP  FLGET
       E40C                     CPM_CONOUT:
011DA3 E40C C3F8D1          10      JP  CONOUT1
                                
       E40F                     DECBF:              ;10進数表示時のバッファ(5バイト)
011DA6 E40F                         DS  5
       E40F                     RR_BUF_HL   EQU DECBF   ;CP/M互換ファイルアクセスの際のランダムレコードの一時的な保管場所
       E411                     RR_BUF_A    EQU DECBF+2 ;計3バイト
                                
011DAB E414 00                  FDRV:   DB  0
011DAC E415                     FNAME:  DS  36
011DD0 E439                     SFILE:  DS  33      ;DRV FILENAME
                                
011DF1 E45A                         DS  3
                                
011DF4 E45D 0000                LEFTX:  DW  0
011DF6 E45F 0000                DTAX:   DW  0
                                
       E461                     ZERO:
       E461                     BEEPD:
011DF8 E461 008E01000B000C10        DB  0,08EH,1,0,00BH,0,00CH,010H
011E00 E469 073E08100D00FF          DB  007H,03EH,008H,010H,00DH,0,0FFH
       E462                     RTC_YY  EQU BEEPD+1
       E463                     RTC_MW  EQU BEEPD+2
       E464                     RTC_DD  EQU BEEPD+3
       E465                     RTC_TT  EQU BEEPD+4
       E466                     RTC_MM  EQU BEEPD+5
       E467                     RTC_SS  EQU BEEPD+6
       E462                     ROM_SLT EQU BEEPD+1
                                
011E07 E470 00                  CHECK:  DB  0
                                
011E08 E471 4F4B24              OK: DB  "OK$"
011E0B E474                         DS  5
011E10 E479 4572726F722124      COMERM: DB  "Error!$"
                                ;   システムワークエリア
                                ;   _CYL0:アドレス下位1バイトが080Hになるように
011E17 E480 FF                  _CYL0:  DB  0FFH    ;Cylinder
011E18 E481 FF                  _CYL1:  DB  0FFH    ;Cylinder
011E19 E482 FF                  _CYL2:  DB  0FFH    ;Cylinder
011E1A E483 FF                  _CYL3:  DB  0FFH    ;Cylinder
011E1B E484 00                  _DRIVE: DB  0   ;unit number
011E1C E485 00                  _SEEKSP:DB  0   ;Seek speed
011E1D E486 FF                  _ISEEK: DB  0FFH    ;
011E1E E487 00                  _DVSW:  DB  0
011E1F E488 00                  _DRV:   DB  0
011E20 E489 FF                  _DSK:   DB  0FFH
011E21 E48A 8000                _DTA:   DW  00080H
011E23 E48C 0000                _CTC:   DW  0
011E25 E48E 0000                _TXADR: DW  0
011E27 E490 0000                _KEYPS: DW  0
011E29 E492 00FF                _KEYD:  DW  0FF00H  ;キーデータ
011E2B E494 0000                _KEYSP: DB  KEYSP_L,KEYSP_H ;オートリピートの速度
011E2D E496 00                  _COLORF:DB  COLORF  ;色
011E2E E497 19                  _LINE:  DB  LINE
                                
011E2F E498 0000                _FCB:   DW  0   ;SEARCH FILES
011E31 E49A 0000                _FBPS:  DW  0   ;    //
011E33 E49C 0000                _FBAD:  DW  0   ;    //
011E35 E49E 00                  _FBCNT: DB  0   ;    //
011E36 E49F 00                  _FILEN: DB  0   ;    //
011E37 E4A0 00                  _DIRF:  DB  0   ;bit7:ディレクトリ bit0-6:セクタインデックス
011E38 E4A1                         DS  1
011E39 E4A2 00                  _WTFATF:DB  0   ;FATバッファの更新フラグ
011E3A E4A3                         DS  1
011E3B E4A4 00                  _WTDBF: DB  0   ;データバッファの更新フラグ
011E3C E4A5 FF                  _DBDRV: DB  0FFH    ;データバッファにあるデータを読み込んだドライブ
011E3D E4A6 0000                _DBSEC: DW  0   ;データバッファにあるデータを読み込んだセクタ番号
011E3F E4A8 0000                _DPB:   DW  0
       E4AA                     _FATDRV:
011E41 E4AA FF                      DB  0FFH    ;FATバッファに読み込んでいるドライブ
011E42 E4AB 00                  _FATIX: DB  0   ;FATバッファに読み込んでいるインデックス
       E4AC                     _FAKEFREE:
011E43 E4AC 0000                    DW  0   ;偽の残量（FATサイズが大きくなると重くなるのでその対策）
                                
011E45 E4AE                         DS  2
                                
       E4B0                     CRTCD:
011E47 E4B0 6F                      DB  06FH
       E4B1                     _WIDTH:
011E48 E4B1 28                      DB  WIDTH
       E4B2                     TVRAMTOP:
011E49 E4B2 5938                    DB  059H,038H
011E4B E4B4 1F02                    DB  01FH,002H
       E4B6                     _LINE2:
011E4D E4B6 19                      DB  019H
       E4B7                     WKE4:
011E4E E4B7 1C                      DB  01CH
       E4B8                     WKE6:
011E4F E4B8 00                      DB  000H
       E4B9                     WK40:
011E50 E4B9 07                      DB  007H
       E4BA                     _PAGE_MINUS:
011E51 E4BA 18FC                    DW  0-WIDTH*LINE
       E4BC                     _WIDTH_MINUS:
011E53 E4BC D8FF                    DW  0-WIDTH
       E4BE                     WK30:
011E55 E4BE 0C                      DB  00CH
       E4BF                     WK31:
       E4BF                     WK1FD0:
011E56 E4BF 20                      DB  020H
                                
011E57 E4C0 0000                CTC0:   DW  INTCTCE
011E59 E4C2 0000                CTC1:   DW  INTCTCE
011E5B E4C4 0000                CTC2:   DW  INTCTCE
011E5D E4C6 0000                CTC3:   DW  INTCTCE
011E5F E4C8 0000                INTVEC: DW  INT
                                
                                ;   LSX-Dodgers 独自BIOS
                                
011E61 E4CA C3BAD0          10  _INKEY: JP  INKEY
011E64 E4CD C3FBCF          10  _PRINT: JP  PRINT
011E67 E4D0 C392D1          10  _SCRN:  JP  SCRN
011E6A E4D3 C372D1          10  _POS:   JP  POS
011E6D E4D6 C37DD1          10  _LOC:   JP  LOC
       E4D9                     _CHGDRV:
011E70 E4D9 C3B8E0          10      JP  CHGDRV
       E4DC                     _GETDPB:
011E73 E4DC C376E1          10      JP  GETDPB
       E4DF                     _FFLUSH:
011E76 E4DF C394E1          10      JP  FFLUSH
       E4E2                     _RDFATX:
011E79 E4E2 C3A1DD          10      JP  RDFATX
011E7C E4E5 C3C9DE          10  _RDFAT: JP  RDFAT
011E7F E4E8 C3AFE1          10  _WTTRK: JP  WTTRK
011E82 E4EB C3B1E1          10  _FDRD:  JP  FDRD
011E85 E4EE C3AFE1          10  _FDWT:  JP  FDWT
       E4F1                     _BPB2DPB:
011E88 E4F1 C356DF          10      JP  BPB2DPB
       E4F4                     _BREAK:
011E8B E4F4 C388CA          10      JP  END_BATCH
       E4F7                     _GNCL:
011E8E E4F7 C343DE          10      JP  GNCL        ; self-modifying code
       E4F8                     GNCPAT  EQU $-2
       E4FA                     _SNCL:
011E91 E4FA C366DE          10      JP  SNCL        ; self-modifying code
       E4FB                     SNCPAT  EQU $-2
011E94 E4FD C341C9          10  _COMANL:JP  COMANL
                                
       E500                     _WE:
[EOF:LDWORK.ASM:SHIFT_JIS]
                                    INCLUDE "LDCALL.ASM"
                                
                                ;   LSX-Dodgers システムコール(BDOS)
                                ;
                                ;   LSX-Dodgers SYSTEM CALL
                                ;   STABLE:アドレス下位1バイトが0になるように
                                
       E500                     STABLE:
                                ;0
011E97 E500 03E4FECF2FD0FCD5        DW  _SYS00,_SYS01,_SYS02,_SYS03
011E9F E508 6ACD6ACD34D009E4        DW  _SYS04,_SYS05,_SYS06,_SYS07
011EA7 E510 3CD06CCDC0D054D1        DW  _SYS08,_SYS09,_SYS0A,_SYS0B
011EAF E518 81CD86CD95CDA6CD        DW  _SYS0C,_SYS0D,_SYS0E,_SYS0F
                                ;1
011EB7 E520 FACD41CE8ACEBBCE        DW  _SYS10,_SYS11,_SYS12,_SYS13
011EBF E528 C3CED9CEEECEE6CE        DW  _SYS14,_SYS15,_SYS16,_SYS17
011EC7 E530 35CF3ACF3FCF45CF        DW  _SYS18,_SYS19,_SYS1A,_SYS1B
011ECF E538 6ACD6BCF6ACD6FCF        DW  _SYS1C,_SYS1D,_SYS1E,_SYS1F
                                ;2
011ED7 E540 6ACD25CF2DCF76CF        DW  _SYS20,_SYS21,_SYS22,_SYS23
011EDF E548 9CCF6ACD75DA4DDB        DW  _SYS24,_ERROR,_SYS26,_SYS27
011EE7 E550 2DCFA5CF66D1FCD5        DW  _SYS28,_SYS29,_SYS2A,_SYS2B
011EEF E558 6CD1FCD56ACDC6CF        DW  _SYS2C,_SYS2D,_SYS2E,_SYS2F
                                ;3
011EF7 E560 C0CF6ACD6ACD6ACD        DW  _SYS30,_ERROR,_ERROR,_ERROR
011EFF E568 6ACD6ACD6ACD6ACD        DW  _ERROR,_ERROR,_ERROR,_ERROR
011F07 E570 6ACDFCD5FCD5E7CF        DW  _ERROR,_SYS39,_SYS3A,_SYS5A
                                ;DOS2
011F0F E578 4DCD                    DW  _DOS2
                                
011F11 E57A                         DS  2
011F13 E57C 00E7                _FATBF: DW  FATBF
011F15 E57E 00EF                _DTBUF: DW  DTBUF
                                
                                ;   コントロールコードテーブル
                                ;   CTRLTB:アドレス下位1バイトが080Hになるように
                                
       E580                     CTRLTB:
011F17 E580 00000000A2D10000        DW  CTRL00,CTRL00,CTRL02,CTRL03 ;  A,B,C
011F1F E588 0000000000000000        DW  CTRL04,CTRL05,CTRL06,CTRL07 ;D,E,F,G
011F27 E590 0000000000000000        DW  CTRL08,CTRL09,CTRL0A,CTRL0B ;H,I,J,K
011F2F E598 0000000000000000        DW  CTRL0C,CTRL0D,CTRL0E,CTRL00 ;L,M,N,O
011F37 E5A0 0000000000000000        DW  CTRL00,CTRL00,CTRL12,CTRL00 ;P,Q,R,S
011F3F E5A8 0000000000000000        DW  CTRL00,CTRL00,CTRL00,CTRL00 ;T,U,V,W
011F47 E5B0 0000000000000000        DW  CTRL00,CTRL00,CTRL0C,CTRL1B ;X,Y,Z,ESC
011F4F E5B8 0000000000000000        DW  CTRL1C,CTRL1D,CTRL1E,CTRL1F ;→,←,↑,↓
                                
011F57 E5C0 0200                M2D:    DW  2
011F59 E5C2 FD02                    DB  0FDH,2
011F5B E5C4 6401                    DW  356
011F5D E5C6 FF0728090182            DB  0FFH,7,40,9,1,082H
011F63 E5CC 0500A7000800            DW  5,0A7H,8
                                
011F69 E5D2 0200                M2HD:   DW  2
011F6B E5D4 FE01                    DB  0FEH,1
011F6D E5D6 C704                    DW  1223
011F6F E5D8 FE064D080184            DB  0FEH,6,77,8,1,084H
011F75 E5DE 0500A7000900            DW  5,0A7H,9
                                
011F7B E5E4 1617                SDDATA: DB  22,23       ;(FCB)ファイルを最後に変更した時刻
011F7D E5E6 1415                    DB  20,21       ;(FCB)ファイルを最後に変更した日付
011F7F E5E8 1A1B                    DB  26,27       ;(FCB)ファイルの先頭クラスタ
011F81 E5EA 10111213                DB  16,17,18,19 ;(FCB)ファイルのサイズ(バイト単位)
       E5EE                     SDDATAE:
                                
011F85 E5EE                         DS  2
       E5F0                     _FCB_BAT:
011F87 E5F0 2CE3                    DW  FCB_BAT
       E5F2                     _PATH:
011F89 E5F2 CBE2                    DW  PATHD
                                
011F8B E5F4                     SCDIR:  DS  2       ;+14 +15
011F8D E5F6                     SFBPS:  DS  2       ;FBPS
011F8F E5F8                     SFNDF:  DS  2       ;FILEN DIRF
                                
011F91 E5FA 0000                _FATPS: DW  0
011F93 E5FC 0000                _DIRPS: DW  0
011F95 E5FE 0000                _CLPS:  DW  0
                                
       E600                     _PE:
[EOF:LDCALL.ASM:SHIFT_JIS]
                                    INCLUDE "MSXDPB.ASM"
                                
                                ;   LSX-Dodgers DPB
                                ;   MSX
                                
       E600                     _DEVICE:
                                
                                ;   A:
                                
011F97 E600 0300                    DW  3   ;DPB_FATLN
011F99 E602 EBE4                    DW  _FDRD   ;DPB_DRD
011F9B E604 EEE4                    DW  _FDWT   ;DPB_DWT
011F9D E606 F9                      DB  0F9H    ;DPB_FATID
011F9E E607 03                      DB  3   ;DPB_SECPCL
011F9F E608 CB02                    DW  715 ;DPB_MAXCL
011FA1 E60A 00                      DB  0   ;DPB_FDMODE
011FA2 E60B 07                      DB  7   ;DPB_DIRSCNT
011FA3 E60C 01                      DB  1   ;DPB_MAXCYL ROMディスクではBPPが格納されている先頭BANK
011FA4 E60D 00                      DB  0   ;DPB_MAXSEC
011FA5 E60E 01                      DB  1   ;DPB_FATPS
011FA6 E60F 82                      DB  082H    ;DPB_BPS
011FA7 E610 0700                    DW  7   ;DPB_DIRPS
011FA9 E612 2C                      DB  02CH    ;DPB_DEVICE
011FAA E613 00                      DB  0   ;DPB_UNITNO
011FAB E614 0A00                    DW  10  ;DPB_ADDCL
011FAD E616 0000                    DW  0   ;DPB_16
011FAF E618 0000                    DW  0   ;DPB_18
011FB1 E61A 0000                    DW  0   ;DPB_SDIR
011FB3 E61C 524F4D30                DB  "ROM0"  ;DPB_NAME
                                
                                ;   B:
                                
011FB7 E620 0300                    DW  3   ;DPB_FATLN
011FB9 E622 EBE4                    DW  _FDRD   ;DPB_DRD
011FBB E624 EEE4                    DW  _FDWT   ;DPB_DWT
011FBD E626 F9                      DB  0F9H    ;DPB_FATID
011FBE E627 03                      DB  3   ;DPB_SECPCL
011FBF E628 CB02                    DW  715 ;DPB_MAXCL
011FC1 E62A 00                      DB  0   ;DPB_FDMODE
011FC2 E62B 07                      DB  7   ;DPB_DIRSCNT
011FC3 E62C 2E                      DB  46  ;DPB_MAXCYL ROMディスクではBPPが格納されている先頭BANK
011FC4 E62D 00                      DB  0   ;DPB_MAXSEC
011FC5 E62E 01                      DB  1   ;DPB_FATPS
011FC6 E62F 82                      DB  082H    ;DPB_BPS
011FC7 E630 0700                    DW  7   ;DPB_DIRPS
011FC9 E632 2C                      DB  02CH    ;DPB_DEVICE
011FCA E633 01                      DB  1   ;DPB_UNITNO
011FCB E634 0A00                    DW  10  ;DPB_ADDCL
011FCD E636 0000                    DW  0   ;DPB_16
011FCF E638 0000                    DW  0   ;DPB_18
011FD1 E63A 0000                    DW  0   ;DPB_SDIR
011FD3 E63C 524F4D31                DB  "ROM1"  ;DPB_NAME
                                
                                ;   C:
                                
011FD7 E640                         DS  32
                                
                                ;   D:
                                
011FF7 E660                         DS  32
                                
                                ;   E:
                                
012017 E680 0300                    DW  3   ;DPB_FATLN
012019 E682 71E2                    DW  PDRD    ;DPB_DRD
01201B E684 46E2                    DW  PDWT    ;DPB_DWT
01201D E686 F9                      DB  0F9H    ;DPB_FATID
01201E E687 03                      DB  3   ;DPB_SECPCL
01201F E688 CB02                    DW  715 ;DPB_MAXCL
012021 E68A FF                      DB  0FFH    ;DPB_FDMODE
012022 E68B 07                      DB  7   ;DPB_DIRSCNT
012023 E68C 50                      DB  80  ;DPB_MAXCYL ROMディスクではBPPが格納されている先頭BANK
012024 E68D 09                      DB  9   ;DPB_MAXSEC
012025 E68E 01                      DB  1   ;DPB_FATPS
012026 E68F 82                      DB  082H    ;DPB_BPS
012027 E690 0700                    DW  7   ;DPB_DIRPS
012029 E692 2C                      DB  02CH    ;DPB_DEVICE
01202A E693 00                      DB  0   ;DPB_UNITNO
01202B E694 0A00                    DW  10  ;DPB_ADDCL
01202D E696 0000                    DW  0   ;DPB_16
01202F E698 0000                    DW  0   ;DPB_18
012031 E69A 0000                    DW  0   ;DPB_SDIR
012033 E69C 44534B30                DB  "DSK0"  ;DPB_NAME
                                
                                ;   F:
                                
012037 E6A0 0300                    DW  3   ;DPB_FATLN
012039 E6A2 71E2                    DW  PDRD    ;DPB_DRD
01203B E6A4 46E2                    DW  PDWT    ;DPB_DWT
01203D E6A6 F9                      DB  0F9H    ;DPB_FATID
01203E E6A7 03                      DB  3   ;DPB_SECPCL
01203F E6A8 CB02                    DW  715 ;DPB_MAXCL
012041 E6AA FF                      DB  0FFH    ;DPB_FDMODE
012042 E6AB 07                      DB  7   ;DPB_DIRSCNT
012043 E6AC 50                      DB  80  ;DPB_MAXCYL ROMディスクではBPPが格納されている先頭BANK
012044 E6AD 09                      DB  9   ;DPB_MAXSEC
012045 E6AE 01                      DB  1   ;DPB_FATPS
012046 E6AF 82                      DB  082H    ;DPB_BPS
012047 E6B0 0700                    DW  7   ;DPB_DIRPS
012049 E6B2 2C                      DB  02CH    ;DPB_DEVICE
01204A E6B3 01                      DB  1   ;DPB_UNITNO
01204B E6B4 0A00                    DW  10  ;DPB_ADDCL
01204D E6B6 0000                    DW  0   ;DPB_16
01204F E6B8 0000                    DW  0   ;DPB_18
012051 E6BA 0000                    DW  0   ;DPB_SDIR
012053 E6BC 44534B31                DB  "DSK1"  ;DPB_NAME
                                
                                ;   G:
                                
012057 E6C0 0300                    DW  3   ;DPB_FATLN
012059 E6C2 71E2                    DW  PDRD    ;DPB_DRD
01205B E6C4 46E2                    DW  PDWT    ;DPB_DWT
01205D E6C6 F9                      DB  0F9H    ;DPB_FATID
01205E E6C7 03                      DB  3   ;DPB_SECPCL
01205F E6C8 CB02                    DW  715 ;DPB_MAXCL
012061 E6CA FF                      DB  0FFH    ;DPB_FDMODE
012062 E6CB 07                      DB  7   ;DPB_DIRSCNT
012063 E6CC 50                      DB  80  ;DPB_MAXCYL ROMディスクではBPPが格納されている先頭BANK
012064 E6CD 09                      DB  9   ;DPB_MAXSEC
012065 E6CE 01                      DB  1   ;DPB_FATPS
012066 E6CF 82                      DB  082H    ;DPB_BPS
012067 E6D0 0700                    DW  7   ;DPB_DIRPS
012069 E6D2 2C                      DB  02CH    ;DPB_DEVICE
01206A E6D3 02                      DB  2   ;DPB_UNITNO
01206B E6D4 0A00                    DW  10  ;DPB_ADDCL
01206D E6D6 0000                    DW  0   ;DPB_16
01206F E6D8 0000                    DW  0   ;DPB_18
012071 E6DA 0000                    DW  0   ;DPB_SDIR
012073 E6DC 44534B32                DB  "DSK2"  ;DPB_NAME
                                
                                ;   H:
012077 E6E0 0300                    DW  3   ;DPB_FATLN
012079 E6E2 71E2                    DW  PDRD    ;DPB_DRD
01207B E6E4 46E2                    DW  PDWT    ;DPB_DWT
01207D E6E6 F9                      DB  0F9H    ;DPB_FATID
01207E E6E7 03                      DB  3   ;DPB_SECPCL
01207F E6E8 CB02                    DW  715 ;DPB_MAXCL
012081 E6EA FF                      DB  0FFH    ;DPB_FDMODE
012082 E6EB 07                      DB  7   ;DPB_DIRSCNT
012083 E6EC 50                      DB  80  ;DPB_MAXCYL ROMディスクではBPPが格納されている先頭BANK
012084 E6ED 09                      DB  9   ;DPB_MAXSEC
012085 E6EE 01                      DB  1   ;DPB_FATPS
012086 E6EF 82                      DB  082H    ;DPB_BPS
012087 E6F0 0700                    DW  7   ;DPB_DIRPS
012089 E6F2 2C                      DB  02CH    ;DPB_DEVICE
01208A E6F3 07                      DB  7   ;DPB_UNITNO
01208B E6F4 0A00                    DW  10  ;DPB_ADDCL
01208D E6F6 0000                    DW  0   ;DPB_16
01208F E6F8 0000                    DW  0   ;DPB_18
012091 E6FA 0000                    DW  0   ;DPB_SDIR
012093 E6FC 44534B37                DB  "DSK7"  ;DPB_NAME
       E700                     MSX_E:
[EOF:MSXDPB.ASM:UTF_8]
                                
012097 E700                         DS  03FFFH - $$
013FFF 0668 00                      DB  0
       0669                     LAST_ADR:
                                
                                    END
[EOF:MSX.ASM:UTF_8]
