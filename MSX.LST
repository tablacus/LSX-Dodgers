                                ;*** AILZ80ASM *** Z-80 Assembler, version 1.0.0.0, LST:Full:4
                                ;   LSX-Dodgers for MSX
                                ;   Programmed by
                                ;   Gaku (Lovers/Tablacus)
                                
                                    INCLUDE "MSXDEF.ASM"
                                
                                ;   LSX-Dodgers DEF
                                ;   MSX
                                
       0003                     MAC EQU 3   ;MSX
       0001                     DEV EQU 1
                                
       001D                     VER_6F  EQU 0001DH
                                
       4000                     RUN EQU 04000H
                                
       C700                     START2  EQU 0C700H
       C906                     BDOS    EQU 0C906H
       E400                     WORKAD  EQU 0E400H
       E700                     FATBF   EQU 0E700H
       EF00                     DTBUF   EQU 0EF00H
       0028                     WIDTH   EQU 40
       0019                     LINE    EQU 25
       0000                     COLORF  EQU 0
       0000                     KEYSP_H EQU 0
       0000                     KEYSP_L EQU 0
       0008                     COMS    EQU 8
                                
       000C                     _RDSLT  EQU 0000CH
       0014                     _WRSLT  EQU 00014H
       001C                     _CALSLT EQU 0001CH
       0024                     _ENASLT EQU 00024H
       0030                     _CALLF  EQU 00030H
                                
       004A                     RDVRM   EQU 0004AH
       004D                     WRTVRM  EQU 0004DH
       006C                     INITXT  EQU 0006CH
       0078                     SETTXT  EQU 00078H
       009C                     CHSNS   EQU 0009CH
       009F                     CHGET   EQU 0009FH
       00A2                     CHPUT   EQU 000A2H
       00AE                     PINLIN  EQU 000AEH
       00B1                     INLIN   EQU 000B1H
       00B4                     QINLIN  EQU 000B4H
       00B7                     BREAKX  EQU 000B7H
       00C0                     BEEP    EQU 000C0H
       00C6                     POSIT   EQU 000C6H
       0138                     RSLREG  EQU 00138H
       0144                     PHYDIO  EQU 00144H  ;MAIN:BIOS:
       0156                     KILBUF  EQU 00156H
                                
       FEDA                     H_STKE  EQU 0FEDAH
       FFA7                     H_PHYD  EQU 0FFA7H
                                
                                            ;ASCII-8K
       6000                     BANK0_SEL EQU 06000H
       6800                     BANK1_SEL EQU 06800H
       7000                     BANK2_SEL EQU 07000H
       7800                     BANK3_SEL EQU 07800H
                                            ;ASCII-16K
                                ;BANK0_SEL EQU 06000H
                                ;BANK1_SEL EQU 07000H
                                            ;KONAMI-8K
       8000                     KONAMI_BANK2_SEL EQU 08000H
       A000                     KONAMI_BANK3_SEL EQU 0A000H
[EOF:MSXDEF.ASM:UTF_8]
                                    INCLUDE "LDDEF.ASM"
                                
                                ;   LSX-Dodgers DEF
                                
       0001                     VER_1   EQU 1
       0005                     VER_2   EQU 5
       0009                     VER_3   EQU 9
       1D03                     MACW    EQU MAC + 01D00H    ;機種フラグとLD判別フラグ
       0103                     MACD    EQU MAC + DEV * 256 ;機種フラグとデバイスフラグ
       0159                     VER EQU VER_1 * 256 + VER_2 * 16 + VER_3
                                
       0005                     SYSTEM  EQU 00005H
       000F                     JP_HL   EQU 0000FH
       005C                     FCB1    EQU 0005CH
       006C                     FCB2    EQU 0006CH
       005D                     FCB1FN  EQU FCB1+1
       006D                     FCB2FN  EQU FCB2+1
       0080                     DTA1    EQU 00080H
                                
       FFCA                     EXTBIO  EQU 0FFCAH
                                
       0000                     DPB_FATLN   EQU 00H
       0002                     DPB_DRD     EQU 02H
       0004                     DPB_DWT     EQU 04H
       0006                     DPB_FATID   EQU 06H
       0007                     DPB_SECPCL  EQU 07H
       0008                     DPB_MAXCL   EQU 08H
       000A                     DPB_FDMODE  EQU 0AH
       000B                     DPB_DIRSCNT EQU 0BH
       000C                     DPB_MAXCYL  EQU 0CH
       000D                     DPB_MAXSEC  EQU 0DH
       000E                     DPB_FATPS   EQU 0EH
       000F                     DPB_BPS     EQU 0FH
       0010                     DPB_DIRPS   EQU 10H
       0012                     DPB_DEVICE  EQU 12H
       0013                     DPB_UNITNO  EQU 13H
       0014                     DPB_ADDCL   EQU 14H
                                
       001A                     DPB_SDIR    EQU 1AH
       001C                     DPB_NAME    EQU 1CH
                                
[EOF:LDDEF.ASM:SHIFT_JIS]
                                    INCLUDE "msx_cbios\\hardware.asm"
                                ; C-BIOS hardware related declarations
                                ;
                                ; Copyright (c) 2002-2005 BouKiCHi.  All rights reserved.
                                ; Copyright (c) 2003 Reikan.  All rights reserved.
                                ; Copyright (c) 2004-2005 Maarten ter Huurne.  All rights reserved.
                                ; Copyright (c) 2004 Manuel Bilderbeek.  All rights reserved.
                                ; Copyright (c) 2004-2006 Albert Beevendorp.  All rights reserved.
                                ; Copyright (c) 2004-2005 Joost Yervante Damad.  All rights reserved.
                                ;
                                ; Redistribution and use in source and binary forms, with or without
                                ; modification, are permitted provided that the following conditions
                                ; are met:
                                ; 1. Redistributions of source code must retain the above copyright
                                ;    notice, this list of conditions and the following disclaimer.
                                ; 2. Redistributions in binary form must reproduce the above copyright
                                ;    notice, this list of conditions and the following disclaimer in the
                                ;    documentation and/or other materials provided with the distribution.
                                ;
                                ; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
                                ; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
                                ; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                                ; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
                                ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                                ; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
                                ; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
                                ; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
                                ; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
                                ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                                ;
                                
                                ;---------------------------------------------------
                                ; I/O ports
                                
       002E                     DBG_CTRL:       equ     $2E             ; openMSX debugdevice control (mode)
       002F                     DBG_DATA:       equ     $2F             ; openMSX debugdevice data
                                
       0090                     PRN_STAT:       equ     $90             ; printer status
       0091                     PRN_DATA:       equ     $91             ; printer data
                                
       0098                     VDP_DATA:       equ     $98             ; VDP data port (VRAM read/write)
       0099                     VDP_ADDR:       equ     $99             ; VDP address (write only)
       0099                     VDP_STAT:       equ     $99             ; VDP status (read only)
       009A                     VDP_PALT:       equ     $9A             ; VDP palette latch (write only)
       009B                     VDP_REGS:       equ     $9B             ; VDP register access (write only)
                                
       00A0                     PSG_REGS:       equ     $A0             ; PSG register write port
       00A1                     PSG_DATA:       equ     $A1             ; PSG value write port
       00A2                     PSG_STAT:       equ     $A2             ; PSG value read port
                                
       00A8                     PSL_STAT:       equ     $A8             ; slot status
       00A9                     KBD_STAT:       equ     $A9             ; keyboard status
       00AA                     GIO_REGS:       equ     $AA             ; General IO Register
       00AB                     PPI_REGS:       equ     $AB             ; PPI register
                                
       00B4                     RTC_ADDR:       equ     $B4             ; RTC address
       00B5                     RTC_DATA:       equ     $B5             ; RTC data
                                
       00F4                     SYSFLAGS:       equ     $F4             ; MSX2+ System flags,
                                                                        ; preserved after reset
                                                                        ; bit 5: CPU boot mode (1=R800)
                                                                        ; bit 7: Boot method
                                                                        ;        (1=soft boot, no logo)
                                
       00FC                     MAP_REG1:       equ     $FC             ; memory mapper: bank in $0000-$3FFF
       00FD                     MAP_REG2:       equ     $FD             ; memory mapper: bank in $4000-$7FFF
       00FE                     MAP_REG3:       equ     $FE             ; memory mapper: bank in $8000-$BFFF
       00FF                     MAP_REG4:       equ     $FF             ; memory mapper: bank in $C000-$FFFF
                                
                                ;---------------------------------------------------
                                ; memory mapped I/O
                                
       FFFF                     SSL_REGS:       equ     $FFFF           ; secondary slot select registers
                                
                                ;---------------------------------------------------
                                ; Constants used to define which hardware the BIOS will run on.
                                ; Used by the main_<model>.asm sources.
                                
                                ; VDP models:
       9918                     TMS99X8:        equ     $9918
       9938                     V9938:          equ     $9938
       9958                     V9958:          equ     $9958
                                
                                ; MSX models:
       0000                     MODEL_MSX1:     equ     0
       0001                     MODEL_MSX2:     equ     1
       0002                     MODEL_MSX2P:    equ     2
       0003                     MODEL_MSXTR:    equ     3
                                
       0004                     MODEL_SUBROM:   equ     4
                                
                                ; Locales:
                                ; -- ID byte 0
       0000                     LOCAL_CHSET_JP  equ     $00
       0001                     LOCAL_CHSET_US  equ     $01
       0002                     LOCAL_CHSET_KO  equ     $02
                                
                                ; There are charsets which pretend to be INT, but are not... For now only BR:
       0000                     LOCAL_CHSET_VAR_NONE equ  $00
       0001                     LOCAL_CHSET_VAR_BR   equ  $01
                                
       0000                     LOCAL_DATE_YMD  equ     $00
       0010                     LOCAL_DATE_MDY  equ     $10
       0020                     LOCAL_DATE_DMY  equ     $20
                                
       0000                     LOCAL_INT_60HZ  equ     $00
       0080                     LOCAL_INT_50HZ  equ     $80
                                
                                ; -- ID byte 1
       0000                     LOCAL_KBD_JP    equ     $00
       0001                     LOCAL_KBD_US    equ     $01
       0002                     LOCAL_KBD_FR    equ     $02
       0003                     LOCAL_KBD_UK    equ     $03
       0004                     LOCAL_KBD_DE    equ     $04
                                
       0000                     LOCAL_BASIC_JP  equ     $00
       0001                     LOCAL_BASIC_US  equ     $01
                                
                                
                                ; BOOLEAN VALUES
       0001                     YES:            equ     1
       0000                     NO:             equ     0
                                
                                ; vim:ts=8:expandtab:filetype=z8a:syntax=z8a:
[EOF:hardware.asm:UTF_8]
                                    INCLUDE "msx_cbios\\systemvars.asm"
                                ;
                                ; C-BIOS system variable declarations
                                ;
                                ; Copyright (c) 2002-2003 BouKiCHi.  All rights reserved.
                                ; Copyright (c) 2003 Reikan.  All rights reserved.
                                ; Copyright (c) 2004-2005 Maarten ter Huurne.  All rights reserved.
                                ; Copyright (c) 2004 Manuel Bilderbeek.  All rights reserved.
                                ; Copyright (c) 2004-2006 Joost Yervante Damad.  All rights reserved.
                                ; Copyright (c) 2004-2005 Albert Beevendorp.  All rights reserved.
                                ; Copyright (c) 2005 Jussi Pitkänen.  All rights reserved.
                                ;
                                ; Redistribution and use in source and binary forms, with or without
                                ; modification, are permitted provided that the following conditions
                                ; are met:
                                ; 1. Redistributions of source code must retain the above copyright
                                ;    notice, this list of conditions and the following disclaimer.
                                ; 2. Redistributions in binary form must reproduce the above copyright
                                ;    notice, this list of conditions and the following disclaimer in the
                                ;    documentation and/or other materials provided with the distribution.
                                ;
                                ; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
                                ; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
                                ; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                                ; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
                                ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                                ; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
                                ; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
                                ; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
                                ; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
                                ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                                ;
                                
                                
                                ;-------------------
                                ; help function area
                                ;-------------------
                                ; Note: Functions defined in "main.asm" are disabled here.
                                
                                ; F380-F384: interslot read
                                ;RDPRIM:         equ     $F380
                                
                                ; F385-F38B: interslot read
                                ;WRPRIM:         equ     $F385
                                
                                ; F38C-F399: interslot call
                                ;CLPRIM:         equ     $F38C
                                
                                ; F39A-F3AD: workarea for the DEF USR statement
                                ; this area is initialized with the 10 times the value $475A, which gives
                                ; the error 'Syntax Error'
       F39A                     USRTAB:         equ     $F39A
                                
                                ;----------------------
                                ; screen parameter area
                                ;----------------------
                                
                                ; F3AE: # of positions on a line in SCREEN 0 (ini:39)
       F3AE                     LINL40:         equ     $F3AE
                                
                                ; F3AF: # of positions on a line in SCREEN 1 (ini:29)
       F3AF                     LINL32:         equ     $F3AF
                                
                                ; F3B0: # of actually used positions in the current screenmodus (ini:39)
       F3B0                     LINLEN:         equ     $F3B0
                                
                                ; F3B1: # of used lines on screen (ini:24)
       F3B1                     CRTCNT:         equ     $F3B1
                                
                                ; F3B2: # of positions within a tabulator-column (ini:14)
       F3B2                     CLMLST:         equ     $F3B2
                                
                                ; F3B3-F3B4: BASE(0): name table address for SCREEN 0 (ini:$0000)
                                ; used to initialize NAMBAS when SCREEN 0 is activated
       F3B3                     TXTNAM:         equ     $F3B3
                                
                                ; F3B5-F3B6: BASE(1): color table address for SCREEN 0, unused? (ini:$0000)
       F3B5                     TXTCOL:         equ     $F3B5
                                
                                ; F3B7-F3B8: BASE(2): pattern table address for SCREEN 0 (ini:$0800)
                                ; used to initialize CGPBAS when SCREEN 0 is activated
       F3B7                     TXTCGP:         equ     $F3B7
                                
                                ; F3B9-F3BA: BASE(3): sprite attribute table address for SCREEN 0, unused (ini:$0000)
                                ; used to initialize ATRBAS when SCREEN 0 is activated
       F3B9                     TXTATR:         equ     $F3B9
                                
                                ; F3BB-F3BC: BASE(4): sprite pattern table address for SCREEN 0, unused (ini:$0000)
                                ; used to initialize PATBAS when SCREEN 0 is activated
       F3BB                     TXTPAT:         equ     $F3BB
                                
                                ; F3BD-F3BE: BASE(5): nametable address for SCREEN 1 (ini:$1800)
                                ; used to initialize NAMBAS when SCREEN 1 is activated
       F3BD                     T32NAM:         equ     $F3BD
                                
                                ; F3BF-F3C0: BASE(6): color table address for SCREEN 1 (ini:$2000)
       F3BF                     T32COL:         equ     $F3BF
                                
                                ; F3C1-F3C2: BASE(7): pattern table address for SCREEN 1 (ini:$0000)
                                ; used to initialize CGPBAS when SCREEN 1 is activated
       F3C1                     T32CGP:         equ     $F3C1
                                
                                ; F3C3-F3C4: BASE(8): sprite attribute table address for SCREEN 1 (ini:$1B00)
                                ; used to initialize ATRBAS when SCREEN 1 is activated
       F3C3                     T32ATR:         equ     $F3C3
                                
                                ; F3C5-F3C6: BASE(9): sprite pattern table address for SCREEN 1 (ini:$0800)
                                ; used to initialize PATBAS when SCREEN 1 is activated
       F3C5                     T32PAT:         equ     $F3C5
                                
                                ; F3C7-F3C8: BASE(10): name table address for SCREEN 2 (ini:$1800)
                                ; used to initialize NAMBAS when SCREEN 2 is activated
       F3C7                     GRPNAM:         equ     $F3C7
                                
                                ; F3C9-F3CA: BASE(11): color table address for SCREEN 2 (ini:$2000)
       F3C9                     GRPCOL:         equ     $F3C9           ; Screen2 Color
                                
                                ; F3CB-F3CC: BASE(12): pattern table address for SCREEN 2 (ini:$0000)
                                ; used to initialize CGPBAS when SCREEN 2 is activated
       F3CB                     GRPCGP:         equ     $F3CB
                                
                                ; F3CD-F3CE: BASE(13): sprite attribute table address for SCREEN 2 (ini:$1B00)
                                ; used to initialize ATRBAS when SCREEN 2 is activated
       F3CD                     GRPATR:         equ     $F3CD
                                
                                ; F3CF-F3D0: BASE(14): sprite pattern table address for SCREEN 2 (ini:$3800)
                                ; used to initialize PATBAS when SCREEN 2 is activated
       F3CF                     GRPPAT:         equ     $F3CF
                                
                                ; F3D1-F3D2: BASE(15): name table address for SCREEN 3 (ini:$0800)
                                ; used to initialize NAMBAS when SCREEN 3 is activated
       F3D1                     MLTNAM:         equ     $F3D1
                                
                                ; F3D3-F3D4: BASE(16): color table address for SCREEN 3 (ini:$0000)
                                ; the color table is unused in SCREEN 3
       F3D3                     MLTCOL:         equ     $F3D3
                                
                                ; F3D5-F3D6: BASE(17): pattern table address for SCREEN 3 (ini:$0000)
                                ; used to initialize CGPBAS when SCREEN 3 is activated
       F3D5                     MLTCGP:         equ     $F3D5
                                
                                ; F3D7-F3D8: BASE(18): sprite attribute table address for SCREEN 3 (ini:$1B00)
                                ; used to initialize ATRBAS when SCREEN 3 is activated
       F3D7                     MLTATR:         equ     $F3D7
                                
                                ; F3D9-F3DA: BASE(19): sprite pattern table address for SCREEN 3 (ini:$3800)
                                ; used to initialize PATBAS when SCREEN 3 is activated
       F3D9                     MLTPAT:         equ     $F3D9
                                
                                ; F3DB: keyclick when a key is pressed: 0: no, 1: yes (ini: 1)
                                ; SCREEN ,,n will write to this address
       F3DB                     CLIKSW:         equ     $F3DB
                                
                                ; F3DC: line where the cursor is located
                                ; starts to count at 1 for the topmost line
       F3DC                     CSRY:           equ     $F3DC
                                
                                ; F3DD: column where the cursor is located
                                ; starts to count at 1 for the leftmost column
       F3DD                     CSRX:           equ     $F3DD
                                
                                ; F3DE: function key definition shown: 0: no, -1: yes
                                ; Note: MSX BIOS will mess up end-of-screen if this variable contains
                                ;       something other than $00 or $FF.
       F3DE                     CNSDFG:         equ     $F3DE
                                
                                ; F3DF-D3E6: storage for the last written value towards VDP registers 0 till 7
                                ; this is needed because these registers are write only
       F3DF                     RG0SAV:         equ     $F3DF
       F3E0                     RG1SAV:         equ     $F3E0
       F3E1                     RG2SAV:         equ     $F3E1
       F3E2                     RG3SAV:         equ     $F3E2
       F3E3                     RG4SAV:         equ     $F3E3
       F3E4                     RG5SAV:         equ     $F3E4
       F3E5                     RG6SAV:         equ     $F3E5
       F3E6                     RG7SAV:         equ     $F3E6
                                ; F3E7: last read value of VDP register 8
       F3E7                     STATFL:         equ     $F3E7
                                
                                ; F3E8: information about the joystick and space bar
                                ; 7 6 5 4 3 2 1 0
                                ; | | | |       +-- Space bar, trig(0) (0 = pressed)
                                ; | | | +---------- Stick 1, Trigger 1 (0 = pressed)
                                ; | | +------------ Stick 1, Trigger 2 (0 = pressed)
                                ; | +-------------- Stick 2, Trigger 1 (0 = pressed)
                                ; +---------------- Stick 2, Trigger 2 (0 = pressed)
       F3E8                     TRGFLG:         equ     $F3E8
                                
                                ; F3E9: code for the standard foreground color (ini:15)
       F3E9                     FORCLR:         equ     $F3E9
                                
                                ; F3EA: code for the standard background color (ini:4)
       F3EA                     BAKCLR:         equ     $F3EA
                                
                                ; F3EB: code for the standard border color (ini:7)
       F3EB                     BDRCLR:         equ     $F3EB
                                
                                ; F3EC-F3EE: Jump instruction used by Basic LINE command.
                                ; The routines used are: RIGHTC, LEFTC, UPC and DOWNC
       F3EC                     MAXUPD:         equ     $F3EC
                                
                                ; F3EF-F3F1: Jump instruction used by Basic LINE command.
                                ; The routines used are: RIGHTC, LEFTC, UPC and DOWNC
       F3EF                     MINUPD:         equ     $F3EF
                                
                                ; F3F2: working color, as used for graphical operations
                                ; normally equals to the foreground color (ini:15)
       F3F2                     ATRBYT:         equ     $F3F2
                                
                                ; F3F3-F3F4: starting value of the address of the queue-table
                                ; the queue-table contains 4 queue's: 3 for sound and one for RS232
                                ; (ini: QUETAB ($F959))
       F3F3                     QUEUES:         equ     $F3F3
                                
                                ; F3F5: CLOAD flag =0 when CLOAD =255 when CLOAD?
       F3F5                     FRCNEW:         equ     $F3F5
                                
                                ; F3F6: VDP-interupt counter that counts from 3 to 0, when it reaches zero, the
                                ; keyboard matrix is scanned, and the counters is reset at 3
       F3F6                     SCNCNT:         equ     $F3F6
                                
                                ; F3F7: key repeat counter. Runs from 13 to 0, and is changed when SCNCNT is changed
                                ; if the key remained the same. If it reaches 0, keyrepetition starts. If another key
                                ; is pressed the value is reset at 13.
       F3F7                     REPCNT:         equ     $F3F7
                                
                                ; F3F8-F3F9: first free space in the inputbuffer of the keyboard
                                ; everytime a key is added to the inputbuffer, this address is incremented,
                                ; when it equals to GETPNT, the buffer is full
                                ; the buffer is located at KEYBUF
       F3F8                     PUTPNT:         equ     $F3F8
                                
                                ; F3FA-F3FB: address in inputbuffer of first character that is not yet read
                                ; everytime a key is read from the buffer it is incremented
                                ; the buffer is located at KEYBUF
       F3FA                     GETPNT:         equ     $F3FA
                                
                                ; F3FC-F400: memory area for tape system parameters for 1200 baud
                                ; F3FC: length of  low signal for 0     (ini:83)
                                ; F3FD: length of high signal for 0     (ini:92)
                                ; F3FE: length of  low signal for 1     (ini:38)
                                ; F3FF: length of high signal for 1     (ini:45)
                                ; F400: length of synchronization block (ini:15)
       F3FC                     CS120:          equ     $F3FC
                                
                                ; F401-F405: memory area for tape system parameters for 1200 baud
                                ; F401: length of  low signal for 0     (ini:37)
                                ; F402: length of high signal for 0     (ini:45)
                                ; F403: length of  low signal for 1     (ini:14)
                                ; F404: length of high signal for 1     (ini:22)
                                ; F405: length of synchronization block (ini:31)
       F401                     CS240:          equ     $F401
                                
                                ; F406-F407: lenghts of signal for 0 for the current speed of the tape system
                                ; either equal to the content of F3FC-F3FD or the content of F401-F402
                                ; (ini: 83, 92)
       F406                     LOW_:           equ     $F406 ; real name: LOW, but doesn't compile?
                                
                                ; F408-F409: lenghts of signal for 1 for the current speed of the tape system
                                ; either equal to the content of F3FE-F3FF or the content of F403-F404
                                ; (ini: 38, 45)
       F408                     HIGH_:          equ     $F408 ; real name: HIGH, but doesn't compile?
                                
                                ; F40A: lenghts of synchronization block for the current speed of the tape system
                                ; either equal to the content of F400 or the content of F405 (ini: 15)
       F40A                     HEADER:         equ     $F40A
                                
                                ; F40B-F40C: standard setting for the height/width aspect of the
                                ; BASIC statement CIRCLE; only the byte in F40B is actually used
                                ; If ASPECT2 is larger then 255, the value of F40B is the number of horizontal
                                ; dots per 256 verical dots of the radius (ini:$0100)
                                ; ! not verified :)
       F40B                     ASPCT1:         equ     $F40B
                                
                                ; F40D-F40E: standard setting for the height/width aspect of the
                                ; BASIC statement CIRCLE; If ASPCT2 is smaller then 512, then ASPCT2 is the
                                ; number of vertical dots per 256 horizontal dots of the radius (ini:$0100)
                                ; ! not verified :)
       F40D                     ASPCT2:         equ     $F40D
                                
                                ; F40F-F413: work area for the BASIC statement RESUME NEXT
                                ; contains a fake end of basic program
                                ; (ini: 58, 0, 0, 0, 0)
       F40F                     ENDPRG:         equ     $F40F
                                
                                ; F414: errornumber of last error that happened while executing a BASIC program
                                ; (ini:0)
       F414                     ERRFLG:         equ     $F414
                                
                                ; F415: number of characters in the writebuffer of the printer that still
                                ; need printing
       F415                     LPTPOS:         equ     $F415
                                
                                ; F416: switch indicating if output should be screen or printer
                                ; (think LIST vs LLIST) (ini:0) values: 0: screen, 1: printer
       F416                     PRTFLG:         equ     $F416
                                
                                ; F417: switch indicating if hooked up printer is an MSX printer or not
                                ; values: 0: MSX-Printer, 1: no MSX-Printer
                                ; if the printer is no MSX-Printer, non-ASCII (>=128) characters are replaced
                                ; by spaces before sending them to the printer (ini: 0)
       F417                     NTMSXP:         equ     $F417
                                
                                ; F418: switch indicating of printing routines should use raw-mode or
                                ; should convert:
                                ; =0 to convert tabs and unknown characters to spaces and remove graphical headers
                                ; =1 to send data just like it gets it (ini: 0)
                                ; if RAWPRT is 1, the value if NTMSXP is ignored
       F418                     RAWPRT:         equ     $F418
                                
                                ; ---------------------------
                                ; basic interpreter work area
                                ; ---------------------------
                                
                                ; F419-F41A: work area for the BASIC command VAL: contains address of character that
                                ; has temporarely been replaced by O by VAL
       F419                     VLZADR:         equ     $F419
                                
                                ; F41B: work area for the BASIC command VAL: contains the character originally at
                                ; the location of VLZADR
       F41B                     VLZDAT:         equ     $F41B
                                
                                ; F41C-F41D: line number of current BASIC line being executed, in direct modus this
                                ; contains $FFFF (ini:$FFFF)
       F41C                     CURLIN:         equ     $F41C
                                
                                ; F41E: error detection prefix for KBUF, always contains ":"
                                ; originally undocumented :)
       F41E                     KBFMIN:         equ     $F41E
                                
                                ; F41F-F55C: workarea for coding basic rules that have been typed in direct modus
                                ; this are contains the code for the line interpreted in direct modus
       F41F                     KBUF:           equ     $F41F
                                
                                ; F55D: byte used as first byte of BUF for input statements, giving them always
                                ; an extra ',' (ini:44 == ',')
       F55D                     BUFMIN:         equ     $F55D
                                
                                ; F55E-F65F: used in direct modus to store the ASCII codes of the line, or simulary
                                ; for INPUT or LINE INPUT BASIC statements
       F55E                     BUF:            equ     $F55E
                                
                                ; F562-F570: used by bitblit routines to store the register data
       F562                     SX:             equ     $F562
       F564                     SY:             equ     $F564
       F566                     DX:             equ     $F566
       F568                     DY:             equ     $F568
       F56A                     NX:             equ     $F56A
       F56C                     NY:             equ     $F56C
       F56E                     CDUMMY:         equ     $F56E
       F56F                     ARG_:           equ     $F56F
       F570                     L_OP:           equ     $F570
                                
                                ; F660: last usable byte of BUF
       F660                     ENDBUF:         equ     $F660
                                
                                ; F661: number of column of last written character on the screen
       F661                     TTYPOS:         equ     $F661
                                
                                ; F662: switch indicating during variable lookup for arrays, if this has not already
                                ; been done for a DIM BASIC statement
       F662                     DIMFLG:         equ     $F662
                                
                                ; F663: workarea for evaluation of expressions; contains type of last evaluated
                                ; expression; the value of the expression is in DAC, possible values of VALTYP:
                                ; 2: integer
                                ; 3: string
                                ; 4: normal real
                                ; 8: double real
       F663                     VALTYP:         equ     $F663
                                
                                ; F664: workarea for coding of BASIC statements. switch indicating if keywords have
                                ; to be encoded or not. E.g. in DATA fields they should not be encoded
                                ; 0: encoding on, 1: encoding off
       F664                     DORES:          equ     $F664
                                
                                ; F665: workarea for coding of BASIC statements. swithc indication of numbers have to be
                                ; encoded; values: $0: encode as const, $1: encode as line number, $FF: do not encode
       F665                     DONUM:          equ     $F665
                                
                                ; F666-F667: work area for evaluation of expressions: contains address of first character
                                ; after the code of the last evaluated expression
       F666                     CONTXT:         equ     $F666
                                
                                ; F668: work area for evaluation of expressions: contains information byte about the
                                ; encoding of the last evaluated constant number; value of this constant is in CONLO
                                ; values:
                                ; $0B: octal (2 bytes)
                                ; $0C: hexadecimal (2 bytes)
                                ; $0F: decimal 0<=value<256 (1 byte)
                                ; $11-$1B: short encoding for 0->10
                                ; $1C: decimal (2bytes, 2s-compliment)
                                ; $26: $42 binary as ASCII
                                ; $0E: line number
                                ; $0D: line pointer
                                ; $1D: normal real (1 byte exp, 3 bytes BCD)
                                ; $1F: double real (1 byte exp, 7 bytes BCD)
       F668                     CONSAV:         equ     $F668
                                
                                ; F669: work area for evaluation of expressions: contains type of last evaluated number
                                ; constant; the value is in CONLO, for values of CONTYP, see VALTYP
                                ; Strings are never contant in BASIC!
       F669                     CONTYP:         equ     $F669
                                
                                ; F66A-F671: work area for evaluation of expressions: contains the value of the last
                                ; evaluated number contant; value starts at F66A, and takes bytes as needed for the type
       F66A                     CONLO:          equ     $F66A
                                
                                ; F672-F673: upper limit of memory area reserved for strings, contains the upper address
                                ; that is allowed to be used
       F672                     MEMSIZ:         equ     $F672
                                
                                ; F674-F675: top of stack; also first byte below string area
       F674                     STKTOP:         equ     $F674
                                
                                ; F676-F677: start address of current basic program, set at initialization, and
                                ; not changed by OS (ini:$8001)
       F676                     TXTTAB:         equ     $F676
                                
                                ; F678-F679: address of first unused string-descriptor in TEMPST
                                ; (ini:value of TEMPST)
       F678                     TEMPPT:         equ     $F678
                                
                                ; F67A-F697: work area for evaluation of string expressions; this area has space
                                ; for 10 string descriptors of 3 bytes; these can be used for temporarely results
                                ; of string arythmetics
       F67A                     TEMPST:         equ     $F67A
                                
                                ; F698-F69A: work area for evaluation of string expressions; this contains the
                                ; string descriptor of the intermediate result
       F698                     DSCTMP:         equ     $F698
                                
                                ; F69B-F69C: first address within the string memory area that is still free
                                ; the string area is filled backwards, soo the lower the value, the less space
                                ; remains (ini: value of MEMSIZ)
       F69B                     FRETOP:         equ     $F69B
                                
                                ; F69D-F69E: temporarely storage for adminstration of the basic interpreter
       F69D                     TEMP3:          equ     $F69D
                                
                                ; F69F-F6A0: temporarely storage for garbage collection
       F69F                     TEMP8:          equ     $F69F
                                
                                ; F6A1-F6A2: address of first byte in BASIC-code after last FOR statement
       F6A1                     ENDFOR:         equ     $F6A1
                                
                                ; F6A3-F6A4: line number of last used line of DATA statements
       F6A3                     DATLIN:         equ     $F6A3
                                
                                ; F6A5: switch indicating if a variable is allowed to be an array variable.
                                ; This is e.g. not allowed for the loop variable of a FOR statement
                                ; 0 = allowed, 1 = not allowed
       F6A5                     SUBFLG:         equ     $F6A5
                                
                                ; F6A6: switch indicating if currently a READ or INPUT statement is being executed
       F6A6                     FLKINP:         equ     $F6A6
                                
                                ; F6A7-F6A8: temporarely storage for adminstration of the basic interpreter
       F6A7                     TEMP:           equ     $F6A7
                                
                                ; F6A9: switch indicating if there are still linenumber constants in the BASIC code
                                ; that are encoded as pointers?
       F6A9                     PTRFLG:         equ     $F6A9
                                
                                ; F6AA: switch indication if currently an AUTO statement is active
                                ; 0 = no auto, 1 = auto
       F6AA                     AUTFLG:         equ     $F6AA
                                
                                ; F6AB-F6AC: last generated AUTO line number
       F6AB                     AUTLIN:         equ     $F6AB
                                
                                ; F6AD-F6AE: last used AUTO increment
       F6AD                     AUTINC:         equ     $F6AD
                                
                                ; F6AF-F6B0: work area of the error system; contains address of first byte
                                ; of statement currently being executed
       F6AF                     SAVTXT:         equ     $F6AF
                                
                                ; F6B1-F6B2: work area of the error system; contains address of the stack
                                ; before executing of the current statement started
       F6B1                     SAVSTK:         equ     $F6B1
                                
                                ; F6B3-F6B4: line number of last failed line
       F6B3                     ERRLIN:         equ     $F6B3
                                
                                ; F6B5-F6B6: line number of last used (changed, listed, added) line
       F6B5                     DOT:            equ     $F6B5
                                
                                ; F6B7-F5B8: work area of the error system; contains the address of the first
                                ; byte of the statement that last failed; on failure it is stored with the
                                ; content of SAVTXT
       F6B7                     ERRTXT:         equ     $F6B7
                                
                                ; F6B9-F6BA: work area of the error system; contains the line number where
                                ; execution should go to on error (as in basic: ON ERROR GOTO x)
       F6B9                     ONELIN:         equ     $F6B9
                                
                                ; F6BB-F6BC: work area of the error system; indication if the interpreter is
                                ; currently executing an error catch routine
                                ; 0 = no, FF = yes
       F6BB                     ONEFLG:         equ     $F6BB
                                
                                ; F6BC-F6BD: temporarely storage for the interpreter
       F6BC                     TEMP2:          equ     $F6BC
                                
                                ; F6BE-F6BF: line number of last program break, reset at 0 at any program change
       F6BE                     OLDLIN:         equ     $F6BE
                                
                                ; F6C0-F6C1: address of first statement that is not executed due to a break
       F6C0                     OLDTXT:         equ     $F6C0
                                
                                ; F6C2-F6C3: begin address of storage of basic variables and function descriptors;
                                ; possibly adjusted when program changes in size
       F6C2                     VARTAB:         equ     $F6C2
                                
                                ; F6C4-F6C5: begin address of array variables; possibly adjusted when program
                                ; changes size or more variables are allocated
       F6C4                     ARYTAB:         equ     $F6C4
                                
                                ; F6C6-F6C7: address of first free byte not used for storage of code or variables
                                ; (ini: $8003)
       F6C6                     STREND:         equ     $F6C6
                                
                                ; F6C8-F6C9: address where data needs to be searched at next READ statement
       F6C8                     DATPTR:         equ     $F6C8
                                
                                ; F6CA-F6E3: table with variable types, one for each letter in the alphabet
                                ; possible values:
                                ;       2 = integer     3 = string      4 = single      8 = double
       F6CA                     DEFTBL:         equ     $F6CA
                                
                                ; F6E4-F7B4: work area for execution of self defined functions
                                
                                ; F6E4-F6E5: contains address ; of previous parameter block on the stack;
                                ; needed for garbage collection
       F6E4                     PRMSTK:         equ     $F6E4
                                
                                ; F6E6-F6E7:  amount of valid bytes in PARM1
       F6E6                     PRMLEN:         equ     $F6E6
                                
                                ; F6E8-F74B: contains definitions of the variables in the parameter lists
                                ; of self defined functions
       F6E8                     PARM1:          equ     $F6E8
                                
                                ; F74C-F74D: previous value of PRMSTK
       F74C                     PRMDRV:         equ     $F74C
                                
                                ; F74E-F74F: number of valid bytes in PARM2
       F74E                     PRMLN2:         equ     $F74E
                                
                                ; F750-F7B3: area used for calculation of values that end up in PARM1
       F750                     PARM2:          equ     $F750
                                
                                ; F7B4: switch indicating of while searching a variable name PARM1 has
                                ; been looked at; 0 = no, 1 = yes
       F7B4                     PRMFLG:         equ     $F7B4
                                
                                ; F7B5-F7B6: address of first byte where it is no longer needed to search
                                ; for a variable name; it is equal to ARYTAB when the normal variable area
                                ; is searched, and equal to PARM1+PRMLEN when PARM1 is searched
       F7B5                     ARYTA2:         equ     $F7B5
                                
                                ; F7B7-F7B8: switch indicating iif PARM1 contains a valid parameter block
                                ; 0 = no, 1 = yes
       F7B7                     NOFUNS:         equ     $F7B7
                                
                                ; F7B8-F7B9: temporarely memory used while searching parameter blocks on
                                ; the stack
       F7B8                     TEMP9:          equ     $F7B8
                                
                                ; F7BA-F7BB: counter of the nesting-dept of the function being evaluated
       F7BA                     FUNACT:         equ     $F7BA
                                
                                ; F7BC-F7C3: work area when executing the SWAP statement; the first variable
                                ; is stored here
       F7BC                     SWPTMP:         equ     $F7BC
                                
                                ; F7C4: switch indicating if TRON is on; 0 = off, >0 = on
       F7C4                     TRCFLG:         equ     $F7C4
                                
                                ; F7C5-F7F4: workarea when executing numeric operators
       F7C5                     FBUFFR:         equ     $F7C5
       F7F0                     DECTMP:         equ     $F7F0
       F7F2                     DECTM2:         equ     $F7F2
       F7F4                     DECCNT:         equ     $F7F4
                                
                                ; F7F6-F805: workarea when executing numeric operators; intermediate
                                ; results are stored here; also used for parameter transfer when using
                                ; the USR functions; VALTYPE then contains the type, and the value is
                                ; stored like this:
                                ; typename  type  where
                                ; integer   2     F7F8-F7F9
                                ; string    3     F7F8-F7F9 (address descriptor)
                                ; single    4     F7F6-F7F9
                                ; double    8     F7F6-F7FD
       F7F6                     DAC:            equ     $F7F6
                                
                                ; F806-F856: workarea when executing numeric operators
       F806                     HOLD8:          equ     $F806
       F836                     HOLD2:          equ     $F836
       F83E                     HOLD:           equ     $F83E
       F847                     ARG:            equ     $F847
                                
                                ; F857-F85E: last calculated random double
       F857                     RNDX:           equ     $F857
                                
                                ; --------------------
                                ; filesystem work area
                                ; --------------------
                                
                                ; F85F: # of filedescriptors reserved minus 1
                                ; this is also the maximum number of open files possible
       F85F                     MAXFIL:         equ     $F85F
                                
                                ; F860-F861: start address of the file information table
       F860                     FILTAB:         equ     $F860
                                
                                ; F862-F863: start address of the first file-buffer
       F862                     NULBUF:         equ     $F862
                                
                                ; F864-F865: during file I/O the start address of the active file-buffer
       F864                     PTRFIL:         equ     $F864
                                
                                ; F866: flag indicating if the file that is being loaded have to be started
                                ; immediately; 0 = no, FF = yes
       F866                     RUNFLG:         equ     $F866
                                
                                ; note that RUNFLG and FILNAM overlap!
                                
                                ; F866-F870: filename of last file that has been active;
                                ; first 8 chars are name, last 3 are extension
       F866                     FILNAM:         equ     $F866
                                
                                ; F871-F87B: second filename if needed, e.g. the NAME command
       F871                     FILNM2:         equ     $F871
                                
                                ; F87C: switch indicating if currently a BASIC program is being loaded
                                ; 0 = no, 1 = yes
       F87C                     NLONLY:         equ     $F87C
                                
                                ; F87D-F87E: workarea for BLOAD and BSAVE; when a part of normal memory
                                ; is written, it contains the end address of the written memory region
                                ; if video memory is written it contains $4BE5 + start address of the
                                ; written memory region ??
       F87D                     SAVEND:         equ     $F87D
                                
                                ; F87F-F91E: storage area for the text of the function keys 10x16 bytes,
                                ; but strings need to be zero-terminated, soo maximum length of command is
                                ; 15 characters
       F87F                     FNKSTR:         equ     $F87F
                                
                                ; ------------------------
                                ; screen routine work area
                                ; ------------------------
                                
                                ; F91F-F921: start address of the standard ASCII pattern table
                                ; at every change towards a text mode it is copied in the pattern table
                                ; of the VDP
                                ;   F91F: slot indication (ini: 0)
                                ;   F920-F921: address (ini: 1BBF)
                                ; TODO: make CBIOS use this value instead of hardcoded value
       F91F                     CGPNT:          equ     $F91F
                                
                                ; F922-F923: start address of the nametable in the VRAM
       F922                     NAMBAS:         equ     $F922
                                
                                ; F924-F925: start address of the pattern table in the VRAM
       F924                     CGPBAS:         equ     $F924
                                
                                ; F926-F927: start address of the sprite pattern table in the VRAM
       F926                     PATBAS:         equ     $F926
                                
                                ; F928-F929: start address of the sprite location table in the VRAM
       F928                     ATRBAS:         equ     $F928
                                
                                ; F92A-F92B: address in VRAM of the pattern of the current position
                                ; on screen
       F92A                     CLOC:           equ     $F92A
                                
                                ; F92C: mask for CLOC selecting the right bits that correspond with
                                ; the current position
       F92C                     CMASK:          equ     $F92C
                                
                                ; F92D-F930: work area for graphical calculations
       F92D                     MINDEL:         equ     $F92D
       F92F                     MAXDEL:         equ     $F92F
                                
                                ; ----------------------------------------------
                                ; F931-F941: work area for calculation of CIRCLE
                                ; ----------------------------------------------
                                
                                ; F931-F932: ratio of # of dots in the horizontal and vertical direction
                                ; if = $0100 then ASPCT1 and ASPCT2 are used
                                ; if < $0100 then it is the # of dots in one direction for each
                                ; $0100 # of dots in the other direction; the direction is indicated
                                ; by CSCLXY
       F931                     ASPECT:         equ     $F931
                                
                                ; F933:F934: ; distance, in # of dots from the center of the most
                                ; distant point of the circle
       F933                     CENCNT:         equ     $F933
                                
                                ; F935: switch indication if the start and/or end point need to be
                                ; connected to the center
                                ;  bit 7: connect end point; 1 = yes
                                ;  bit 0: connect start point; 1 = yes
       F935                     CLINEF:         equ     $F935
                                
                                ; F936-F937: used during calculation of CIRCLE
       F936                     CNPNTS:         equ     $F936
                                
                                ; F938: direction of drawing of circle:
                                ;  00 = from CSTCNT towards CENCNT
                                ;  FF = from CENCNT towards CSTCNT
       F938                     CPLOTF:         equ     $F938
                                
                                ; F939-F93A: used during calculation of CIRCLE
       F939                     CPCNT:          equ     $F939
                                
                                ; F93B-F93C: ; contains the total # of dots of the full circle,
                                ; even when only a part is drawn
       F93B                     CPCNT8:         equ     $F93B
                                
                                ; F93D-F93E: used during calculation of CIRCLE
       F93D                     CRCSUM:         equ     $F93D
                                
                                ; F93F-F940: ; distance in dots from the center towards the closest
                                ; circle point
       F93F                     CSTCNT:         equ     $F93F
                                
                                ; F941: switch indicating if the X or Y direction needs to be streched:
                                ; 0 = X, 1 = Y
       F941                     CSCLXY:         equ     $F941
                                
                                ; F942-F943: store of CLOC, also used for PAINT
       F942                     CSAVEA:         equ     $F942
                                
                                ; F944: storage of CMASK; also used for PAINT
       F944                     CSAVEM:         equ     $F944
                                
                                ; F945-F946: horizontal distance towards the center
       F945                     CXOFF:          equ     $F945
                                
                                ; F947-F948: vertical distance towards the center
       F947                     CYOFF:          equ     $F947
                                
                                ; -------------------------------------------
                                ; work area for executing the PAINT statement
                                ; -------------------------------------------
                                
                                ; F949: leftmost position of protrusion towards the left
       F949                     LOHMSK:         equ     $F949
                                
                                ; F94A: new workdirection for protrusion towards the left
       F94A                     LOHDIR:         equ     $F94A
                                
                                ;F94B-F94C: leftmost position of protrusion towards the left
       F94B                     LOHADR:         equ     $F94B
                                
                                ; F94D: size of protrusion towards the left
       F94D                     LOHCNT:         equ     $F94D
                                
                                ; F94F-F950: # of pixels that may be skipped
       F94F                     SKPCNT:         equ     $F94F
                                
                                ; F951-F952: # of movements
       F951                     MOVCNT:         equ     $F951
                                
                                ; F953: current direction; $40 = \/, $C0 = /\, $00 = stop
       F953                     PDIREC:         equ     $F953
                                
                                ; F954: indicate if paint towards the left worked
       F954                     LFPROG:         equ     $F954
                                
                                ; F955: indicate of a paint towards the right worked
       F955                     RTPROG:         equ     $F955
                                
                                ; F956-F957: start address of a jumptable for subcommands
                                ; contained in a string variable, used for both PLAY and DRAW
                                ; where this systemvar points to either the PLAY or the DRAW
                                ; table
       F956                     MCLTAB:         equ     $F956
                                
                                ; F958: switch indication if MCLTAB is for PLAY or DRAW
                                ; $0 = DRAW, $FF = PLAY
       F958                     MCLFLG:         equ     $F958
                                
                                ; ------------------------------------------
                                ; work area for sound and queueing and RS232
                                ; ------------------------------------------
                                
                                ; F959-F971: Variables for three music queues and one RS232 queue
                                ; F959: VOICAQ put position
                                ; F95A: VOICAQ get position
                                ; F95B: VOICAQ putback flag
                                ; F95C: VOICAQ size
                                ; F95D: VOICAQ address
                                ; F95F-F964: VOICBQ
                                ; F965-F96A: VOICCQ
                                ; F96B-F970: RS2IQ
       F959                     QUETAB:         equ     $F959
                                
                                ; Putback characters for queues. TODO: what purpose do these have exactly?
       F971                     QUEBAK:         equ     $F971
                                
                                ; Buffers for queues.
       F975                     VOICAQ:         equ     $F975           ; Voice A queue
       F9F5                     VOICBQ:         equ     $F9F5           ; Voice B queue
       FA75                     VOICCQ:         equ     $FA75           ; Voice C queue
       FAF5                     RS2IQ:          equ     $FAF5           ; RS232   queue
                                
                                ; in MSX2 the content of RS2IQ is used differently:
       FAF5                     DPPAGE:         equ     $FAF5           ; Display page (SCR5+)
       FAF6                     ACPAGE:         equ     $FAF6           ; Active page (SCR5+)
                                
                                ; FAF7: AV control port value storage
       FAF7                     AVCSAV:         equ     $FAF7
                                
                                ; FAF8: extended BASIC ROM slot address
       FAF8                     EXBRSA:         equ     $FAF8
                                
                                ; FAF9: character count for ROMA-KANA
       FAF9                     CHRCNT:         equ     $FAF9
                                
                                ; FAFA-FAFB: character save for ROMA-KANA
       FAFA                     ROMA:           equ     $FAFA
                                
                                ; ROMA-KANA extension mode switch or VRAM size??
       FAFC                     MODE:           equ     $FAFC
                                ;Reserved       equ     $FAFD
                                
                                ; FAFE-FAFF: x position for mouse or lightpen
       FAFE                     XSAVE:          equ     $FAFE
                                
                                ; FB00-FB01: y position for mouse or lightpen
       FB00                     YSAVE:          equ     $FB00
       FB02                     LOGOPR:         equ     $FB02
                                ; FB21-FB28: Table which contains info for up to 4 disk ROMs, 2 bytes each:
                                ; - first byte: number of drives connected to this interface
                                ; - second byte: slot ID of the disk ROM
       FB21                     DRVINF:         equ     $FB21
                                ; end of MSX2 only usage of RS2IQ
                                
                                ; --------------------------------
                                ; work area for the PLAY statement
                                ; --------------------------------
                                
                                ; FB35: status about the parsing of a PLAY string
                                ;  bit 7: only one time parsed; 1 = yes
                                ;  bit 1-0: number of parsed strings (0-3)
       FB35                     PRSCNT:         equ     $FB35
                                
                                ; FB36-FB37: storage of stack
       FB36                     SAVSP:          equ     $FB36
                                
                                ; FB38: # of voice currently being parsed (0-2)
       FB38                     VOICEN:         equ     $FB38
                                
                                ; FB39-FB3A: storage of volume of a muted voice
       FB39                     SAVVOL:         equ     $FB39
                                
                                ; FB3B: size of string being parsed (also used by DRAW)
       FB3B                     MCLLEN:         equ     $FB3B
                                
                                ; FB3C-FB3D: address of string being parsed (also used by DRAW)
       FB3C                     MCLPTR:         equ     $FB3C
                                
                                ; FB3E: temporarely storage of active queue # (0-2)
       FB3E                     QUEUEN:         equ     $FB3E
                                
                                ; FB3F: flag indicating which queues are active
                                ; bit 2 = queue 2; 1 = active
                                ; bit 1 = queue 1; 1 = active
                                ; bit 0 = queue 0; 1 = active
       FB3F                     MUSICF:         equ     $FB3F
                                
                                ; FB40: count of the # of PLAY statements parsed, but not executed yet
       FB40                     PLYCNT:         equ     $FB40
                                
                                ; FB41-FB65: Voice Control Block for voice A (queue 0)
       FB41                     VCBA:           equ     $FB41
                                ; FB66-FB8A: Voice Control Block for voice B (queue 1)
       FB66                     VCBB:           equ     $FB66
                                ; FB8B-FBAF: Voice Control Block for voice C (queue 2)
       FB8B                     VCBC:           equ     $FB8B
                                
                                ; each VCB has the following structure:
                                
                                ; name                  offset  length  purpose
       0000                     METREX:         equ     0 ;     2       interrupt counter
       0002                     VCXLEN:         equ     2 ;     1       MCLLEN for voice
       0003                     VCXPTR:         equ     3 ;     2       MCLPTR for voice
       0005                     VCXSTP:         equ     5 ;     2       stack pointer
       0007                     QLENGX:         equ     7 ;     1       # bytes in queue
       0008                     NTICSX:         equ     8 ;     2       new counter ?
       000A                     TONPRX:         equ     10;     2       pitch
       000C                     AMPLTX:         equ     12;     1       amplitude
       000D                     ENVPRX:         equ     13;     2       envelope speed
       000F                     OCTAVX:         equ     15;     1       octave
       0010                     NOTELX:         equ     16;     1       tone length
       0011                     TEMPOX:         equ     17;     1       tempo
       0012                     VOLUMX:         equ     18;     1       volume
       0013                     ENVLPX:         equ     19;     1       envelope shape
       0021                     MCLSTX:         equ     33;             space for stack storage
       0024                     MCLSEX:         equ     36;             start of stack
                                ; the stack mentioned above is used to store bytevalues
                                ; that are readied to be put on the voice queue
                                
                                ; -----------------------------------------------
                                ; settings for screen editor and interrupt system
                                ; -----------------------------------------------
                                
                                ; FBB0: switch indicating if software reset is enabled
                                ; 0 = n, 1 = yes; can be used to reset BASIC by pressing
                                ; SHIFT-CODE-GRAPH; does not erase the existing program
                                ; (ini: 0)
       FBB0                     ENSTOP:         equ     $FBB0
                                
                                ; FBB1: switch indicating if the current BASIC program is in a ROM
                                ; 0 = no; 1 = yes
       FBB1                     BASROM:         equ     $FBB1
                                
                                ; FBB2-FBC9: table containing for each line if it continues on the
                                ; next line; 0 = yes, >0 = no
       FBB2                     LINTTB:         equ     $FBB2
                                
                                ; FBCA-FBCB storage of location of cursor for INLIN and QINLIN
                                ;  FBCA: CSRY , FBCB: CSRX
       FBCA                     FSTPOS:         equ     $FBCA
                                
                                ; ASCII code of the character currently covered by the cursor
                                ; TODO: is the name CURSAV or CODSAV ?
       FBCC                     CURSAV:         equ     $FBCC
                                
                                ; FBCD: switch indicating which function keys are to be displayed
                                ; on the screen; 0 = F6-F10, 1 = F1-F5
       FBCD                     FNKSWI:         equ     $FBCD
                                
                                ; FBCE-FBD7: for each function key, a flag indicating if it has
                                ; interrupt facility enabled; 0 = disabled, 1 = enabled
       FBCE                     FNKFLG:         equ     $FBCE
                                
                                ; FBD8: counter of # of interrupts that still have a pending ON .. GOSUB
       FBD8                     ONGSBF:         equ     $FBD8
                                
                                ; FBD9: flag indicating if a keyclick has already been generated, to avoid
                                ; keyclicks for a key that generates two ASCII codes
                                ; $00 = no click, $0F = click
       FBD9                     CLIKFL:         equ     $FBD9
                                
                                ; FBDA-FBE4: storage of keyboard matrix, used for detection key repetition
       FBDA                     OLDKEY:         equ     $FBDA
                                
                                ; FBE5-FBEF: current state of the keyboard matrix
       FBE5                     NEWKEY:         equ     $FBE5
                                
                                ; keyboard buffer; each char entered via the keyboard ends up here
       FBF0                     KEYBUF:         equ     $FBF0
                                ; LIMPNT: something about "key buffer pointer"
       FC17                     LIMPNT:         equ     $FC17
                                
                                ; FC18-FC3F: work area for processing the last typed line
       FC18                     LINWRK:         equ     $FC18
                                
                                ; FC40-FC47: storage for the patter of an ASCII character
                                ; used when writing an ASCII character in a graphical mode
       FC40                     PATWRK:         equ     $FC40
                                
                                ; FC48-FC49: lowest address of the RAM memory; initialized at startup
                                ; and not changed normally
       FC48                     BOTTOM:         equ     $FC48
                                
                                ; FC4A-FC4B: highest address of the RAM memory that is not reserved by
                                ; the OS; string area, filebuffers and stack are below this address
                                ; initialized at startup and not changed normally
       FC4A                     HIMEM:          equ     $FC4A
                                
                                ; FC4C-FC99: table for interrupt facilities of MSX BASIC
                                ; each 3 bytes are used like this:
                                ; byte 1 is a flag:
                                ;  bit 2: interrupt happened; 1 = yes
                                ;  bit 1: interrupt stop; 1 = yes
                                ;  bit 0: interrupt off; 1 = no
                                ; byte 2-3 is the adress of the line in BASIC where should be
                                ; jumped too
                                ; the offsets in the table are:
                                ;  offset  address interrupt
                                ;       0  FC4C    F1
                                ;       3  FC4F    F2
                                ;       6  FC52    F3
                                ;       9  FC55    F4
                                ;      12  FC58    F5
                                ;      15  FC5B    F6
                                ;      18  FC5E    F7
                                ;      21  FC61    F8
                                ;      24  FC64    F9
                                ;      27  FC67    F10
                                ;      30  FC6A    STOP
                                ;      33  FC6D    sprite collision
                                ;      36  FC70    SPACE (trigger 0)
                                ;      39  FC73    joystick 1 button 1 (trigger 1)
                                ;      39  FC76    joystick 2 button 1 (trigger 2)
                                ;      39  FC79    joystick 1 button 2 (trigger 3)
                                ;      39  FC7C    joystick 2 button 2 (trigger 4)
                                ;      39  FC7F    interval
       FC4C                     TRPTBL:         equ     $FC4C
                                
                                ; FC9A: usage unknown
       FC9A                     RTYCNT:         equ     $FC9A
                                
                                ; FC9B: STOP indication
                                ; 0 = nothing; 3 = CTRL+STOP, 4 = STOP
       FC9B                     INTFLG:         equ     $FC9B
                                
                                ; FC9C: last read Y-position of a touchpad
       FC9C                     PADY:           equ     $FC9C
                                
                                ; FC9D: last read X-position of a touchpad
       FC9D                     PADX:           equ     $FC9D
                                
                                ; FC9E-FC9F: software clock, updated at each VDP interrupt
       FC9E                     JIFFY:          equ     $FC9E           ; timer counter
                                
                                ; FCA0-FCA1: initial value of INTCNT, used when INTCNT
                                ; reaches 0; used for ON INTERVAL GOSUB
       FCA0                     INTVAL:         equ     $FCA0
                                
                                ; FCA2-FCA3: interrupt counter; lowered at each VDP interrupt;
                                ; reset with value of INTVAL when it reaches zero; if interval
                                ; interrupt is needed, it is generated
       FCA2                     INTCNT:         equ     $FCA2
                                
                                ; FCA4-FCA5: parameter used at tap input, given a value during
                                ; reading of a headerblock from tape
       FCA4                     LOWLIM:         equ     $FCA4
       FCA5                     WINWID:         equ     $FCA5
                                
                                ; FCA6: flag indicating if the previous character written
                                ; to the screen was an extension character for graphical signs
                                ; (ASCII 1); 0 = no, 1 = yes
       FCA6                     GRPHED:         equ     $FCA6
                                
                                ; FCA7 ESCCNT State of a state machine that handles the printing of escape
                                ; sequences. A subset of the VT52 escape sequences is supported.
                                ; values:
                                ; $00: not inside an escape sequence
                                ; $01: seen <ESC>x
                                ; $02: seen <ESC>y
                                ; $03: seen <ESC>Y<row>
                                ; $04: seen <ESC>Y
                                ; $FF: seen <ESC>
       FCA7                     ESCCNT:         equ     $FCA7
                                
                                ; FCA8: switch indicating insert or overwrite mode
                                ; $00 = overwrite; $FF = insert
                                ; the value of INSFLG is changed each time the INS key is pressed
       FCA8                     INSFLG:         equ     $FCA8
                                
                                ; FCA9: show cursor; 0 = no, 1 = yes
                                ; can be changed with escape sequences x5 and y5
       FCA9                     CSRSW:          equ     $FCA9
                                
                                ; FCAA: shape of cursor; 0 = block; 1 = insert
                                ; pressing the INS key changes the value of CSTYLE
                                ; can be changed with escape sequences x4 and y4
       FCAA                     CSTYLE:         equ     $FCAA
                                
                                ; switch indicating if the CAPS-LOCK is on
                                ; $00 = off, $FF = on (unofficial: $80 = perma-on)
       FCAB                     CAPST:          equ     $FCAB
                                
                                ; FCAC: dead key control in non-japanese MSX models
                                ; adds a mark on the next char pressed, if applicable
                                ;  0 = no dead key
                                ;  1 = dead key                => accent grave
                                ;  2 = SHIFT + dead key        => accent aigu
                                ;  3 = CODE + dead key         => accent circumflex
                                ;  4 = SHIFT + CODE + dead key => trema
                                ; in japanese models it controls the charset used
       FCAC                     KANAST:         equ     $FCAC
                                
                                ; FCAD: only used in japanese MSX models; it defines
                                ; the used typeset (ini: $40)
       FCAD                     KANAMD:         equ     $FCAD
                                
                                ; ----
                                ; misc
                                ; ----
                                
       FCAE                     FLBMEM:         equ     $FCAE
       FCAF                     SCRMOD:         equ     $FCAF
       FCB0                     OLDSCR:         equ     $FCB0
       FCB1                     CASPRV:         equ     $FCB1
       FCB2                     BRDATR:         equ     $FCB2
       FCB3                     GXPOS:          equ     $FCB3
       FCB5                     GYPOS:          equ     $FCB5
       FCB7                     GRPACX:         equ     $FCB7
       FCB9                     GRPACY:         equ     $FCB9
       FCBB                     DRWFLG:         equ     $FCBB
       FCBD                     DRWANG:         equ     $FCBD
       FCBE                     RUNBNF:         equ     $FCBE
       FCBF                     SAVENT:         equ     $FCBF
                                
                                ; ---------------------------
                                ; storage of slot information
                                ; ---------------------------
                                
                                ; FCC1-FCC4: Information for each primary slot. The most significant bit is
                                ; set if the primary slot is found to be expanded.
       FCC1                     EXPTBL:         equ     $FCC1
                                
                                ; FCC5-FCC8: Duplicate the contents of the four possible secondary slot
                                ; registers.
       FCC5                     SLTTBL:         equ     $FCC5
                                
                                ; FCC9-FD08: Information for any extension ROMs found during the power-up
                                ; ROM search.
                                ; FCC9-FCCC: primary slot 0, secondary slot 0
                                ; FCCD-FCD0: primary slot 0, secondary slot 1
                                ; FCD1-FCD4: primary slot 0, secondary slot 2
                                ; FCD5-FCD8: primary slot 0, secondary slot 3
                                ; FCD9-FCE8: primary slot 1
                                ; FCE9-FCF8: primary slot 2
                                ; FCF9-FD08: primary slot 3
                                ; The information is stored as below.
                                ; bit 7 (set): BASIC program
                                ; bit 6 (set): device handler
                                ; bit 5 (set): statement handler
       FCC9                     SLTATR:         equ     $FCC9
                                
       FD09                     SLTWRK:         equ     $FD09
                                
                                ; ------------------------------
                                ; storage of ROM-page parameters
                                ; ------------------------------
                                
       FD89                     PROCNM:         equ     $FD89
       FD99                     DEVICE:         equ     $FD99
                                ; ------------
                                ; system hooks
                                ; ------------
                                
                                ; system hooks are defined in hooks.asm
                                
                                ; ------------------
                                ; storage of VDP8-23
                                ; ------------------
                                
                                ; FFE7-FFF6: storage of VDP 8-23
       FFE7                     RG8SAV:         equ     $FFE7
                                
                                ; ----------------------
                                ; extra slot information
                                ; ----------------------
                                
                                ; FFF7: slot address of main-rom
                                ;?????:         equ     $FFF7
                                
                                ; ------------------
                                ; storage of VDP25-27
                                ; ------------------
                                
                                ; FFFA-FFFC: storage of VDP 25-27
       FFFA                     RG25SAV:         equ     $FFFA
                                
                                ; ---------------------------
                                ; subslot switching addresses
                                ; ---------------------------
                                
                                ; FFFF: subslot switching address
                                ; This is not actually a system variable, it is a hardware register:
                                ;   SSL_REGS (see hardware.asm).
                                
                                ; -------
                                ; the end
                                ; -------
                                
                                ; vim:ts=8:expandtab:filetype=z8a:syntax=z8a:
[EOF:systemvars.asm:UTF_8]
                                
000000 4000                         ORG RUN
                                
                                ; MSX ROM header
000000 4000 4142                    DB  "AB"   ; ID for auto-executable ROM
000002 4002 1040                    DW  INIT_ROM   ; Main program execution address.
000004 4004 0000                    DW  0      ; STATEMENT
000006 4006 0000                    DW  0      ; DEVICE
000008 4008 0000                    DW  0      ; TEXT
00000A 400A 000000000000            DW  0,0,0  ; Reserved
                                    INCLUDE "MSXINIT.ASM"
                                
                                ;   LSX-Dodgers INIT
                                ;   MSX
                                
       4010                     INIT_ROM:
000010 4010 21DAFE          10      LD  HL,H_STKE
000013 4013 3E                      DB  03EH    ;LD A,??
000014 4014 F7              12      RST 30H
000015 4015 F3               4      DI
000016 4016 77               7      LD  (HL),A
000017 4017 CD2540          17      CALL    GTSL1_
00001A 401A 23               6      INC HL
00001B 401B 77               7      LD  (HL),A
00001C 401C 114F40          10      LD  DE,START
00001F 401F 23               6      INC HL
000020 4020 73               7      LD  (HL),E
000021 4021 23               6      INC HL
000022 4022 72               7      LD  (HL),D
000023 4023 FB               4      EI
000024 4024 C9              10      RET
                                
       4025                     GTSL1_:
000025 4025 E5              11      PUSH    HL      ;Save registers
000026 4026 D5              11      PUSH    DE
                                ;
000027 4027 CD3801          17      CALL    RSLREG      ;read primary slot #
00002A 402A 0F               4      RRCA
00002B 402B 0F               4      RRCA
00002C 402C E603             7      AND 11B     ;[A]=000000PP
00002E 402E 5F               4      LD  E,A
00002F 402F 1600             7      LD  D,0     ;[DE]=000000PP
000031 4031 21C1FC          10      LD  HL,EXPTBL
000034 4034 19              11      ADD HL,DE       ;[HL]=EXPTBL+000000PP
000035 4035 5F               4      LD  E,A     ;[E]=000000PP
000036 4036 7E               7      LD  A,(HL)      ;[A]=(EXPTBL+000000PP)
000037 4037 E680             7      AND 80H     ;Use only MSB
000039 4039 2811            12      JR  Z,GTSL1NOEXP
00003B 403B B3               4      OR  E       ;[A]=F00000PP
00003C 403C 5F               4      LD  E,A     ;save primary slot number
00003D 403D 23               6      INC HL      ;point to SLTTBL entry
00003E 403E 23               6      INC HL
00003F 403F 23               6      INC HL
000040 4040 23               6      INC HL
000041 4041 7E               7      LD  A,(HL)      ;get currently expansion slot register
000042 4042 0F               4      RRCA
000043 4043 0F               4      RRCA
000044 4044 E603             7      AND 11B     ;[A] = 000000SS
000046 4046 07               4      RLCA
000047 4047 07               4      RLCA            ;[A] = 0000SS00
000048 4048 B3               4      OR  E       ;[A] = F000SSPP
                                ;
       4049                     GTSL1END:
000049 4049 D1              10      POP DE
00004A 404A E1              10      POP HL
00004B 404B C9              10      RET
       404C                     GTSL1NOEXP:
00004C 404C 7B               4      LD  A,E     ;[A] = 000000PP
00004D 404D 18FA            12      JR  GTSL1END
                                
       404F                     START:
00004F 404F F3               4      DI
000050 4050 ED56             8      IM  1
000052 4052 216040          10      LD  HL,AT_START2
000055 4055 1100C7          10      LD  DE,START2
000058 4058 010020          10      LD  BC,MSX_E-START2
00005B 405B EDB0                    LDIR
00005D 405D C300C7          10      JP  START2
                                
       4060                     AT_START2:
000060 C700                         ORG START2,AT_START2-RUN
                                
000060 C700 3100C7          10      LD  SP,START2
000063 C703 CD11C7          17      CALL    INIT        ;NZならAUTOEXECを実行
000066 C706 210000          10      LD  HL,0
000069 C709 E5              11      PUSH    HL
00006A C70A C8              11      RET Z
00006B C70B 11A1C8          10      LD  DE,AUTOD
00006E C70E C3FDE4          10      JP  _COMANL
                                
       C711                     INIT:
000071 C711 DD21900D        14      LD  IX,0D90H
000075 C715 0600             7      LD  B,0
       C717                     CHECK_CBIOS1:
000077 C717 DD7E00          19      LD  A,(IX+0)
00007A C71A FE43             7      CP  'C'
00007C C71C 202B            12      JR  NZ,CHECK_CBIOS2
00007E C71E DD7E01          19      LD  A,(IX+1)
000081 C721 FE2D             7      CP  '-'
000083 C723 2024            12      JR  NZ,CHECK_CBIOS2
000085 C725 DD7E02          19      LD  A,(IX+2)
000088 C728 FE42             7      CP  'B'
00008A C72A 201D            12      JR  NZ,CHECK_CBIOS2
00008C C72C DD7E03          19      LD  A,(IX+3)
00008F C72F FE49             7      CP  'I'
000091 C731 2016            12      JR  NZ,CHECK_CBIOS2
000093 C733 DD7E04          19      LD  A,(IX+4)
000096 C736 FE4F             7      CP  'O'
000098 C738 200F            12      JR  NZ,CHECK_CBIOS2
00009A C73A DD7E05          19      LD  A,(IX+5)
00009D C73D EE53             7      XOR 'S'
00009F C73F 2008            12      JR  NZ,CHECK_CBIOS2
                                
0000A1 C741 327BD0          13      LD  (CBIOS_SWC1),A
0000A4 C744 329FD0          13      LD  (CBIOS_SWC2),A
                                
0000A7 C747 1804            12      JR  CHECK_CBIOS3
       C749                     CHECK_CBIOS2:
0000A9 C749 DD23            10      INC IX
0000AB C74B 10CA            13      DJNZ    CHECK_CBIOS1
       C74D                     CHECK_CBIOS3:
0000AD C74D 3ADBFE          13      LD  A,(H_STKE+1)
0000B0 C750 3262E4          13      LD  (ROM_SLT),A
0000B3 C753 2680             7      LD  H,080H
0000B5 C755 CD6BD3          17      CALL    ENASLT
                                
0000B8 C758 1141F3          10      LD  DE,0F341H
0000BB C75B 210000          10      LD  HL,00000H
0000BE C75E CD5FC8          17      CALL    INIT_RAM
                                
0000C1 C761 13               6      INC DE
0000C2 C762 210040          10      LD  HL,04000H
0000C5 C765 CD5FC8          17      CALL    INIT_RAM
                                
0000C8 C768 13               6      INC DE
0000C9 C769 210080          10      LD  HL,08000H
0000CC C76C CD5FC8          17      CALL    INIT_RAM
                                
0000CF C76F 210000          10      LD  HL,0
0000D2 C772 065C             7      LD  B,05CH
0000D4 C774 3E                      DB  03EH    ;LD A,??
0000D5 C775 EF              12      RST 28H
0000D6 C776 CD05D5          17      CALL    FILL_MEMORY
0000D9 C779 06A4             7      LD  B,0A4H
0000DB C77B AF               4      XOR A
0000DC C77C CD05D5          17      CALL    FILL_MEMORY
                                
0000DF C77F 3EC3             7      LD  A,0C3H      ;JP
0000E1 C781 2103E4          10      LD  HL,CPM_WBOOT
0000E4 C784 320000          13      LD  (00000H),A
0000E7 C787 220100          16      LD  (00001H),HL ;IPL
                                
0000EA C78A 21031D          10      LD  HL,MACW     ;3 bit7  DPB Compatible LA(1)
0000ED C78D 220300          16      LD  (00003H),HL ;  bit6-0 Machine
                                ;               ;4 LSX-Dodgers(01DH)
0000F0 C790 2106C9          10      LD  HL,BDOS
0000F3 C793 320500          13      LD  (00005H),A
0000F6 C796 220600          16      LD  (00006H),HL ;BDOS
                                
0000F9 C799 210000          10      LD  HL,0
0000FC C79C 322800          13      LD  (00028H),A
0000FF C79F 222900          16      LD  (00029H),HL ;BDOS
                                                ;インタースロットコール
000102 C7A2 216BD2          10      LD  HL,RDSLTR
000105 C7A5 320C00          13      LD  (_RDSLT),A
000108 C7A8 220D00          16      LD  (_RDSLT+1),HL
                                
00010B C7AB 2174D2          10      LD  HL,WRSLTR
00010E C7AE 321400          13      LD  (_WRSLT),A
000111 C7B1 221500          16      LD  (_WRSLT+1),HL
                                
000114 C7B4 212DD2          10      LD  HL,CALSLTR
000117 C7B7 321C00          13      LD  (_CALSLT),A
00011A C7BA 221D00          16      LD  (_CALSLT+1),HL
                                
00011D C7BD 216BD3          10      LD  HL,ENASLT
000120 C7C0 322400          13      LD  (_ENASLT),A
000123 C7C3 222500          16      LD  (_ENASLT+1),HL
                                
000126 C7C6 211DD2          10      LD  HL,CALLF
000129 C7C9 323000          13      LD  (_CALLF),A
00012C C7CC 223100          16      LD  (_CALLF+1),HL
                                
00012F C7CF 217DD2          10      LD  HL,INT38H
000132 C7D2 323800          13      LD  (00038H),A
000135 C7D5 223900          16      LD  (00038H+1),HL
                                                ;LSX-Dodgers
000138 C7D8 3EE4             7      LD  A,CPM_BOOT/256
00013A C7DA 320B00          13      LD  (0000BH),A
                                
00013D C7DD 3E                      DB  03EH    ;LD A,??
00013E C7DE E9               4      JP  (HL)
00013F C7DF 320F00          13      LD  (0000FH),A
                                                ;MSXワークエリア
000142 C7E2 3E03             7      LD  A,3
000144 C7E4 329BFC          13      LD  (INTFLG),A
                                
                                                ;ROMタイプ判別(ASCII-8K/ASCII-16K)
000147 C7E7 1E00             7      LD  E,0
000149 C7E9 3A62E4          13      LD  A,(ROM_SLT)
00014C C7EC 210068          10      LD  HL,BANK1_SEL
00014F C7EF CDF8D2          17      CALL    WRSLT
                                
000152 C7F2 210060          10      LD  HL,06000H
000155 C7F5 3A62E4          13      LD  A,(ROM_SLT)
000158 C7F8 CDB7D2          17      CALL    RDSLT
00015B C7FB FE41             7      CP  'A'
00015D C7FD 280F            12      JR  Z,ROM8K
                                                ;ASCII-8K/Konami-8Kではない(ASCII-16K)
00015F C7FF 3E                      DB  03EH    ;LD A,??
000160 C800 00               4      NOP
000161 C801 32E2E1          13      LD  (ASCII16K1),A
000164 C804 32E6E1          13      LD  (ASCII16K2),A
000167 C807 3E3F             7      LD  A,03FH
000169 C809 32FEE1          13      LD  (ASCII16K3),A
00016C C80C 1829            12      JR  ROMCHECKED
       C80E                     ROM8K:              ;Konami-8Kチェック
00016E C80E 1E01             7      LD  E,1
000170 C810 3A62E4          13      LD  A,(ROM_SLT)
000173 C813 210070          10      LD  HL,BANK2_SEL
000176 C816 CDF8D2          17      CALL    WRSLT
                                
000179 C819 1E00             7      LD  E,0
00017B C81B 3A62E4          13      LD  A,(ROM_SLT)
00017E C81E 210080          10      LD  HL,KONAMI_BANK2_SEL
000181 C821 CDF8D2          17      CALL    WRSLT
                                
000184 C824 210080          10      LD  HL,08000H
000187 C827 3A62E4          13      LD  A,(ROM_SLT)
00018A C82A CDB7D2          17      CALL    RDSLT
00018D C82D FE41             7      CP  'A'
00018F C82F 2006            12      JR  NZ,ROMCHECKED
                                                ;Konami-8K
000191 C831 210080          10      LD  HL,KONAMI_BANK2_SEL
000194 C834 22EDE1          16      LD  (ROM8000H),HL
       C837                     ROMCHECKED:
                                                ;MSX2判別
000197 C837 3AF8FA          13      LD  A,(EXBRSA)
00019A C83A B7               4      OR  A
00019B C83B 3E28             7      LD  A,40
00019D C83D 2802            12      JR  Z,ISMSX1
00019F C83F 3E50             7      LD  A,80        ;MSX2以降は80桁で起動
       C841                     ISMSX1:
0001A1 C841 32AEF3          13      LD  (LINL40),A
0001A4 C844 32B1E4          13      LD  (_WIDTH),A
0001A7 C847 DD216C00        14      LD  IX,INITXT
0001AB C84B CD11D2          17      CALL    CALSLT_R
0001AE C84E DD217800        14      LD  IX,SETTXT
0001B2 C852 CD11D2          17      CALL    CALSLT_R
                                
0001B5 C855 21ADC8          10      LD  HL,INIMES
0001B8 C858 CD78CD          17      CALL    MSX
       C85B                     INIT1:
0001BB C85B AF               4      XOR A
0001BC C85C FE03             7      CP  3
0001BE C85E C9              10      RET
                                
       C85F                     INIT_RAM:
0001BF C85F 1A               7      LD  A,(DE)
0001C0 C860 E5              11      PUSH    HL
0001C1 C861 CD8CC8          17      CALL    INIT_RAMX
0001C4 C864 E1              10      POP HL
0001C5 C865 C8              11      RET Z
0001C6 C866 3E03             7      LD  A,3     ;SLOT3
0001C8 C868 12               7      LD  (DE),A
0001C9 C869 E5              11      PUSH    HL
0001CA C86A CD8CC8          17      CALL    INIT_RAMX
0001CD C86D E1              10      POP HL
0001CE C86E C8              11      RET Z
0001CF C86F 3E83             7      LD  A,083H      ;SLOT3-0
0001D1 C871 12               7      LD  (DE),A
0001D2 C872 E5              11      PUSH    HL
0001D3 C873 CD8CC8          17      CALL    INIT_RAMX
0001D6 C876 E1              10      POP HL
0001D7 C877 C8              11      RET Z
0001D8 C878 3E87             7      LD  A,087H      ;SLOT3-1
0001DA C87A 12               7      LD  (DE),A
0001DB C87B E5              11      PUSH    HL
0001DC C87C CD8CC8          17      CALL    INIT_RAMX
0001DF C87F E1              10      POP HL
0001E0 C880 C8              11      RET Z
0001E1 C881 3E8B             7      LD  A,08BH      ;SLOT3-2
0001E3 C883 12               7      LD  (DE),A
0001E4 C884 E5              11      PUSH    HL
0001E5 C885 CD8CC8          17      CALL    INIT_RAMX
0001E8 C888 E1              10      POP HL
0001E9 C889 C8              11      RET Z
0001EA C88A 3E8F             7      LD  A,08FH      ;SLOT3-3
       C88C                     INIT_RAMX:          ;スロットがRAMかチェック ZF=1ならばRAM
0001EC C88C D5              11      PUSH    DE
0001ED C88D CD6BD3          17      CALL    ENASLT
0001F0 C890 D1              10      POP DE
0001F1 C891 010040          10      LD  BC,04000H
       C894                     INIT_RAM1:
0001F4 C894 7E               7      LD  A,(HL)
0001F5 C895 2F               4      CPL
0001F6 C896 77               7      LD  (HL),A
0001F7 C897 BE               7      CP  (HL)
0001F8 C898 2F               4      CPL
0001F9 C899 77               7      LD  (HL),A
0001FA C89A C0              11      RET NZ
0001FB C89B EDA1            16      CPI         ;HL=HL+1 BC=BC-1 BCが0の場合にP/V=0
0001FD C89D E0              11      RET PO
0001FE C89E C0              11      RET NZ
0001FF C89F 18F3            12      JR  INIT_RAM1
                                
000201 C8A1 4155544F45584543    AUTOD:  DB  "AUTOEXEC "
            20                  
00020A C8AA 413A00              AUTODV: DB  "A:",0
                                
00020D C8AD 0C4C53582D446F64    INIMES: DB  00CH,"LSX-Dodgers for MSX v"
            6765727320666F72    
            204D53582076        
000223 C8C3 312E                    DB  030H + VER_1, '.'
000225 C8C5 3539                    DB  030H + VER_2 ,030H + VER_3
                                ;   DB  ""
000227 C8C7 2047616B750D0A          DB  ' Gaku',0DH,0AH
00022E C8CE 00                      DB  0
                                
00022F C8CF 0300                M2DD:   DW  3
000231 C8D1 F902                    DB  0F9H,2
000233 C8D3 CB02                    DW  715
000235 C8D5 FF0750090182            DB  0FFH,7,80,9,1,082H
00023B C8DB 0700A7000A00            DW  7,0A7H,10
       C8E1                     M2DDE:
[EOF:MSXINIT.ASM:SHIFT_JIS]
                                    INCLUDE "MSXCCP.ASM"
                                
                                ;   LSX-Dodgers CCP
                                ;   MSX
                                
       C8E1                     INITE:
000241 C8E1                         DS  BDOS-INITE
000266 C906 C337CD          10      JP  BDOS0
                                
       C909                     WBOOT1:
000269 C909 ED7B0600        20      LD  SP,(SYSTEM+1)
00026D C90D 3E03             7      LD  A,3
00026F C90F CDFECF          17      CALL    MSG_A
       C912                     WBOOT2:
[EOF:MSXCCP.ASM:UTF_8]
                                    INCLUDE "LDCCP.ASM"
                                
                                ;   LSX-Dodgers CCP
                                
       C912                     COMMAND:
000272 C912 3A3AE3          13      LD  A,(FCB_BAT)
000275 C915 B7               4      OR  A
000276 C916 C258CA          10      JP  NZ,C_BAT1
000279 C919 CDCCC9          17      CALL    SETDTA1
00027C C91C 3A87E4          13      LD  A,(_DVSW)
00027F C91F C641             7      ADD A,'A'
000281 C921 CDFECF          17      CALL    MSG_A
000284 C924 3E3E             7      LD  A,'>'
000286 C926 CDFECF          17      CALL    MSG_A
000289 C929 3E50             7      LD  A,80
00028B C92B 12               7      LD  (DE),A
00028C C92C CDBDD0          17      CALL    _SYS0A      ;(BDOS)文字列入力
00028F C92F CD4DCB          17      CALL    LTNL
       C932                     COMMAND2:
000292 C932 118200          10      LD  DE,DTA1+2
000295 C935 CDFDE4          17      CALL    _COMANL
000298 C938 30D8            12      JR  NC,COMMAND
00029A C93A 1179E4          10      LD  DE,COMERM
00029D C93D CD69CD          17      CALL    _SYS09      ;(BDOS)文字列出力
0002A0 C940 C7              12      RST 0
                                
       C941                     COMANL:
0002A1 C941 CD59D4          17      CALL    FILE
0002A4 C944 3A19E4          13      LD  A,(FNAME+4)
0002A7 C947 FE20             7      CP  020H
0002A9 C949 201C            12      JR  NZ,COMB2
0002AB C94B D5              11      PUSH    DE
0002AC C94C 1115E4          10      LD  DE,FNAME
0002AF C94F 1A               7      LD  A,(DE)
0002B0 C950 FE20             7      CP  020H
0002B2 C952 2844            12      JR  Z,SDVSW
0002B4 C954 1B               6      DEC DE
0002B5 C955 1A               7      LD  A,(DE)
0002B6 C956 C6FF             7      ADD A,0FFH
0002B8 C958 3809            12      JR  C,COMB
0002BA C95A 13               6      INC DE
                                
0002BB C95B 2107CD          10      LD  HL,COMTB
0002BE C95E 0608             7      LD  B,COMS
0002C0 C960 CDE8D6          17      CALL    CPNAME
       C963                     COMB:
0002C3 C963 D1              10      POP DE
0002C4 C964 D20F00          10      JP  NC,JP_HL
       C967                     COMB2:
0002C7 C967 EB               4      EX  DE,HL
0002C8 C968 2235CA          16      LD  (COMSWC),HL
0002CB C96B F5              11      PUSH    AF
0002CC C96C CDEDC9          17      CALL    CEXE4
0002CF C96F F1              10      POP AF
0002D0 C970 2115E4          10      LD  HL,FNAME
0002D3 C973 116D00          10      LD  DE,FCB2+1   ;COMMAND NAME
0002D6 C976 010B00          10      LD  BC,11
0002D9 C979 EDB0                    LDIR
0002DB C97B 11D9E2          10      LD  DE,PATHD
       C97E                     CEX1:
0002DE C97E 1A               7      LD  A,(DE)
0002DF C97F FE20             7      CP  020H
0002E1 C981 D8              11      RET C
0002E2 C982 CD4ED4          17      CALL    FILEC
0002E5 C985 D5              11      PUSH    DE
0002E6 C986 216D00          10      LD  HL,FCB2+1   ;COMMAND NAME
0002E9 C989 1115E4          10      LD  DE,FNAME
0002EC C98C 010B00          10      LD  BC,11
0002EF C98F EDB0                    LDIR
0002F1 C991 CDEDC9          17      CALL    CEXE4
0002F4 C994 D1              10      POP DE
0002F5 C995 13               6      INC DE
0002F6 C996 18E6            12      JR  CEX1
                                
       C998                     SDVSW:
0002F8 C998 F1              10      POP AF
0002F9 C999 3A14E4          13      LD  A,(FDRV)
0002FC C99C 3D               4      DEC A
0002FD C99D 5F               4      LD  E,A
0002FE C99E 0E0E             7      LD  C,00EH      ;(BDOS)カレントドライブの設定
000300 C9A0 1831            12      JR  SYSTEM0
                                
       C9A2                     OPEN1:
000302 C9A2 2114E4          10      LD  HL,FDRV
       C9A5                     OPEN:
000305 C9A5 0E11             7      LD  C,011H      ;(BDOS)ファイルの検索
       C9A7                     OPEN3:
000307 C9A7 D5              11      PUSH    DE
000308 C9A8 1115E3          10      LD  DE,DTA_CCP
00030B C9AB CDC9C9          17      CALL    SETDTA
00030E C9AE EB               4      EX  DE,HL
00030F C9AF CDD3C9          17      CALL    SYSTEM0
000312 C9B2 D1              10      POP DE
000313 C9B3 C9              10      RET
                                
       C9B4                     OPEN2:
000314 C9B4 0E12             7      LD  C,012H
000316 C9B6 18EF            12      JR  OPEN3
                                
       C9B8                     DEFCB:              ;Z=Ok NZ=Error
000318 C9B8 1115E3          10      LD  DE,DTA_CCP
00031B C9BB CDD1C9          17      CALL    SYSC0F
                                
00031E C9BE 1136E3          10      LD  DE,DTA_CCP+33   ;(FCB)ランダムレコード
000321 C9C1 0604             7      LD  B,4
000323 C9C3 CD1BCC          17      CALL    ZERO_MEMORY_DE
       C9C6                     SETDTA100:
000326 C9C6 110001          10      LD  DE,00100H
       C9C9                     SETDTA:
000329 C9C9 C33CCF          10      JP  _SYS1A      ;(BDOS)DTAの設定
                                
       C9CC                     SETDTA1:
00032C C9CC 118000          10      LD  DE,DTA1
00032F C9CF 18F8            12      JR  SETDTA
                                
       C9D1                     SYSC0F:
000331 C9D1 0E0F             7      LD  C,00FH      ;(BDOS)ファイルのオープン
       C9D3                     SYSTEM0:
000333 C9D3 CD0500          17      CALL    SYSTEM
000336 C9D6 B7               4      OR  A
000337 C9D7 C9              10      RET
                                
       C9D8                     C_CD:
000338 C9D8 0E5A             7      LD  C,05AH
00033A C9DA 18F7            12      JR  SYSTEM0
                                
       C9DC                     S27BUF:
00033C C9DC 2100FE          10      LD  HL,-00200H  ;スクラッチエリア(0100H)+スタック予備(0100H)
00033F C9DF 39              11      ADD HL,SP
000340 C9E0 2E00             7      LD  L,0
000342 C9E2 7C               4      LD  A,H
000343 C9E3 E6F8             7      AND 0F8H
000345 C9E5 67               4      LD  H,A
       C9E6                     S27DTA:
000346 C9E6 1115E3          10      LD  DE,DTA_CCP
       C9E9                     S27:
000349 C9E9 0E27             7      LD  C,027H      ;(BDOS)ランダムブロック読み込み
00034B C9EB 18E6            12      JR  SYSTEM0
                                
       C9ED                     CEXE4:
00034D C9ED 211DE4          10      LD  HL,FNAME+8
000350 C9F0 7E               7      LD  A,(HL)
000351 C9F1 FE20             7      CP  020H
000353 C9F3 2007            12      JR  NZ,CEXE7
000355 C9F5 3E3F             7      LD  A,'?'
000357 C9F7 77               7      LD  (HL),A
000358 C9F8 23               6      INC HL
000359 C9F9 77               7      LD  (HL),A
00035A C9FA 23               6      INC HL
00035B C9FB 77               7      LD  (HL),A
       C9FC                     CEXE7:
00035C C9FC CDA2C9          17      CALL    OPEN1
       C9FF                     CEXE5:
00035F C9FF C0              11      RET NZ
000360 CA00 2A1FE3          16      LD  HL,(DTA_CCP+1+9)
000363 CA03 7C               4      LD  A,H
000364 CA04 CD70D7          17      CALL    CAP
000367 CA07 67               4      LD  H,A
000368 CA08 7D               4      LD  A,L
000369 CA09 CD70D7          17      CALL    CAP
00036C CA0C 6F               4      LD  L,A
00036D CA0D 3A1EE3          13      LD  A,(DTA_CCP+1+8)
000370 CA10 CD70D7          17      CALL    CAP
000373 CA13 D642             7      SUB 'B'
000375 CA15 282C            12      JR  Z,C_BAT
000377 CA17 3D               4      DEC A       ;'C'
000378 CA18 2805            12      JR  Z,C_EXE
       CA1A                     CEXE6:
00037A CA1A CDB4C9          17      CALL    OPEN2
00037D CA1D 18E0            12      JR  CEXE5
                                
       CA1F                     C_EXE:
00037F CA1F 7C               4      LD  A,H
000380 CA20 FE4D             7      CP  'M'
000382 CA22 20F6            12      JR  NZ,CEXE6
                                
000384 CA24 CDB8C9          17      CALL    DEFCB
000387 CA27 CDDCC9          17      CALL    S27BUF
00038A CA2A 3D               4      DEC A
00038B CA2B 37               4      SCF
00038C CA2C C0              11      RET NZ
00038D CA2D 7C               4      LD  A,H
00038E CA2E B5               4      OR  L
00038F CA2F 37               4      SCF
000390 CA30 C8              11      RET Z
000391 CA31 CDCCC9          17      CALL    SETDTA1
000394 CA34 110000          10      LD  DE,0                ; self-modifying code
       CA35                     COMSWC  EQU $-2
000397 CA37 ED7B0600        20      LD  SP,(SYSTEM+1)
00039B CA3B 67               4      LD  H,A             ; A=0 in SETDTA1(_SYS1A)
00039C CA3C 6F               4      LD  L,A
00039D CA3D E5              11      PUSH    HL              ; push $0000 (reboot address)
00039E CA3E 24               4      INC H
00039F CA3F E5              11      PUSH    HL              ; push $0100 (TPA address)
0003A0 CA40 C3E6CB          10      JP  SETFCB              ; and JP $0100
                                
       CA43                     C_BAT:
0003A3 CA43 114154          10      LD  DE,'A'+'T'*256
0003A6 CA46 ED52            15      SBC HL,DE
0003A8 CA48 20D0            12      JR  NZ,CEXE6
                                
0003AA CA4A CDB8C9          17      CALL    DEFCB
                                
0003AD CA4D 2115E3          10      LD  HL,DTA_CCP
0003B0 CA50 113AE3          10      LD  DE,FCB_BAT
0003B3 CA53 012500          10      LD  BC,37
0003B6 CA56 EDB0                    LDIR
       CA58                     C_BAT1:
0003B8 CA58 CDC6C9          17      CALL    SETDTA100
0003BB CA5B CD8FCA          17      CALL    FGETC_BAT
0003BE CA5E 218100          10      LD  HL,DTA1+1
0003C1 CA61 2025            12      JR  NZ,END_BATCH
0003C3 CA63 FE21             7      CP  021H        ;スペースや改行など制御文字を飛ばす
0003C5 CA65 38F1            12      JR  C,C_BAT1
0003C7 CA67 3620            10      LD  (HL),' '
0003C9 CA69 23               6      INC HL
       CA6A                     C_BAT2:
0003CA CA6A 77               7      LD  (HL),A
0003CB CA6B 23               6      INC HL
0003CC CA6C 7D               4      LD  A,L
0003CD CA6D 3C               4      INC A       ;L==0FFH
0003CE CA6E 2809            12      JR  Z,RUN_BATCH
0003D0 CA70 CD8FCA          17      CALL    FGETC_BAT
0003D3 CA73 2004            12      JR  NZ,RUN_BATCH
0003D5 CA75 FE20             7      CP  020H
0003D7 CA77 30F1            12      JR  NC,C_BAT2
       CA79                     RUN_BATCH:
0003D9 CA79 7D               4      LD  A,L
0003DA CA7A D67F             7      SUB DTA1-1
0003DC CA7C 328000          13      LD  (DTA1),A
0003DF CA7F FE04             7      CP  4
0003E1 CA81 3805            12      JR  C,END_BATCH
0003E3 CA83 3600            10      LD  (HL),0
0003E5 CA85 C332C9          10      JP  COMMAND2
       CA88                     END_BATCH:
0003E8 CA88 AF               4      XOR A       ;バッチファイルを閉じる
0003E9 CA89 323AE3          13      LD  (FCB_BAT),A
0003EC CA8C C300E4          10      JP  CPM_BOOT
                                
       CA8F                     FGETC_BAT:
0003EF CA8F 113AE3          10      LD  DE,FCB_BAT
       CA92                     FGETC:              ;1文字ずつ読み込む
0003F2 CA92 E5              11      PUSH    HL      ;Z:成功
0003F3 CA93 210100          10      LD  HL,1
0003F6 CA96 CDE9C9          17      CALL    S27
0003F9 CA99 E1              10      POP HL
0003FA CA9A 3A0001          13      LD  A,(00100H)
0003FD CA9D C9              10      RET
                                
       CA9E                     C_DEL:
0003FE CA9E CDE6CB          17      CALL    SETFCB
000401 CAA1 CD39D0          17      CALL    _SYS08      ;(BDOS)エコーなしコンソール入力
                                
000404 CAA4 0E13             7      LD  C,013H
000406 CAA6 180A            12      JR  CDEL1       ;(BDOS)ファイルの削除
                                
       CAA8                     C_REN:
000408 CAA8 CDE6CB          17      CALL    SETFCB
00040B CAAB 3E10             7      LD  A,010H      ;ディレクトリも対象にする
00040D CAAD 326900          13      LD  (FCB1+13),A ;属性
000410 CAB0 0E17             7      LD  C,017H      ;(BDOS)ファイル名の変更
       CAB2                     CDEL1:
000412 CAB2 115C00          10      LD  DE,FCB1
000415 CAB5 CD0500          17      CALL    SYSTEM
000418 CAB8 C6FF             7      ADD A,0FFH
00041A CABA C9              10      RET
                                
       CABB                     C_DIR:
00041B CABB CD4ED4          17      CALL    FILEC
00041E CABE 2115E4          10      LD  HL,FDRV+1
000421 CAC1 CDFCCC          17      CALL    CWILD1
000424 CAC4 3EF1             7      LD  A,0F1H
000426 CAC6 3221E4          13      LD  (FDRV+13),A
000429 CAC9 CDA2C9          17      CALL    OPEN1
       CACC                     CDIR1:
00042C CACC B7               4      OR  A
00042D CACD 2008            12      JR  NZ,PDSKF
00042F CACF CD1ACB          17      CALL    P_NAME
000432 CAD2 CDB4C9          17      CALL    OPEN2
000435 CAD5 18F5            12      JR  CDIR1
       CAD7                     PDSKF:
000437 CAD7 3A14E4          13      LD  A,(FDRV)
00043A CADA 5F               4      LD  E,A
00043B CADB 0E1B             7      LD  C,01BH      ;(BDOS)ディスク情報の獲得
00043D CADD CD0500          17      CALL    SYSTEM
000440 CAE0 4F               4      LD  C,A     ;C←1クラスタ辺りの論理セクタ数
000441 CAE1 C601             7      ADD A,001H
000443 CAE3 D8              11      RET C       ;Aが0FFHだった場合
000444 CAE4 3E06             7      LD  A,8-2
       CAE6                     PDS1:               ;HL=未使用クラスタの総数
000446 CAE6 3C               4      INC A
000447 CAE7 CB19             8      RR  C
000449 CAE9 30FB            12      JR  NC,PDS1
       CAEB                     PDS2:               ;B←論理セクタのサイズの上位8ビット
00044B CAEB 3C               4      INC A
00044C CAEC CB18             8      RR  B
00044E CAEE 30FB            12      JR  NC,PDS2
000450 CAF0 47               4      LD  B,A
                                
000451 CAF1 110000          10      LD  DE,0
       CAF4                     PDS3:
000454 CAF4 29              11      ADD HL,HL
000455 CAF5 EB               4      EX  DE,HL
000456 CAF6 ED6A            15      ADC HL,HL
000458 CAF8 EB               4      EX  DE,HL
000459 CAF9 10F9            13      DJNZ    PDS3
       CAFB                     PDSKF1:
00045B CAFB CD84CB          17      CALL    PRDEC_DEHL
00045E CAFE 116AE3          10      LD  DE,FREE
000461 CB01 CD69CD          17      CALL    _SYS09      ;(BDOS)文字列出力
000464 CB04 CD74CB          17      CALL    PUTDRV
000467 CB07 3E5C             7      LD  A,05CH      ;\
000469 CB09 CDFECF          17      CALL    MSG_A
00046C CB0C 2A22E4          16      LD  HL,(FDRV+14)    ;ディレクトリのクラスタ番号
00046F CB0F AF               4      XOR A
000470 CB10 11FEFF          10      LD  DE,0-2
000473 CB13 19              11      ADD HL,DE
000474 CB14 23               6      INC HL
000475 CB15 DC81CB          17      CALL    C,PRDEC_HL
000478 CB18 1833            12      JR  LTNL
                                
       CB1A                     P_NAME:
00047A CB1A 3A16E3          13      LD  A,(DTA_CCP+1)
00047D CB1D FE2E             7      CP  '.'
00047F CB1F C8              11      RET Z
                                
000480 CB20 3A21E3          13      LD  A,(DTA_CCP+1+00BH)
000483 CB23 F5              11      PUSH    AF
000484 CB24 CB67             8      BIT 4,A
000486 CB26 2808            12      JR  Z,DIR3
000488 CB28 115FE3          10      LD  DE,DIRMES
00048B CB2B CD69CD          17      CALL    _SYS09      ;(BDOS)文字列出力
00048E CB2E 180A            12      JR  DIR6
       CB30                     DIR3:
000490 CB30 ED5B34E3        20      LD  DE,(DTA_CCP+1+01EH)
000494 CB34 2A32E3          16      LD  HL,(DTA_CCP+1+01CH)
000497 CB37 CD84CB          17      CALL    PRDEC_DEHL
       CB3A                     DIR6:
00049A CB3A F1              10      POP AF
00049B CB3B 0F               4      RRCA
00049C CB3C 9F               4      SBC A,A
00049D CB3D E60A             7      AND '*'-020H
00049F CB3F C620             7      ADD A,020H
0004A1 CB41 CDFECF          17      CALL    MSG_A
0004A4 CB44 CD74CB          17      CALL    PUTDRV
0004A7 CB47 2116E3          10      LD  HL,DTA_CCP+1
0004AA CB4A CDC4CB          17      CALL    FPRNT
                                
       CB4D                     LTNL:
0004AD CB4D 1E03             7      LD  E,3
0004AF CB4F C3CDE4          10      JP  _PRINT
                                
       CB52                     C_PATH:
0004B2 CB52 CD30D5          17      CALL    SPCUT
0004B5 CB55 21D9E2          10      LD  HL,PATHD
0004B8 CB58 FE21             7      CP  021H
0004BA CB5A 300C            12      JR  NC,CPATH0
       CB5C                     CPATHP:
0004BC CB5C 7E               7      LD  A,(HL)
0004BD CB5D 23               6      INC HL
0004BE CB5E FE20             7      CP  020H
0004C0 CB60 3F               4      CCF
0004C1 CB61 30EA            12      JR  NC,LTNL
0004C3 CB63 CDFECF          17      CALL    MSG_A
0004C6 CB66 18F4            12      JR  CPATHP
       CB68                     CPATH0:
0004C8 CB68 FE3B             7      CP  ';'
0004CA CB6A 2001            12      JR  NZ,CPATH1
0004CC CB6C 13               6      INC DE
       CB6D                     CPATH1:
0004CD CB6D EB               4      EX  DE,HL
0004CE CB6E 013B00          10      LD  BC,PATHX
0004D1 CB71 EDB0                    LDIR
0004D3 CB73 C9              10      RET
                                
       CB74                     PUTDRV:
0004D4 CB74 3A89E4          13      LD  A,(_DSK)
0004D7 CB77 C641             7      ADD A,'A'
0004D9 CB79 CDFECF          17      CALL    MSG_A
0004DC CB7C 3E3A             7      LD  A,':'
       CB7E                     MSG_AR:
0004DE CB7E C3FECF          10      JP  MSG_A
                                
       CB81                     PRDEC_HL:
0004E1 CB81 AF               4      XOR A
0004E2 CB82 5F               4      LD  E,A
0004E3 CB83 57               4      LD  D,A
       CB84                     PRDEC_DEHL:
0004E4 CB84 D5              11      PUSH    DE
0004E5 CB85 110FE4          10      LD  DE,DECBF
0004E8 CB88 0605             7      LD  B,5
0004EA CB8A CD1BCC          17      CALL    ZERO_MEMORY_DE  ;A=0
0004ED CB8D D1              10      POP DE
                                
0004EE CB8E 0E20             7      LD  C,32
       CB90                     DEC1:
0004F0 CB90 29              11      ADD HL,HL
0004F1 CB91 EB               4      EX  DE,HL
0004F2 CB92 ED6A            15      ADC HL,HL
0004F4 CB94 EB               4      EX  DE,HL
0004F5 CB95 E5              11      PUSH    HL
0004F6 CB96 2113E4          10      LD  HL,DECBF+4
0004F9 CB99 0605             7      LD  B,5
       CB9B                     DEC2:
0004FB CB9B 7E               7      LD  A,(HL)
0004FC CB9C 8F               4      ADC A,A
0004FD CB9D 27               4      DAA
0004FE CB9E 77               7      LD  (HL),A
0004FF CB9F 2B               6      DEC HL
000500 CBA0 10F9            13      DJNZ    DEC2
000502 CBA2 E1              10      POP HL
000503 CBA3 0D               4      DEC C
000504 CBA4 20EA            12      JR  NZ,DEC1
                                
000506 CBA6 210FE4          10      LD  HL,DECBF
000509 CBA9 3E20             7      LD  A,020H
00050B CBAB 0604             7      LD  B,4
       CBAD                     DEC3:
00050D CBAD CDBACB          17      CALL    DEC4
000510 CBB0 CDBACB          17      CALL    DEC4
000513 CBB3 23               6      INC HL
000514 CBB4 10F7            13      DJNZ    DEC3
       CBB6                     DECX:
000516 CBB6 CDBACB          17      CALL    DEC4
000519 CBB9 AF               4      XOR A
       CBBA                     DEC4:
00051A CBBA ED6F            18      RLD
00051C CBBC FE20             7      CP  020H
00051E CBBE 2802            12      JR  Z,DEC5
000520 CBC0 F630             7      OR  030H
       CBC2                     DEC5:
000522 CBC2 18BA            12      JR  MSG_AR
                                
       CBC4                     FPRNT:
000524 CBC4 0608             7      LD  B,8 ;ファイル名を表示
000526 CBC6 CDD5CB          17      CALL    P_N1
000529 CBC9 7E               7      LD  A,(HL)
00052A CBCA CD7CD7          17      CALL    CAP3
00052D CBCD D8              11      RET C   ;拡張子が無い
                                
00052E CBCE 3E2E             7      LD  A,'.'
000530 CBD0 CDFECF          17      CALL    MSG_A
000533 CBD3 0603             7      LD  B,3 ;拡張子を表示
       CBD5                     P_N1:
000535 CBD5 7E               7      LD  A,(HL)
000536 CBD6 CD7CD7          17      CALL    CAP3
000539 CBD9 3807            12      JR  C,P_N2
00053B CBDB CDFECF          17      CALL    MSG_A
00053E CBDE 23               6      INC HL
00053F CBDF 10F4            13      DJNZ    P_N1
000541 CBE1 C9              10      RET
       CBE2                     P_N2:
000542 CBE2 23               6      INC HL
000543 CBE3 10FD            13      DJNZ    P_N2
000545 CBE5 C9              10      RET
                                
       CBE6                     SETFCB:
000546 CBE6 CD30D5          17      CALL    SPCUT
000549 CBE9 1A               7      LD  A,(DE)
00054A CBEA FE20             7      CP  020H
00054C CBEC 3801            12      JR  C,SETFCBA
00054E CBEE 1B               6      DEC DE
       CBEF                     SETFCBA:
00054F CBEF 0624             7      LD  B,36
000551 CBF1 215C00          10      LD  HL,FCB1
000554 CBF4 E5              11      PUSH    HL
000555 CBF5 AF               4      XOR A
000556 CBF6 CD05D5          17      CALL    FILL_MEMORY
000559 CBF9 E1              10      POP HL
00055A CBFA D5              11      PUSH    DE
00055B CBFB CDA2CF          17      CALL    _SYS29      ;(BDOS)ファイル名の解析
00055E CBFE 216C00          10      LD  HL,FCB2
000561 CC01 CDA2CF          17      CALL    _SYS29      ;(BDOS)ファイル名の解析
000564 CC04 E1              10      POP HL
000565 CC05 010050          10      LD  BC,05000H
000568 CC08 118100          10      LD  DE,00081H
       CC0B                     SETFCB1:
00056B CC0B 7E               7      LD  A,(HL)
00056C CC0C 23               6      INC HL
00056D CC0D FE20             7      CP  020H
00056F CC0F 3805            12      JR  C,SETFCB2
000571 CC11 12               7      LD  (DE),A
000572 CC12 13               6      INC DE
000573 CC13 0C               4      INC C
000574 CC14 10F5            13      DJNZ    SETFCB1
       CC16                     SETFCB2:
000576 CC16 79               4      LD  A,C
000577 CC17 328000          13      LD  (DTA1),A
00057A CC1A 04               4      INC B
       CC1B                     ZERO_MEMORY_DE:
00057B CC1B AF               4      XOR A
       CC1C                     FILL_MEMORY_DE:
00057C CC1C 12               7      LD  (DE),A
00057D CC1D 13               6      INC DE
00057E CC1E 10FC            13      DJNZ    FILL_MEMORY_DE
000580 CC20 C9              10      RET
                                
       CC21                     C_COPY:
000581 CC21 CDE6CB          17      CALL    SETFCB
                                
000584 CC24 1161E4          10      LD  DE,ZERO
000587 CC27 CD51D4          17      CALL    FILEC2
00058A CC2A 216C00          10      LD  HL,FCB2
00058D CC2D CDA9CF          17      CALL    S29X1
                                
000590 CC30 3E10             7      LD  A,010H
000592 CC32 326900          13      LD  (FCB1+13),A
000595 CC35 216D00          10      LD  HL,FCB2+1
000598 CC38 CDFCCC          17      CALL    CWILD1
       CC3B                     COPY0:
00059B CC3B CDF9CC          17      CALL    CWILD
00059E CC3E 215C00          10      LD  HL,FCB1
0005A1 CC41 CDA5C9          17      CALL    OPEN
0005A4 CC44 37               4      SCF
       CC45                     COPY1:
0005A5 CC45 C0              11      RET NZ
0005A6 CC46 CDB8C9          17      CALL    DEFCB
                                
0005A9 CC49 3A22E3          13      LD  A,(DTA_CCP+13)
0005AC CC4C CB67             8      BIT 4,A
0005AE CC4E 2821            12      JR  Z,COPY1A
                                
0005B0 CC50 215D00          10      LD  HL,FCB1+1
0005B3 CC53 CD94D8          17      CALL    CHKWILD
0005B6 CC56 3814            12      JR  C,COPY9
                                
0005B8 CC58 3E20             7      LD  A,020H
0005BA CC5A 325D00          13      LD  (FCB1+1),A
0005BD CC5D 2A2FE3          16      LD  HL,(DTA_CCP+26)
0005C0 CC60 23               6      INC HL
0005C1 CC61 226A00          16      LD  (FCB1+14),HL
0005C4 CC64 18D5            12      JR  COPY0
                                
       CC66                     COPY8:
0005C6 CC66 CD69CD          17      CALL    _SYS09      ;(BDOS)文字列出力
0005C9 CC69 CD4DCB          17      CALL    LTNL
       CC6C                     COPY9:
0005CC CC6C CDB4C9          17      CALL    OPEN2
0005CF CC6F 18D4            12      JR  COPY1
                                
       CC71                     COPY1A:
0005D1 CC71 216C00          10      LD  HL,FCB2
0005D4 CC74 1114E4          10      LD  DE,FDRV
0005D7 CC77 0117E3          10      LD  BC,DTA_CCP+2
0005DA CC7A EDA0            16      LDI
0005DC CC7C 3E0B             7      LD  A,11
       CC7E                     COPY2:
0005DE CC7E F5              11      PUSH    AF
0005DF CC7F 7E               7      LD  A,(HL)
0005E0 CC80 FE3F             7      CP  '?'
0005E2 CC82 2001            12      JR  NZ,COPY3
0005E4 CC84 0A               7      LD  A,(BC)
       CC85                     COPY3:
0005E5 CC85 12               7      LD  (DE),A
0005E6 CC86 03               6      INC BC
0005E7 CC87 13               6      INC DE
0005E8 CC88 23               6      INC HL
0005E9 CC89 F1              10      POP AF
0005EA CC8A 3D               4      DEC A
0005EB CC8B 20F1            12      JR  NZ,COPY2
0005ED CC8D 010500          10      LD  BC,16-11
0005F0 CC90 EDB0                    LDIR
       CC92                     PUTNAME:
0005F2 CC92 215D00          10      LD  HL,FCB1+1
0005F5 CC95 CD94D8          17      CALL    CHKWILD
0005F8 CC98 300B            12      JR  NC,PUTN1
0005FA CC9A 2115E4          10      LD  HL,FDRV+1
0005FD CC9D CDC4CB          17      CALL    FPRNT
000600 CCA0 3E20             7      LD  A,020H
000602 CCA2 CDFECF          17      CALL    MSG_A
       CCA5                     PUTN1:
000605 CCA5 1114E4          10      LD  DE,FDRV
000608 CCA8 0E16             7      LD  C,016H      ;(BDOS)ファイルの作成
00060A CCAA CDD3C9          17      CALL    SYSTEM0
00060D CCAD 2048            12      JR  NZ,COPYE2
00060F CCAF 67               4      LD  H,A     ;A=0
000610 CCB0 6F               4      LD  L,A
000611 CCB1 2235E4          16      LD  (FDRV+33),HL    ;(FCB)ランダムレコード
000614 CCB4 2237E4          16      LD  (FDRV+35),HL
       CCB7                     COPY6:
000617 CCB7 CDDCC9          17      CALL    S27BUF
00061A CCBA 47               4      LD  B,A
00061B CCBB 3C               4      INC A
00061C CCBC 2831            12      JR  Z,COPYE
00061E CCBE 7C               4      LD  A,H
00061F CCBF B5               4      OR  L
000620 CCC0 280C            12      JR  Z,COPY7
000622 CCC2 1114E4          10      LD  DE,FDRV
000625 CCC5 0E26             7      LD  C,026H      ;(BDOS)ランダムブロック書き込み
000627 CCC7 CDD3C9          17      CALL    SYSTEM0
00062A CCCA 2023            12      JR  NZ,COPYE
00062C CCCC 10E9            13      DJNZ    COPY6
       CCCE                     COPY7:
00062E CCCE 3A22E3          13      LD  A,(DTA_CCP+13)  ;(FCB)属性
000631 CCD1 3221E4          13      LD  (FDRV+13),A
000634 CCD4 2129E3          10      LD  HL,DTA_CCP+20   ;(FCB)タイムスタンプ
000637 CCD7 1128E4          10      LD  DE,FDRV+20
00063A CCDA 010400          10      LD  BC,4
00063D CCDD EDB0                    LDIR
                                
00063F CCDF 1114E4          10      LD  DE,FDRV
000642 CCE2 0E10             7      LD  C,010H      ;(BDOS)ファイルのクローズ
000644 CCE4 CDD3C9          17      CALL    SYSTEM0
000647 CCE7 2006            12      JR  NZ,COPYE
                                
000649 CCE9 1171E4          10      LD  DE,OK
00064C CCEC C366CC          10      JP  COPY8
                                
       CCEF                     COPYE:
00064F CCEF 1114E4          10      LD  DE,FDRV
000652 CCF2 0E13             7      LD  C,013H      ;(BDOS)ファイルの削除
000654 CCF4 CD0500          17      CALL    SYSTEM
       CCF7                     COPYE2:
000657 CCF7 37               4      SCF
000658 CCF8 C9              10      RET
                                
       CCF9                     CWILD:
000659 CCF9 215D00          10      LD  HL,FCB1+1
       CCFC                     CWILD1:
00065C CCFC 7E               7      LD  A,(HL)
00065D CCFD FE20             7      CP  020H
00065F CCFF C0              11      RET NZ
       CD00                     CWILD2:
000660 CD00 3E3F             7      LD  A,'?'
000662 CD02 060B             7      LD  B,11
000664 CD04 C305D5          10      JP  FILL_MEMORY
                                
       CD07                     COMTB:
000667 CD07 44202020                DB  "D   "  ;1
00066B CD0B BBCA                    DW  C_DIR
00066D CD0D 44495220                DB  "DIR "  ;2
000671 CD11 BBCA                    DW  C_DIR
000673 CD13 434F5059                DB  "COPY"  ;3
000677 CD17 21CC                    DW  C_COPY
000679 CD19 43442020                DB  "CD  "  ;4
00067D CD1D D8C9                    DW  C_CD
00067F CD1F 44454C20                DB  "DEL "  ;5
000683 CD23 9ECA                    DW  C_DEL
000685 CD25 50415448                DB  "PATH"  ;6
000689 CD29 52CB                    DW  C_PATH
00068B CD2B 52454E20                DB  "REN "  ;7
00068F CD2F A8CA                    DW  C_REN
000691 CD31 52454D20                DB  "REM "  ;8
000695 CD35 66CD                    DW  C_REM
[EOF:LDCCP.ASM:SHIFT_JIS]
                                    INCLUDE "LDOS.ASM"
                                
                                ;   LSX-Dodgers OS
                                
       CD37                     BDOS0:
000697 CD37 E5              11      PUSH    HL
000698 CD38 79               4      LD  A,C
000699 CD39 FE3C             7      CP  03CH
00069B CD3B 3802            12      JR  C,DOS1
00069D CD3D 3E3C             7      LD  A,03CH
       CD3F                     DOS1:
00069F CD3F 87               4      ADD A,A
0006A0 CD40 6F               4      LD  L,A
0006A1 CD41 26E5             7      LD  H,STABLE/256
0006A3 CD43 7E               7      LD  A,(HL)
0006A4 CD44 2C               4      INC L
0006A5 CD45 66               7      LD  H,(HL)
0006A6 CD46 6F               4      LD  L,A
0006A7 CD47 E3              19      EX  (SP),HL
0006A8 CD48 79               4      LD  A,C
                                ;確認用
                                ;   LD  (0050H),A
0006A9 CD49 C9              10      RET
       CD4A                     _DOS2:
0006AA CD4A FE5A             7      CP  05AH        ;(BDOS)カレントディレクトリの変更(_CHDIR)
0006AC CD4C CAE4CF          10      JP  Z,_SYS5A
0006AF CD4F FE5C             7      CP  05CH        ;(BDOS)ファイル名の解析(_PFILE)
0006B1 CD51 CAA2CF          10      JP  Z,_SYS29
0006B4 CD54 FE5F             7      CP  05FH        ;(BDOS)ディスクバッファのフラッシュ(_FLUSH)
0006B6 CD56 CAA1E1          10      JP  Z,_SYS5F
0006B9 CD59 FE6F             7      CP  06FH        ;(BDOS)MSX-DOS のバージョン番号の獲得(_DOSVER)
0006BB CD5B 200A            12      JR  NZ,_ERROR
0006BD CD5D 011D00          10      LD  BC,VER_6F
0006C0 CD60 115901          10      LD  DE,VER
0006C3 CD63 210301          10      LD  HL,MACD
       CD66                     C_REM:
0006C6 CD66 AF               4      XOR A
       CD67                     _ERROR:
0006C7 CD67 A7               4      AND A
0006C8 CD68 C9              10      RET
                                
       CD69                     _SYS09:     ;文字列出力
0006C9 CD69 D5              11      PUSH    DE
       CD6A                     _SX09:
0006CA CD6A 1A               7      LD  A,(DE)
0006CB CD6B 13               6      INC DE
0006CC CD6C FE24             7      CP  '$'
0006CE CD6E 2831            12      JR  Z,SX0E2
0006D0 CD70 CDFECF          17      CALL    MSG_A
0006D3 CD73 18F5            12      JR  _SX09
                                
       CD75                     MSX1:
0006D5 CD75 CDFECF          17      CALL    MSG_A
       CD78                     MSX:
0006D8 CD78 7E               7      LD  A,(HL)
0006D9 CD79 23               6      INC HL
0006DA CD7A B7               4      OR  A
0006DB CD7B 20F8            12      JR  NZ,MSX1
0006DD CD7D C9              10      RET
                                
       CD7E                     _SYS0C:     ;(BDOS)バージョン番号の獲得
0006DE CD7E 212200          10      LD  HL,00022H
0006E1 CD81 7D               4      LD  A,L
0006E2 CD82 C9              10      RET
                                
       CD83                     _SYS0D:     ;(BDOS)ディスクリセット
0006E3 CD83 CDDFE4          17      CALL    _FFLUSH
0006E6 CD86 E5              11      PUSH    HL
0006E7 CD87 218000          10      LD  HL,00080H
0006EA CD8A 228AE4          16      LD  (_DTA),HL
0006ED CD8D E1              10      POP HL
0006EE CD8E D5              11      PUSH    DE
0006EF CD8F 1E00             7      LD  E,0
0006F1 CD91 3E                      DB  03EH    ;次の PUSH DE をスキップ
                                
       CD92                     _SYS0E:     ;(BDOS)カレントドライブの設定
0006F2 CD92 D5              11      PUSH    DE
0006F3 CD93 7B               4      LD  A,E
0006F4 CD94 DDE5            15      PUSH    IX
0006F6 CD96 CDDCE4          17      CALL    _GETDPB
0006F9 CD99 DDE1            14      POP IX
0006FB CD9B 3804            12      JR  C,SX0E2
0006FD CD9D 7B               4      LD  A,E
0006FE CD9E 3287E4          13      LD  (_DVSW),A
       CDA1                     SX0E2:
000701 CDA1 D1              10      POP DE
000702 CDA2 C9              10      RET
                                
       CDA3                     _SYS0F:     ;(BDOS)ファイルのオープン
000703 CDA3 CD42D5          17      CALL    SETDRV
000706 CDA6 FD7E1C          19      LD  A,(IY+28)   ;(FCB)オープンモード
000709 CDA9 C602             7      ADD A,002H      ;Write
00070B CDAB 2848            12      JR  Z,FEND0F
00070D CDAD CD90D8          17      CALL    CHKWILDX
                                
000710 CDB0 D46CD5          17      CALL    NC,SOPENX
       CDB3                     _S16XX:
000713 CDB3 3840            12      JR  C,FEND0F
                                                ;Directory location
000715 CDB5 3A9FE4          13      LD  A,(_FILEN)
000718 CDB8 FD7719          19      LD  (IY+25),A   ;(FCB)ディレクトリロケーション
                                ;               _DIRF
00071B CDBB 3AA0E4          13      LD  A,(_DIRF)
00071E CDBE FD771D          19      LD  (IY+29),A   ;(FCB)ディレクトリモード
                                ;               _FBPS
000721 CDC1 FD731E          19      LD  (IY+30),E   ;(FCB)ディレクトリポジション
000724 CDC4 FD721F          19      LD  (IY+31),D
                                ;               Open(Read)
000727 CDC7 FD361CFF        19      LD  (IY+28),0FFH    ;(FCB)オープンモード
                                ;               FILENAME
00072B CDCB FDE5            15      PUSH    IY
00072D CDCD D1              10      POP DE
00072E CDCE 13               6      INC DE
00072F CDCF 010B00          10      LD  BC,11
000732 CDD2 EDB0                    LDIR
                                ;               Attribute
000734 CDD4 7E               7      LD  A,(HL)
000735 CDD5 FD770D          19      LD  (IY+13),A   ;(FCB)属性(アトリビュート)
000738 CDD8 110B00          10      LD  DE,11       ;Reserved
00073B CDDB 19              11      ADD HL,DE
                                                    ;(FCB)ファイルを最後に変更した時刻
00073C CDDC 11E4E5          10      LD  DE,SDDATA       ;(FCB)ファイルを最後に変更した日付
00073F CDDF 060A             7      LD  B,SDDATAE-SDDATA    ;(FCB)ファイルの先頭クラスタ
       CDE1                     S16LOOP:                ;(FCB)ファイルのサイズ(バイト単位)
000741 CDE1 1A               7      LD  A,(DE)
000742 CDE2 13               6      INC DE
000743 CDE3 32EACD          13      LD  (S16PAT),A
000746 CDE6 7E               7      LD  A,(HL)
000747 CDE7 23               6      INC HL
000748 CDE8 FD7700          19      LD  (IY+0),A
       CDEA                     S16PAT  EQU $-1
00074B CDEB 10F4            13      DJNZ    S16LOOP
                                
00074D CDED AF               4      XOR A
00074E CDEE FD770C          19      LD  (IY+12),A   ;(FCB)カレントブロック
000751 CDF1 FD2292CE        20      LD  (OFCB_SWC),IY
       CDF5                     FEND0F:
000755 CDF5 1845            12      JR  FEND10
                                
       CDF7                     _SYS10:     ;(BDOS)ファイルのクローズ
000757 CDF7 CD42D5          17      CALL    SETDRV
00075A CDFA FD7E1C          19      LD  A,(IY+28)   ;(FCB)オープンモード
00075D CDFD D6FE             7      SUB 0FEH
00075F CDFF 37               4      SCF
000760 CE00 3F               4      CCF
000761 CE01 2039            12      JR  NZ,FEND10
       CE03                     _S10A:              ;Write
000763 CE03 FD770E          19      LD  (IY+14),A   ;(FCB)レコードサイズ/アクセスするディレクトリのクラスタ番号+1
000766 CE06 FD770F          19      LD  (IY+15),A
                                
000769 CE09 FD341C          23      INC (IY+28)     ;(FCB)オープンモード 0FEH->0FFH
00076C CE0C CD8CD9          17      CALL    SETTMS
                                
00076F CE0F FD7E1D          19      LD  A,(IY+29)   ;(FCB)ディレクトリモード
000772 CE12 32A0E4          13      LD  (_DIRF),A
000775 CE15 E67F             7      AND 07FH
000777 CE17 32B7DE          13      LD  (_SECPS),A
00077A CE1A FD5E1E          19      LD  E,(IY+30)   ;(FCB)ディレクトリポジション
00077D CE1D FD561F          19      LD  D,(IY+31)
000780 CE20 CDA1D6          17      CALL    READ_DIR
000783 CE23 3817            12      JR  C,FEND10
                                
000785 CE25 3ACCD5          13  SDECM1: LD  A,(SDECPAT) ;1セクタ辺りのディレクトリエントリ数
000788 CE28 3D               4      DEC A       ;1024=01FH / 512=00FH / 256=7
000789 CE29 FDA619          19      AND (IY+25)     ;(FCB)ディレクトリロケーション
00078C CE2C 6F               4      LD  L,A
00078D CE2D 2600             7      LD  H,0
00078F CE2F 29              11      ADD HL,HL       ;*2
000790 CE30 29              11      ADD HL,HL       ;*4
000791 CE31 29              11      ADD HL,HL       ;*8
000792 CE32 29              11      ADD HL,HL       ;*16
000793 CE33 29              11      ADD HL,HL       ;*32
000794 CE34 ED4B7EE5        20      LD  BC,(_DTBUF)
000798 CE38 09              11      ADD HL,BC
                                
000799 CE39 CDA0D8          17      CALL    SDIRENT
       CE3C                     FEND10:
00079C CE3C 1842            12      JR  FEND
                                
       CE3E                     _SYS11:     ;(BDOS)最初のファイルの検索
00079E CE3E CD42D5          17      CALL    SETDRV
0007A1 CE41 CD9BD5          17      CALL    SOPEN
       CE44                     _S12X1:
0007A4 CE44 383A            12      JR  C,FEND
0007A6 CE46 CD3AD6          17      CALL    SOPENE2
0007A9 CE49 ED5B8AE4        20      LD  DE,(_DTA)
0007AD CE4D 3A88E4          13      LD  A,(_DRV)
0007B0 CE50 3C               4      INC A
0007B1 CE51 12               7      LD  (DE),A
0007B2 CE52 D5              11      PUSH    DE
0007B3 CE53 13               6      INC DE
0007B4 CE54 012000          10      LD  BC,32
0007B7 CE57 EDB0                    LDIR
0007B9 CE59 FD6E0E          19      LD  L,(IY+14)   ;(FCB)レコードサイズ/アクセスするディレクトリのクラスタ番号+1
0007BC CE5C FD660F          19      LD  H,(IY+15)
0007BF CE5F 22F4E5          16      LD  (SCDIR),HL
0007C2 CE62 2A9AE4          16      LD  HL,(_FBPS)
0007C5 CE65 22F6E5          16      LD  (SFBPS),HL
0007C8 CE68 2A9FE4          16      LD  HL,(_FILEN)
0007CB CE6B 7C               4      LD  A,H
0007CC CE6C B7               4      OR  A
0007CD CE6D 2806            12      JR  Z,_S12DIR
0007CF CE6F 3AB7DE          13      LD  A,(_SECPS)
0007D2 CE72 F680             7      OR  080H
0007D4 CE74 67               4      LD  H,A
       CE75                     _S12DIR:
0007D5 CE75 22F8E5          16      LD  (SFNDF),HL  ;Directory position and Flags
0007D8 CE78 E1              10      POP HL
0007D9 CE79 1139E4          10      LD  DE,SFILE
0007DC CE7C 0E21             7      LD  C,33
       CE7E                     _S11B:
0007DE CE7E EDB0                    LDIR
       CE80                     FEND:
0007E0 CE80 9F               4      SBC A,A     ;CF=0 A=0 : CF=1 A=0FFH
       CE81                     FENDE:
0007E1 CE81 FDE1            14      POP IY
0007E3 CE83 C1              10      POP BC
0007E4 CE84 D1              10      POP DE
0007E5 CE85 E1              10      POP HL
0007E6 CE86 C9              10      RET
                                
       CE87                     _SYS12:     ;(BDOS)次のファイルの検索
0007E7 CE87 E5              11      PUSH    HL
0007E8 CE88 D5              11      PUSH    DE
0007E9 CE89 C5              11      PUSH    BC
0007EA CE8A FDE5            15      PUSH    IY
0007EC CE8C CDFFD5          17      CALL    NOPEN
0007EF CE8F 18B3            12      JR  _S12X1
                                
       CE91                     _S16K:
0007F1 CE91 110000          10      LD  DE,0
       CE92                     OFCB_SWC    EQU $-2
0007F4 CE94 D5              11      PUSH    DE
0007F5 CE95 061A             7      LD  B,26        ;First cluster
       CE97                     S16K1:
0007F7 CE97 13               6      INC DE
0007F8 CE98 23               6      INC HL
0007F9 CE99 10FC            13      DJNZ    S16K1
                                
0007FB CE9B 1A               7      LD  A,(DE)
0007FC CE9C BE               7      CP  (HL)
0007FD CE9D 2015            12      JR  NZ,S16K2
0007FF CE9F 13               6      INC DE
000800 CEA0 23               6      INC HL
000801 CEA1 1A               7      LD  A,(DE)
000802 CEA2 BE               7      CP  (HL)
000803 CEA3 200F            12      JR  NZ,S16K2
                                
000805 CEA5 E1              10      POP HL
000806 CEA6 FDE5            15      PUSH    IY
000808 CEA8 D1              10      POP DE
000809 CEA9 7E               7      LD  A,(HL)
00080A CEAA CD57D5          17      CALL    IS_SAME_DRV_A_DE
00080D CEAD 2006            12      JR  NZ,S16K3
                                                ;ここはCFが必ず0
00080F CEAF ED52            15      SBC HL,DE       ;CP HL,DE
000811 CEB1 37               4      SCF
000812 CEB2 C0              11      RET NZ
000813 CEB3 E5              11      PUSH    HL
       CEB4                     S16K2:
000814 CEB4 E1              10      POP HL
       CEB5                     S16K3:
000815 CEB5 FDE5            15      PUSH    IY
000817 CEB7 D1              10      POP DE
       CEB8                     _SYS13:     ;(BDOS)ファイルの削除
000818 CEB8 CD42D5          17      CALL    SETDRV
00081B CEBB CDC6D7          17      CALL    KILL
       CEBE                     FEND13:
00081E CEBE 18C0            12      JR  FEND
                                
       CEC0                     _SYS14:     ;(BDOS)シーケンシャルな読み出し
000820 CEC0 CD42D5          17      CALL    SETDRV
000823 CEC3 CDF8D9          17      CALL    INIT_SEQ
       CEC6                     SREAD:
000826 CEC6 CD40DA          17      CALL    RB_READ
                                
000829 CEC9 C601             7      ADD A,001H
00082B CECB 38B3            12      JR  C,FEND
                                
00082D CECD 7D               4      LD  A,L
00082E CECE D601             7      SUB 001H
       CED0                     FENDX:
000830 CED0 9F               4      SBC A,A
000831 CED1 E603             7      AND 3
000833 CED3 1F               4      RRA
000834 CED4 18AB            12      JR  FENDE
                                
       CED6                     _SYS15:     ;(BDOS)シーケンシャルな書き込み
000836 CED6 CD42D5          17      CALL    SETDRV
000839 CED9 CDF8D9          17      CALL    INIT_SEQ
       CEDC                     SWRITE:
00083C CEDC CD39DA          17      CALL    RB_WRITE
                                
00083F CEDF C6FF             7      ADD A,0FFH
000841 CEE1 18ED            12      JR  FENDX
                                
       CEE3                     _SYS17:     ;(BDOS)ファイル名の変更
000843 CEE3 CD42D5          17      CALL    SETDRV
000846 CEE6 CD1CD8          17      CALL    NAME
000849 CEE9 18D3            12      JR  FEND13
                                
       CEEB                     _SYS16:     ;(BDOS)ファイルの作成
00084B CEEB CD42D5          17      CALL    SETDRV
                                
00084E CEEE CD90D8          17      CALL    CHKWILDX
000851 CEF1 38CB            12      JR  C,FEND13
000853 CEF3 FD7E01          19      LD  A,(IY+1)    ;(FCB)主ファイル名
000856 CEF6 FE05             7      CP  5
000858 CEF8 2805            12      JR  Z,_S16X2
00085A CEFA FE21             7      CP  021H
00085C CEFC DABECE          10      JP  C,FEND13
       CEFF                     _S16X2:
                                ;               Clear FCB
00085F CEFF FDE5            15      PUSH    IY
000861 CF01 E1              10      POP HL
000862 CF02 011000          10      LD  BC,16
000865 CF05 09              11      ADD HL,BC
       CF06                     _S16X1:
000866 CF06 70               7      LD  (HL),B      ;B=0
000867 CF07 23               6      INC HL
000868 CF08 0D               4      DEC C
000869 CF09 20FB            12      JR  NZ,_S16X1
                                
00086B CF0B CD91D9          17      CALL    SETTMSX
00086E CF0E FD360DFF        19      LD  (IY+13),0FFH    ;(FCB)Attribute
000872 CF12 CD6CD5          17      CALL    SOPENX
000875 CF15 3F               4      CCF
000876 CF16 CC91CE          17      CALL    Z,_S16K
000879 CF19 D44BD6          17      CALL    NC,COPEN
00087C CF1C D4A0D8          17      CALL    NC,SDIRENT
00087F CF1F C3B3CD          10      JP  _S16XX
                                
       CF22                     _SYS21:     ;(BDOS)ランダムな読み出し
000882 CF22 CD42D5          17      CALL    SETDRV
000885 CF25 CDDCD9          17      CALL    INIT_RND
000888 CF28 189C            12      JR  SREAD
                                
       CF2A                     _SYS22:     ;(BDOS)ランダムな書き込み
       CF2A                     _SYS28:     ;(BDOS)ランダムな書き込み・その2
00088A CF2A CD42D5          17      CALL    SETDRV
00088D CF2D CDDCD9          17      CALL    INIT_RND
000890 CF30 18AA            12      JR  SWRITE
                                
       CF32                     _SYS18:     ;(BDOS)ログインベクトルの獲得
000892 CF32 21FF00          10      LD  HL,000FFH
000895 CF35 AF               4      XOR A
000896 CF36 C9              10      RET
                                
       CF37                     _SYS19:     ;(BDOS)カレントドライブ番号の獲得
000897 CF37 3A87E4          13      LD  A,(_DVSW)
00089A CF3A A7               4      AND A
00089B CF3B C9              10      RET
                                
       CF3C                     _SYS1A:     ;(BDOS)DTAの設定
00089C CF3C ED538AE4        20      LD  (_DTA),DE
0008A0 CF40 AF               4      XOR A
0008A1 CF41 C9              10      RET
                                
       CF42                     _SYS1B:     ;(BDOS)ディスク情報の獲得
0008A2 CF42 7B               4      LD  A,E
0008A3 CF43 CD50D5          17      CALL    GETDRV
0008A6 CF46 CDDCE4          17      CALL    _GETDPB
0008A9 CF49 D4E2E4          17      CALL    NC,_RDFATX
0008AC CF4C 210000          10      LD  HL,0
0008AF CF4F D46AD9          17      CALL    NC,DSKF
                                
0008B2 CF52 ED5B6BD9        20      LD  DE,(MAXCLP) ;DPB_MAXCL-1
0008B6 CF56 1B               6      DEC DE      ;DE←クラスタの総数
0008B7 CF57 FD2A7CE5        20      LD  IY,(_FATBF) ;IY←メモリ上のFATの先頭アドレス
0008BB CF5B 9F               4      SBC A,A
0008BC CF5C D8              11      RET C
0008BD CF5D 4F               4      LD  C,A     ;C=0
0008BE CF5E DD7E0F          19      LD  A,(IX+DPB_BPS)
0008C1 CF61 E607             7      AND 7
0008C3 CF63 47               4      LD  B,A
0008C4 CF64 DD7E07          19      LD  A,(IX+DPB_SECPCL)
0008C7 CF67 C9              10      RET
                                
       CF68                     _SYS1D:     ;(BDOS)書き込みが禁止されているディスクの調査
0008C8 CF68 AF               4      XOR A
0008C9 CF69 67               4      LD  H,A
0008CA CF6A 6F               4      LD  L,A
0008CB CF6B C9              10      RET
                                
       CF6C                     _SYS1F:     ;(BDOS)ディスク装置のパラメータの読み出し
0008CC CF6C 2100E6          10      LD  HL,_DEVICE
0008CF CF6F 7B               4      LD  A,E
0008D0 CF70 C3DCE4          10      JP  _GETDPB
                                
       CF73                     _SYS23:     ;(BDOS)ファイルサイズの獲得
0008D3 CF73 E5              11      PUSH    HL
0008D4 CF74 2A1EE5          16      LD  HL,(STABLE+2*00FH)  ;ファイルのオープン
0008D7 CF77 CD0F00          17      CALL    JP_HL
0008DA CF7A 381B            12      JR  C,_S23X1
                                
0008DC CF7C D5              11      PUSH    DE      ;EX DE,IY
0008DD CF7D FDE3            23      EX  (SP),IY     ;
                                ;   POP DE      ;
                                ;   PUSH    DE      ;DEを破壊しないように注意vv
0008DF CF7F FD7E10          19      LD  A,(IY+16)   ;(FCB)ファイルのサイズ(バイト単位)
0008E2 CF82 FD6E11          19      LD  L,(IY+17)   ;
0008E5 CF85 FD6612          19      LD  H,(IY+18)   ;
0008E8 CF88 C5              11      PUSH    BC      ;
0008E9 CF89 FD4613          19      LD  B,(IY+19)   ;
0008EC CF8C CDCED9          17      CALL    GET_CPM_R_SIZE
0008EF CF8F C1              10      POP BC
       CF90                     _S24X1:
0008F0 CF90 CDEED9          17      CALL    SET_RR_AHL
                                ;   POP DE      ;^^^^^^^^^^^^^^^^^^^^^^^^
                                ;   PUSH    DE      ;EX DE,IY
0008F3 CF93 FDE3            23      EX  (SP),IY     ;
0008F5 CF95 D1              10      POP DE      ;
                                
0008F6 CF96 AF               4      XOR A
       CF97                     _S23X1:
0008F7 CF97 E1              10      POP HL
0008F8 CF98 C9              10      RET
                                
       CF99                     _SYS24:     ;(BDOS)ランダムレコードフィールドの設定
0008F9 CF99 E5              11      PUSH    HL
0008FA CF9A D5              11      PUSH    DE      ;EX DE,IY
0008FB CF9B FDE3            23      EX  (SP),IY     ;
                                ;   POP DE      ;
                                ;   PUSH    DE      ;DEを破壊しないように注意vv
0008FD CF9D CD00DA          17      CALL    GETSEQ
000900 CFA0 18EE            12      JR  _S24X1      ;^^^^^^^^^^^^^^^^^^^^^^^^
                                
       CFA2                     _SYS29:     ;(BDOS)ファイル名の解析(_PPATH)
000902 CFA2 C5              11      PUSH    BC
000903 CFA3 E5              11      PUSH    HL
000904 CFA4 CD59D4          17      CALL    FILE
000907 CFA7 E1              10      POP HL
000908 CFA8 C1              10      POP BC
       CFA9                     S29X1:
000909 CFA9 C5              11      PUSH    BC
00090A CFAA D5              11      PUSH    DE
00090B CFAB E5              11      PUSH    HL
00090C CFAC EB               4      EX  DE,HL
00090D CFAD AF               4      XOR A
00090E CFAE 3221E4          13      LD  (FDRV+13),A
000911 CFB1 2114E4          10      LD  HL,FDRV
000914 CFB4 011000          10      LD  BC,16
000917 CFB7 EDB0                    LDIR
000919 CFB9 E1              10      POP HL
00091A CFBA D1              10      POP DE
00091B CFBB C1              10      POP BC
00091C CFBC C9              10      RET
                                
       CFBD                     _SYS30:     ;(BDOS)論理セクタを用いた書き込み
00091D CFBD C5              11      PUSH    BC
00091E CFBE 0151E0          10      LD  BC,DWT24B
000921 CFC1 1804            12      JR  S2FX
       CFC3                     _SYS2F:
000923 CFC3 C5              11      PUSH    BC
000924 CFC4 0141E0          10      LD  BC,DRD24B
       CFC7                     S2FX:
000927 CFC7 ED43DDCF        20      LD  (S2FPAT+1),BC
00092B CFCB CDDFE4          17      CALL    _FFLUSH
                                
00092E CFCE D5              11      PUSH    DE
00092F CFCF E5              11      PUSH    HL
000930 CFD0 7D               4      LD  A,L     ;Drive
000931 CFD1 CDD9E4          17      CALL    _CHGDRV
000934 CFD4 3809            12      JR  C,S30X2
000936 CFD6 44               4      LD  B,H     ;Number of clusters
000937 CFD7 2A8AE4          16      LD  HL,(_DTA)
                                
00093A CFDA 0E00             7      LD  C,0
00093C CFDC CD41E0          17  S2FPAT: CALL    DRD24B
       CFDF                     S30X2:
00093F CFDF E1              10      POP HL
000940 CFE0 D1              10      POP DE
000941 CFE1 C1              10      POP BC
000942 CFE2 9F               4      SBC A,A
000943 CFE3 C9              10      RET
                                
       CFE4                     _SYS5A:     ;(BDOS)カレントディレクトリの変更
000944 CFE4 C5              11      PUSH    BC
000945 CFE5 D5              11      PUSH    DE
000946 CFE6 E5              11      PUSH    HL
000947 CFE7 CD4ED4          17      CALL    FILEC
00094A CFEA 210000          10      LD  HL,0
00094D CFED 1114E4          10      LD  DE,FDRV
000950 CFF0 2A4EE5          16      LD  HL,(STABLE+2*027H)  ;ランダムブロック読み込み
000953 CFF3 CD0F00          17      CALL    JP_HL
000956 CFF6 18E7            12      JR  S30X2
[EOF:LDOS.ASM:SHIFT_JIS]
                                    INCLUDE "MSXIO.ASM"
                                
                                ;   LSX-Dodgers IO
                                ;   MSX
                                
       CD67                     _SYS04  EQU _ERROR      ;(BDOS)外部出力
       CD67                     _SYS05  EQU _ERROR      ;(BDOS)プリンタ出力
       CD67                     _SYS1C  EQU _ERROR      ;(BDOS)ディスクの書き込み禁止化
       CD67                     _SYS1E  EQU _ERROR      ;(BDOS)ファイル属性の設定
       CD67                     _SYS20  EQU _ERROR      ;(BDOS)利用者番号の設定と読み出し
       CD67                     _SYS2E  EQU _ERROR      ;(BDOS)ベリファイ・フラグの設定
                                
       0000                     INT EQU 0
       0000                     INTCTCE EQU 0
       0000                     INTCTC2 EQU 0
                                
       0000                     CTRL00  EQU 0
       0000                     CTRL03  EQU 0
       0000                     CTRL04  EQU 0
       0000                     CTRL05  EQU 0
       0000                     CTRL06  EQU 0
       0000                     CTRL07  EQU 0
       0000                     CTRL08  EQU 0
       0000                     CTRL09  EQU 0
       0000                     CTRL0A  EQU 0
       0000                     CTRL0B  EQU 0
       0000                     CTRL0C  EQU 0
       0000                     CTRL0D  EQU 0
       0000                     CTRL0E  EQU 0
       0000                     CTRL12  EQU 0
       0000                     CTRL1B  EQU 0
       0000                     CTRL1C  EQU 0
       0000                     CTRL1D  EQU 0
       0000                     CTRL1E  EQU 0
       0000                     CTRL1F  EQU 0
                                
       CFF8                     PRINT:
000958 CFF8 7B               4      LD  A,E
000959 CFF9 1803            12      JR  MSG_A
                                
       CFFB                     _SYS01:     ;(BDOS)コンソール入力
00095B CFFB CD09E4          17      CALL    _SYS07
       CFFE                     MSG_A:
00095E CFFE FE03             7      CP  3
000960 D000 2814            12      JR  Z,MSG_BR
       D002                     MSGA1:
000962 D002 F5              11      PUSH    AF
000963 D003 C5              11      PUSH    BC
000964 D004 D5              11      PUSH    DE
000965 D005 E5              11      PUSH    HL
000966 D006 DDE5            15      PUSH    IX
000968 D008 DD21A200        14      LD  IX,CHPUT
00096C D00C CD11D2          17      CALL    CALSLT_R
00096F D00F DDE1            14      POP IX
000971 D011 E1              10      POP HL
000972 D012 D1              10      POP DE
000973 D013 C1              10      POP BC
       D014                     MSGA2:
000974 D014 F1              10      POP AF
000975 D015 C9              10      RET
       D016                     MSG_BR:
000976 D016 F5              11      PUSH    AF
000977 D017 3ADDF3          13      LD  A,(CSRX)
00097A D01A FE02             7      CP  2
00097C D01C 38F6            12      JR  C,MSGA2
00097E D01E F1              10      POP AF
       D01F                     MSG_CR:
00097F D01F F5              11      PUSH    AF
000980 D020 3E0D             7      LD  A,00DH
000982 D022 CD02D0          17      CALL    MSGA1
000985 D025 3E0A             7      LD  A,00AH
000987 D027 CD02D0          17      CALL    MSGA1
00098A D02A F1              10      POP AF
00098B D02B C9              10      RET
                                
       D02C                     _SYS02:     ;(BDOS)コンソール出力
00098C D02C CD47D0          17      CALL    BREAK
00098F D02F 1805            12      JR  PRINTX
                                
       D031                     _SYS06:     ;(BDOS)コンソール直接入出力
000991 D031 7B               4      LD  A,E
000992 D032 3C               4      INC A
000993 D033 CACAE4          10      JP  Z,_INKEY
       D036                     PRINTX:
000996 D036 C3CDE4          10      JP  _PRINT
                                
       D039                     _SYS08:     ;(BDOS)エコーなしコンソール入力
000999 D039 CD09E4          17      CALL    _SYS07
00099C D03C FE03             7      CP  3
00099E D03E CCF4E4          17      CALL    Z,_BREAK
0009A1 D041 FE13             7      CP  013H        ;CTRL+S
0009A3 D043 C0              11      RET NZ
       D044                     PAUSE:
0009A4 D044 CD5ED0          17      CALL    KEYBC
                                
       D047                     BREAK:
0009A7 D047 F5              11      PUSH    AF
0009A8 D048 C5              11      PUSH    BC
0009A9 D049 D5              11      PUSH    DE
0009AA D04A E5              11      PUSH    HL
0009AB D04B DDE5            15      PUSH    IX
0009AD D04D DD21B700        14      LD  IX,BREAKX
0009B1 D051 CD11D2          17      CALL    CALSLT_R
0009B4 D054 DDE1            14      POP IX
0009B6 D056 E1              10      POP HL
0009B7 D057 D1              10      POP DE
0009B8 D058 C1              10      POP BC
0009B9 D059 DCF4E4          17      CALL    C,_BREAK
0009BC D05C F1              10      POP AF
0009BD D05D C9              10      RET
       D05E                     KEYBC:
0009BE D05E F5              11      PUSH    AF
0009BF D05F C5              11      PUSH    BC
0009C0 D060 D5              11      PUSH    DE
0009C1 D061 E5              11      PUSH    HL
0009C2 D062 DDE5            15      PUSH    IX
0009C4 D064 DD215601        14      LD  IX,KILBUF
0009C8 D068 CD11D2          17      CALL    CALSLT_R
0009CB D06B DDE1            14      POP IX
0009CD D06D E1              10      POP HL
0009CE D06E D1              10      POP DE
0009CF D06F C1              10      POP BC
0009D0 D070 F1              10      POP AF
0009D1 D071 C9              10      RET
       D072                     FLGET:
0009D2 D072 C5              11      PUSH    BC
0009D3 D073 D5              11      PUSH    DE
0009D4 D074 E5              11      PUSH    HL
0009D5 D075 DDE5            15      PUSH    IX
0009D7 D077 CDDFE4          17      CALL    _FFLUSH
0009DA D07A 181B            12      JR  FLGET1
       D07B                     CBIOS_SWC1  EQU $-1
0009DC D07C CDF9D1          17      CALL    GETVRAM
                                
0009DF D07F E5              11      PUSH    HL
0009E0 D080 DD214A00        14      LD  IX,RDVRM
0009E4 D084 CD11D2          17      CALL    CALSLT_R
0009E7 D087 E1              10      POP HL
0009E8 D088 32A3D0          13      LD  (SWCCHR),A
                                
0009EB D08B E5              11      PUSH    HL
0009EC D08C 3EFF             7      LD  A,0FFH
0009EE D08E DD214D00        14      LD  IX,WRTVRM
0009F2 D092 CD11D2          17      CALL    CALSLT_R
0009F5 D095 E1              10      POP HL
                                
0009F6 D096 E5              11      PUSH    HL
       D097                     FLGET1:
0009F7 D097 DD219F00        14      LD  IX,CHGET
0009FB D09B CD11D2          17      CALL    CALSLT_R
0009FE D09E 180C            12      JR  FLGET2
       D09F                     CBIOS_SWC2  EQU $-1
000A00 D0A0 E1              10      POP HL
                                
000A01 D0A1 F5              11      PUSH    AF
000A02 D0A2 3E00             7      LD  A,0
       D0A3                     SWCCHR  EQU $-1
000A04 D0A4 DD214D00        14      LD  IX,WRTVRM
000A08 D0A8 CD11D2          17      CALL    CALSLT_R
000A0B D0AB F1              10      POP AF
       D0AC                     FLGET2:
000A0C D0AC DDE1            14      POP IX
000A0E D0AE E1              10      POP HL
000A0F D0AF D1              10      POP DE
000A10 D0B0 C1              10      POP BC
000A11 D0B1 FE03             7      CP  3
000A13 D0B3 C0              11      RET NZ
000A14 D0B4 C300E4          10      JP  CPM_BOOT
                                
       D0B7                     INKEY:
000A17 D0B7 CD06E4          17      CALL    CPM_CONST
000A1A D0BA C8              11      RET Z
000A1B D0BB 18B5            12      JR  FLGET
                                
       D0BD                     _SYS0A:     ;(BDOS)文字列入力
000A1D D0BD C5              11      PUSH    BC
000A1E D0BE E5              11      PUSH    HL
000A1F D0BF D5              11      PUSH    DE
000A20 D0C0 CDE9D0          17      CALL    GETL
000A23 D0C3 111FF4          10      LD  DE,KBUF
000A26 D0C6 E1              10      POP HL
000A27 D0C7 E5              11      PUSH    HL
000A28 D0C8 0E00             7      LD  C,0
000A2A D0CA 3004            12      JR  NC,SAX0
000A2C D0CC 23               6      INC HL
000A2D D0CD 23               6      INC HL
000A2E D0CE 1808            12      JR  SAX4
       D0D0                     SAX0:
000A30 D0D0 46               7      LD  B,(HL)
000A31 D0D1 23               6      INC HL
       D0D2                     SAX1:
000A32 D0D2 23               6      INC HL
000A33 D0D3 1A               7      LD  A,(DE)
000A34 D0D4 13               6      INC DE
000A35 D0D5 B7               4      OR  A
000A36 D0D6 2004            12      JR  NZ,SAX2
       D0D8                     SAX4:
000A38 D0D8 360D            10      LD  (HL),00DH
000A3A D0DA 1804            12      JR  SAX3
       D0DC                     SAX2:
000A3C D0DC 77               7      LD  (HL),A
000A3D D0DD 0C               4      INC C
000A3E D0DE 10F2            13      DJNZ    SAX1
       D0E0                     SAX3:
000A40 D0E0 D1              10      POP DE
000A41 D0E1 79               4      LD  A,C
000A42 D0E2 13               6      INC DE
000A43 D0E3 12               7      LD  (DE),A
000A44 D0E4 1B               6      DEC DE
000A45 D0E5 E1              10      POP HL
000A46 D0E6 C1              10      POP BC
000A47 D0E7 A7               4      AND A
000A48 D0E8 C9              10      RET
       D0E9                     GETL:
000A49 D0E9 DDE5            15      PUSH    IX
000A4B D0EB FDE5            15      PUSH    IY
                                
000A4D D0ED 2ADCF3          16      LD  HL,(CSRY)
000A50 D0F0 22CAFB          16      LD  (FSTPOS),HL
       D0F3                     GETL1:
000A53 D0F3 CD39D0          17      CALL    _SYS08
000A56 D0F6 FE09             7      CP  9
000A58 D0F8 2008            12      JR  NZ,GETL1V
000A5A D0FA 211FF4          10      LD  HL,KBUF
000A5D D0FD CD78CD          17      CALL    MSX
000A60 D100 18F1            12      JR  GETL1
       D102                     GETL1V:
000A62 D102 5F               4      LD  E,A
000A63 D103 FE08             7      CP  8
000A65 D105 CC9FD1          17      CALL    Z,CTRL02
000A68 D108 FE20             7      CP  020H
000A6A D10A D4CBD1          17      CALL    NC,INSERT
000A6D D10D CD02D0          17      CALL    MSGA1
                                
000A70 D110 7B               4      LD  A,E
000A71 D111 FE0D             7      CP  00DH
000A73 D113 20DE            12      JR  NZ,GETL1
                                
000A75 D115 111FF4          10      LD  DE,KBUF
000A78 D118 3AB0F3          13      LD  A,(LINLEN)
000A7B D11B 47               4      LD  B,A
000A7C D11C CD1BCC          17      CALL    ZERO_MEMORY_DE
                                
000A7F D11F 2ACAFB          16      LD  HL,(FSTPOS)
000A82 D122 3ADCF3          13      LD  A,(CSRY)
000A85 D125 6F               4      LD  L,A
000A86 D126 E5              11      PUSH    HL
000A87 D127 CDFCD1          17      CALL    LOC0
000A8A D12A 4D               4      LD  C,L
000A8B D12B 44               4      LD  B,H
000A8C D12C E1              10      POP HL
000A8D D12D 3AB0F3          13      LD  A,(LINLEN)
000A90 D130 94               4      SUB H
000A91 D131 3D               4      DEC A
000A92 D132 5F               4      LD  E,A
000A93 D133 211FF4          10      LD  HL,KBUF
       D136                     GETL2:
000A96 D136 CDD0E4          17      CALL    _SCRN
000A99 D139 03               6      INC BC
000A9A D13A 77               7      LD  (HL),A
000A9B D13B 23               6      INC HL
000A9C D13C 1D               4      DEC E
000A9D D13D 20F7            12      JR  NZ,GETL2
000A9F D13F CD1FD0          17      CALL    MSG_CR
                                
000AA2 D142 FDE1            14      POP IY
000AA4 D144 DDE1            14      POP IX
       D146                     GETL3:
000AA6 D146 2B               6      DEC HL
000AA7 D147 7E               7      LD  A,(HL)
000AA8 D148 FE21             7      CP  021H
000AAA D14A D0              11      RET NC
000AAB D14B 3600            10      LD  (HL),0
000AAD D14D 15               4      DEC D
000AAE D14E 20F6            12      JR  NZ,GETL3
000AB0 D150 C9              10      RET
                                
       D151                     _SYS0B:     ;(BDOS)コンソール状態のチェック
       D151                     CONSTX:
000AB1 D151 C5              11      PUSH    BC
000AB2 D152 D5              11      PUSH    DE
000AB3 D153 E5              11      PUSH    HL
000AB4 D154 DDE5            15      PUSH    IX
000AB6 D156 DD219C00        14      LD  IX,CHSNS
000ABA D15A CD11D2          17      CALL    CALSLT_R
000ABD D15D DDE1            14      POP IX
000ABF D15F E1              10      POP HL
000AC0 D160 D1              10      POP DE
000AC1 D161 C1              10      POP BC
000AC2 D162 C9              10      RET
                                
       D163                     _SYS2A:     ;(BDOS)日付の獲得
000AC3 D163 AF               4      XOR A
000AC4 D164 57               4      LD  D,A
000AC5 D165 5F               4      LD  E,A
000AC6 D166 67               4      LD  H,A
000AC7 D167 6F               4      LD  L,A
000AC8 D168 C9              10      RET
                                
       D169                     _SYS2C:     ;(BDOS)時刻の獲得
000AC9 D169 AF               4      XOR A
000ACA D16A 57               4      LD  D,A
000ACB D16B 5F               4      LD  E,A
000ACC D16C 67               4      LD  H,A
000ACD D16D 6F               4      LD  L,A
000ACE D16E C9              10      RET
                                
       D16F                     POS:
000ACF D16F F5              11      PUSH    AF
000AD0 D170 2ADCF3          16      LD  HL,(CSRY)
000AD3 D173 7D               4      LD  A,L
000AD4 D174 6C               4      LD  L,H
000AD5 D175 67               4      LD  H,A
000AD6 D176 2C               4      INC L
000AD7 D177 24               4      INC H
000AD8 D178 F1              10      POP AF
000AD9 D179 C9              10      RET
                                
       D17A                     LOC:
000ADA D17A F5              11      PUSH    AF
000ADB D17B E5              11      PUSH    HL
000ADC D17C 7D               4      LD  A,L
000ADD D17D 6C               4      LD  L,H
000ADE D17E 67               4      LD  H,A
000ADF D17F 2D               4      DEC L
000AE0 D180 25               4      DEC H
000AE1 D181 DDE5            15      PUSH    IX
000AE3 D183 DD21C600        14      LD  IX,POSIT
000AE7 D187 CD11D2          17      CALL    CALSLT_R
000AEA D18A DDE1            14      POP IX
000AEC D18C E1              10      POP HL
000AED D18D F1              10      POP AF
000AEE D18E C9              10      RET
       D18F                     SCRN:
000AEF D18F E5              11      PUSH    HL
000AF0 D190 DDE5            15      PUSH    IX
                                
000AF2 D192 69               4      LD  L,C
000AF3 D193 60               4      LD  H,B
000AF4 D194 DD214A00        14      LD  IX,RDVRM
000AF8 D198 CD11D2          17      CALL    CALSLT_R
                                
000AFB D19B DDE1            14      POP IX
000AFD D19D E1              10      POP HL
000AFE D19E C9              10      RET
                                
       D19F                     CTRL02:
000AFF D19F F5              11      PUSH    AF
000B00 D1A0 D5              11      PUSH    DE
000B01 D1A1 2ADCF3          16      LD  HL,(CSRY)
000B04 D1A4 3AB0F3          13      LD  A,(LINLEN)
000B07 D1A7 4F               4      LD  C,A
000B08 D1A8 94               4      SUB H   ;CSRX
000B09 D1A9 C602             7      ADD A,2
000B0B D1AB 47               4      LD  B,A ;カーソルより右の文字数
000B0C D1AC 61               4      LD  H,C ;LINLEN
000B0D D1AD C5              11      PUSH    BC
000B0E D1AE CDFCD1          17      CALL    LOC0
000B11 D1B1 C1              10      POP BC
                                
000B12 D1B2 1620             7      LD  D,020H
       D1B4                     C8X1:
000B14 D1B4 DD214A00        14      LD  IX,RDVRM
000B18 D1B8 CD11D2          17      CALL    CALSLT_R
000B1B D1BB 4F               4      LD  C,A
000B1C D1BC 7A               4      LD  A,D
000B1D D1BD DD214D00        14      LD  IX,WRTVRM
000B21 D1C1 CD11D2          17      CALL    CALSLT_R
000B24 D1C4 2B               6      DEC HL
000B25 D1C5 51               4      LD  D,C
000B26 D1C6 10EC            13      DJNZ    C8X1
000B28 D1C8 D1              10      POP DE
000B29 D1C9 F1              10      POP AF
000B2A D1CA C9              10      RET
                                
       D1CB                     INSERT:
000B2B D1CB F5              11      PUSH    AF
000B2C D1CC D5              11      PUSH    DE
000B2D D1CD 2ADCF3          16      LD  HL,(CSRY)
000B30 D1D0 3AB0F3          13      LD  A,(LINLEN)
000B33 D1D3 4F               4      LD  C,A
000B34 D1D4 94               4      SUB H   ;CSRX
000B35 D1D5 3C               4      INC A
000B36 D1D6 47               4      LD  B,A ;カーソルより右の文字数
000B37 D1D7 C5              11      PUSH    BC
000B38 D1D8 CDFCD1          17      CALL    LOC0
000B3B D1DB C1              10      POP BC
                                
000B3C D1DC 1620             7      LD  D,020H
       D1DE                     INS1:
000B3E D1DE DD214A00        14      LD  IX,RDVRM
000B42 D1E2 CD11D2          17      CALL    CALSLT_R
000B45 D1E5 4F               4      LD  C,A
000B46 D1E6 7A               4      LD  A,D
000B47 D1E7 DD214D00        14      LD  IX,WRTVRM
000B4B D1EB CD11D2          17      CALL    CALSLT_R
000B4E D1EE 23               6      INC HL
000B4F D1EF 51               4      LD  D,C
000B50 D1F0 10EC            13      DJNZ    INS1
000B52 D1F2 D1              10      POP DE
000B53 D1F3 F1              10      POP AF
000B54 D1F4 C9              10      RET
                                
       D1F5                     CONOUT1:
000B55 D1F5 59               4      LD  E,C
000B56 D1F6 C3CDE4          10      JP  _PRINT
                                
       D1F9                     GETVRAM:
000B59 D1F9 2ADCF3          16      LD  HL,(CSRY)
       D1FC                     LOC0:
000B5C D1FC 2D               4      DEC L
000B5D D1FD 25               4      DEC H
000B5E D1FE 4C               4      LD  C,H ;CSRX-1
000B5F D1FF 5D               4      LD  E,L ;CSRY-1
       D200                     LOC1:
000B60 D200 3AB0F3          13      LD  A,(LINLEN)
000B63 D203 67               4      LD  H,A
000B64 D204 1600             7      LD  D,0
000B66 D206 6A               4      LD  L,D ;0
000B67 D207 0608             7      LD  B,8
       D209                     LOC2:
000B69 D209 29              11      ADD HL,HL
000B6A D20A 3001            12      JR  NC,LOC3
000B6C D20C 19              11      ADD HL,DE
       D20D                     LOC3:
000B6D D20D 10FA            13      DJNZ    LOC2
000B6F D20F 09              11      ADD HL,BC
000B70 D210 C9              10      RET
                                
       D211                     CALSLT_R:
000B71 D211 FDE5            15      PUSH    IY
000B73 D213 FD2AC1FC        20      LD  IY,(EXPTBL) ;メインROMスロット
000B77 D217 CD2DD2          17      CALL    CALSLTR
000B7A D21A FDE1            14      POP IY
000B7C D21C C9              10      RET
                                
       D21D                     CALLF:
000B7D D21D 08               4      EX  AF,AF'
000B7E D21E E3              19      EX  (SP),HL
000B7F D21F 7E               7      LD  A,(HL)
000B80 D220 FD67             9      LD  IYH,A
000B82 D222 23               6      INC HL
000B83 D223 7E               7      LD  A,(HL)
000B84 D224 DD6F             9      LD  IXL,A
000B86 D226 23               6      INC HL
000B87 D227 7E               7      LD  A,(HL)
000B88 D228 DD67             9      LD  IXH,A
000B8A D22A 23               6      INC HL
000B8B D22B E3              19      EX  (SP),HL
000B8C D22C 08               4      EX  AF,AF'
       D22D                     CALSLTR:
000B8D D22D F3               4      DI
000B8E D22E ED7367D2        20      LD  (CSSP),SP
000B92 D232 F5              11      PUSH    AF
000B93 D233 3E1C             7      LD  A,_CALSLT
       D235                     SLTCALL:
000B95 D235 3254D2          13      LD  (SLTCALLX),A
000B98 D238 3A68D2          13      LD  A,(CSSP+1)
000B9B D23B FE41             7      CP  040H+1
000B9D D23D 3005            12      JR  NC,CALSLTR1
000B9F D23F F1              10      POP AF
000BA0 D240 315EF5          10      LD  SP,BUF
000BA3 D243 F5              11      PUSH    AF
       D244                     CALSLTR1:
000BA4 D244 C5              11      PUSH    BC
000BA5 D245 D5              11      PUSH    DE
000BA6 D246 E5              11      PUSH    HL
000BA7 D247 2600             7      LD  H,0
000BA9 D249 3AC0FC          13      LD  A,(EXPTBL-1)    ;メインROMに切り替える
000BAC D24C CD6BD3          17      CALL    ENASLT
000BAF D24F E1              10      POP HL
000BB0 D250 D1              10      POP DE
000BB1 D251 C1              10      POP BC
000BB2 D252 F1              10      POP AF
000BB3 D253 CD1C00          17      CALL    _CALSLT
       D254                     SLTCALLX    EQU $-2
000BB6 D256 F5              11      PUSH    AF
000BB7 D257 C5              11      PUSH    BC
000BB8 D258 D5              11      PUSH    DE
000BB9 D259 E5              11      PUSH    HL
000BBA D25A 2600             7      LD  H,0
000BBC D25C 3A41F3          13      LD  A,(0F341H)  ;メインRAMに戻す
000BBF D25F CD6BD3          17      CALL    ENASLT
000BC2 D262 E1              10      POP HL
000BC3 D263 D1              10      POP DE
000BC4 D264 C1              10      POP BC
000BC5 D265 F1              10      POP AF
000BC6 D266 310000          10      LD  SP,0
       D267                     CSSP    EQU $-2
000BC9 D269 FB               4      EI
000BCA D26A C9              10      RET
                                
       D26B                     RDSLTR:
000BCB D26B ED7367D2        20      LD  (CSSP),SP
000BCF D26F F5              11      PUSH    AF
000BD0 D270 3E0C             7      LD  A,_RDSLT
000BD2 D272 18C1            12      JR  SLTCALL
                                
       D274                     WRSLTR:
000BD4 D274 ED7367D2        20      LD  (CSSP),SP
000BD8 D278 F5              11      PUSH    AF
000BD9 D279 3E14             7      LD  A,_WRSLT
000BDB D27B 18B8            12      JR  SLTCALL
                                
       D27D                     INT38H:
000BDD D27D F5              11      PUSH    AF
000BDE D27E E5              11      PUSH    HL          ;メインROMを呼び出すのでスタックが被っていないかチェック
000BDF D27F 2AA9D2          16      LD  HL,(INTSP)
000BE2 D282 7C               4      LD  A,H
000BE3 D283 B5               4      OR  L
000BE4 D284 202D            12      JR  NZ,INT38H2
000BE6 D286 C5              11      PUSH    BC
000BE7 D287 D5              11      PUSH    DE
000BE8 D288 2100BF          10      LD  HL,010000H-04100H   ;Page1
000BEB D28B 39              11      ADD HL,SP
000BEC D28C ED73A9D2        20      LD  (INTSP),SP
000BF0 D290 3803            12      JR  C,INT38H1
000BF2 D292 315EF5          10      LD  SP,BUF
       D295                     INT38H1:
000BF5 D295 2600             7      LD  H,0
000BF7 D297 3AC0FC          13      LD  A,(EXPTBL-1)    ;メインROMに切り替える
000BFA D29A CD6BD3          17      CALL    ENASLT
000BFD D29D CD3800          17      CALL    00038H
000C00 D2A0 2600             7      LD  H,0
000C02 D2A2 3A41F3          13      LD  A,(0F341H)  ;メインRAMに戻す
000C05 D2A5 CD6BD3          17      CALL    ENASLT
000C08 D2A8 310000          10      LD  SP,0
       D2A9                     INTSP   EQU $-2
000C0B D2AB 210000          10      LD  HL,0
000C0E D2AE 22A9D2          16      LD  (INTSP),HL
000C11 D2B1 D1              10      POP DE
000C12 D2B2 C1              10      POP BC
       D2B3                     INT38H2:
000C13 D2B3 E1              10      POP HL
000C14 D2B4 F1              10      POP AF
000C15 D2B5 FB               4      EI
000C16 D2B6 C9              10      RET
                                
[EOF:MSXIO.ASM:SHIFT_JIS]
                                    INCLUDE "msx_cbios\\slot.asm"
                                ;-------------------------------------
                                ; 000Ch RDSLT
                                ; Reads a value from an address in another slot.
                                ; Input:   A  = slot ID: E000SSPP
                                ;          HL = address to read
                                ; Output:  A  = value read
                                ;          Interrupts disabled.
                                ; Changes: F, C, DE
       D2B7                     rdslt:
000C17 D2B7 C5              11                  push    bc
000C18 D2B8 E5              11                  push    hl
000C19 D2B9 F5              11                  push    af
000C1A D2BA 57               4                  ld      d,a             ; init D in case call is not made
000C1B D2BB A7               4                  and     a               ; expanded slot?
000C1C D2BC F3               4                  di
000C1D D2BD FCD6D3          17                  call    m,select_subslot
000C20 D2C0 F1              10                  pop     af
000C21 D2C1 E1              10                  pop     hl
                                
000C22 D2C2 E5              11                  push    hl              ; HL = address
000C23 D2C3 D5              11                  push    de              ; D = slot ID, E = saved SSL
000C24 D2C4 E5              11                  push    hl              ; HL = address
000C25 D2C5 F5              11                  push    af              ; A = slot ID
000C26 D2C6 7C               4                  ld      a,h
000C27 D2C7 07               4                  rlca
000C28 D2C8 07               4                  rlca
000C29 D2C9 E603             7                  and     $03
000C2B D2CB 6F               4                  ld      l,a             ; L = page number
                                
000C2C D2CC 47               4                  ld      b,a
000C2D D2CD 3EFC             7                  ld      a,$FC
000C2F D2CF CDF0D2          17                  call    rdsft
000C32 D2D2 5F               4                  ld      e,a             ; E = mask (shifted)
000C33 D2D3 45               4                  ld      b,l             ; B = page number
000C34 D2D4 F1              10                  pop     af              ; A = slot ID
000C35 D2D5 E603             7                  and     $03
000C37 D2D7 CDF0D2          17                  call    rdsft
000C3A D2DA 47               4                  ld      b,a             ; B = primary slot (shifted)
000C3B D2DB DBA8            11                  in      a,(PSL_STAT)
000C3D D2DD 57               4                  ld      d,a             ; D = primary slot select for restore
000C3E D2DE A3               4                  and     e
000C3F D2DF B0               4                  or      b               ; A = primary slot select for read
000C40 D2E0 E1              10                  pop     hl              ; HL = address
                                
000C41 D2E1 CD80F3          17                  call    rdprim
000C44 D2E4 7B               4                  ld      a,e
000C45 D2E5 D1              10                  pop     de              ; D = slot ID, E = saved SSL
000C46 D2E6 F5              11                  push    af              ; A = value read
000C47 D2E7 CB7A             8                  bit     7,d             ; expanded slot?
000C49 D2E9 C412D4          17                  call    nz,restore_subslot
000C4C D2EC F1              10                  pop     af              ; A = value read
000C4D D2ED E1              10                  pop     hl              ; HL = address
000C4E D2EE C1              10                  pop     bc
000C4F D2EF C9              10                  ret
                                
       D2F0                     rdsft:
000C50 D2F0 04               4                  inc     b
000C51 D2F1 05               4                  dec     b
000C52 D2F2 C8              11                  ret     z
       D2F3                     rdsft_lp:
000C53 D2F3 07               4                  rlca
000C54 D2F4 07               4                  rlca
000C55 D2F5 10FC            13                  djnz    rdsft_lp
000C57 D2F7 C9              10                  ret
                                
                                ;-------------------------------------
                                ; $0014 WRSLT
                                ; Writes a value to an address in another slot.
                                ; Input:   A  = slot ID: E000SSPP
                                ;          HL = address to write
                                ;          E  = value to write
                                ; Output:  Interrupts disabled.
                                ; Changes: AF, BC, D
       D2F8                     wrslt:
000C58 D2F8 E5              11                  push    hl
000C59 D2F9 57               4                  ld      d,a             ; D = slot ID
000C5A D2FA D5              11                  push    de
000C5B D2FB A7               4                  and     a               ; expanded slot?
000C5C D2FC F3               4                  di
000C5D D2FD FCD6D3          17                  call    m,select_subslot
000C60 D300 C1              10                  pop     bc              ; B = slot ID, C = data
000C61 D301 E1              10                  pop     hl
000C62 D302 D5              11                  push    de              ; D = slot ID, E = saved SSL
                                
000C63 D303 E5              11                  push    hl              ; HL = address
000C64 D304 7C               4                  ld      a,h
000C65 D305 07               4                  rlca
000C66 D306 07               4                  rlca
000C67 D307 E603             7                  and     $03
000C69 D309 6F               4                  ld      l,a             ; L = page number
                                
000C6A D30A 47               4                  ld      b,a             ; B = page number
000C6B D30B 3EFC             7                  ld      a,$FC
000C6D D30D CDF0D2          17                  call    rdsft
000C70 D310 5F               4                  ld      e,a             ; E = mask (shifted)
                                
000C71 D311 45               4                  ld      b,l             ; B = page number
000C72 D312 7A               4                  ld      a,d
000C73 D313 E603             7                  and     $03             ; A = 000000PP
000C75 D315 CDF0D2          17                  call    rdsft
000C78 D318 47               4                  ld      b,a             ; B = primary slot (shifted)
000C79 D319 DBA8            11                  in      a,(PSL_STAT)
000C7B D31B 57               4                  ld      d,a             ; D = primary slot select for restore
000C7C D31C A3               4                  and     e
000C7D D31D B0               4                  or      b               ; A = primary slot select for write
000C7E D31E E1              10                  pop     hl              ; HL = address
000C7F D31F 59               4                  ld      e,c             ; E = data
000C80 D320 CD85F3          17                  call    wrprim
                                
000C83 D323 D1              10                  pop     de              ; D = slot ID, E = saved SSL
000C84 D324 E5              11                  push    hl              ; HL = address
000C85 D325 CB7A             8                  bit     7,d             ; expanded slot?
000C87 D327 C412D4          17                  call    nz,restore_subslot
000C8A D32A E1              10                  pop     hl
000C8B D32B C9              10                  ret
                                
                                ;-------------------------------------
                                ; $001C CALSLT
                                ; Function : Executes inter-slot call.
                                ; Input    : IY - High byte with input for A in RDSLT
                                ;            IX - The address that will be called
                                ; Remark   : Variables can never be given in alternative registers
                                ;            of the Z-80 or IX and IY
                                
       D32C                     calslt:
000C8C D32C 08               4                  ex      af,af'
000C8D D32D D9               4                  exx
                                
                                ; Select secondary slot of target:
                                ; Note: This approach fails if target is in page 0 of slot 0.1, 0.2 or 0.3.
                                ; TODO: Put slot 0 specific routine in page 3, on the stack if necessary.
000C8E D32E F3               4                  di
000C8F D32F FDE5            15                  push    iy
000C91 D331 F1              10                  pop     af              ; A = slot ID: E000SSPP
000C92 D332 DDE5            15                  push    ix
000C94 D334 E1              10                  pop     hl              ; HL = address to call
000C95 D335 57               4                  ld      d,a             ; init D in case call is not made
000C96 D336 A7               4                  and     a               ; expanded slot?
000C97 D337 FCD6D3          17                  call    m,select_subslot
000C9A D33A D5              11                  push    de              ; D = slot ID, E = saved SSL
                                
                                ; Calculate primary slot select value:
000C9B D33B 7A               4                  ld      a,d             ; A = slot ID: E000SSPP
000C9C D33C E603             7                  and     $03
000C9E D33E 47               4                  ld      b,a             ; B = primary slot
000C9F D33F 0EFC             7                  ld      c,$FC           ; C = mask
                                                ; Calculate page that contains call address.
000CA1 D341 DDE5            15                  push    ix
000CA3 D343 F1              10                  pop     af              ; A = high byte call address
000CA4 D344 07               4                  rlca
000CA5 D345 07               4                  rlca
000CA6 D346 E603             7                  and     $03             ; A = page
                                                ; Shift B and C page*2 positions to the left.
000CA8 D348 87               4                  add     a,a
000CA9 D349 2807            12                  jr      z,calslt_sh2
       D34B                     calslt_sh1:
000CAB D34B CB00             4                  rlc     b
000CAD D34D CB01             4                  rlc     c
000CAF D34F 3D               4                  dec     a
000CB0 D350 20F9            12                  jr      nz,calslt_sh1
       D352                     calslt_sh2:
                                
                                ; Select primary slot of target and perform call:
000CB2 D352 215FD3          10                  ld      hl,calslt_restore
000CB5 D355 E5              11                  push    hl
000CB6 D356 DBA8            11                  in      a,(PSL_STAT)
000CB8 D358 F5              11                  push    af
000CB9 D359 A1               4                  and     c               ; C = mask (shifted)
000CBA D35A B0               4                  or      b               ; B = primary slot (shifted)
000CBB D35B D9               4                  exx
000CBC D35C C38CF3          10                  jp      clprim
                                
       D35F                     calslt_restore:
000CBF D35F 08               4                  ex      af,af'
000CC0 D360 D9               4                  exx
                                
                                ; Restore secondary slot:
000CC1 D361 F3               4                  di
000CC2 D362 D1              10                  pop     de              ; D = slot ID, E = saved SSL
000CC3 D363 CB7A             8                  bit     7,d             ; expanded slot?
000CC5 D365 C412D4          17                  call    nz,restore_subslot
                                
                                ; Done:
000CC8 D368 08               4                  ex      af,af'
000CC9 D369 D9               4                  exx
000CCA D36A C9              10                  ret
                                
                                ;-------------------------------------
                                ; $0024 ENASLT
                                ; Selects a slot in the page specified by an address.
                                ; Input:   A  = slot ID: ExxxSSPP
                                ;               E  = expanded flag
                                ;               SS = secondary slot number (only if expanded)
                                ;               PP = primary slot number
                                ;          HL = address inside the page to change
                                ; Output:  Interrupts disabled.
                                ; Changes: AF, BC, DE
                                
       D36B                     enaslt:
                                
                                ; A=(A >> 6)&0x3
000CCB D36B F3               4                  di
000CCC D36C E5              11                  push    hl
                                
000CCD D36D 6F               4                  ld      l,a             ; L = ExxxSSPP
                                
000CCE D36E E603             7                  and     $03             ; A = 000000PP
000CD0 D370 47               4                  ld      b,a
000CD1 D371 3EAB             7                  ld      a,$AB
       D373                     psl_dup_lp:
000CD3 D373 C655             7                  add     a,$55
000CD5 D375 05               4                  dec     b
000CD6 D376 F273D3          10                  jp      p,psl_dup_lp
                                
000CD9 D379 57               4                  ld      d,a             ; D = PP PP PP PP
                                
000CDA D37A 7C               4                  ld      a,h
000CDB D37B 07               4                  rlca
000CDC D37C 07               4                  rlca
000CDD D37D E603             7                  and     $03
                                
000CDF D37F 67               4                  ld      h,a             ; H = page number (0-3)
                                
000CE0 D380 47               4                  ld      b,a
                                
000CE1 D381 3EC0             7                  ld      a,$C0
       D383                     page_msk_lp:
000CE3 D383 07               4                  rlca
000CE4 D384 07               4                  rlca
000CE5 D385 05               4                  dec     b
000CE6 D386 F283D3          10                  jp      p,page_msk_lp
                                
000CE9 D389 5F               4                  ld      e,a             ; E = page mask (00 00 00 11 << page)
000CEA D38A 2F               4                  cpl
000CEB D38B 4F               4                  ld      c,a             ; C = page mask complement
                                
000CEC D38C 7A               4                  ld      a,d
000CED D38D A3               4                  and     e
000CEE D38E 47               4                  ld      b,a             ; B = 00 00 00 PP << page
                                
000CEF D38F 7D               4                  ld      a,l
000CF0 D390 A7               4                  and     a
000CF1 D391 F2CED3          10                  jp      p,chg_psl
                                
                                ;SSL-Change
000CF4 D394 0F               4                  rrca
000CF5 D395 0F               4                  rrca
000CF6 D396 E603             7                  and     $03             ; A = 000000SS
                                
000CF8 D398 E5              11                  push    hl
000CF9 D399 C5              11                  push    bc
                                
000CFA D39A 47               4                  ld      b,a
000CFB D39B 3EAB             7                  ld      a,$AB
       D39D                     ssl_dup_lp:
000CFD D39D C655             7                  add     a,$55
000CFF D39F 05               4                  dec     b
000D00 D3A0 F29DD3          10                  jp      p,ssl_dup_lp
                                
000D03 D3A3 A3               4                  and     e
000D04 D3A4 47               4                  ld      b,a             ; B = 00 00 00 SS << page
                                
000D05 D3A5 7A               4                  ld      a,d
000D06 D3A6 E6C0             7                  and     $C0
000D08 D3A8 67               4                  ld      h,a
                                
000D09 D3A9 DBA8            11                  in      a,(PSL_STAT)
000D0B D3AB 6F               4                  ld      l,a
000D0C D3AC E6C0             7                  and     $C0
000D0E D3AE B4               4                  or      h
000D0F D3AF D3A8            11                  out     (PSL_STAT),a
                                
000D11 D3B1 3AFFFF          13                  ld      a,(SSL_REGS)
000D14 D3B4 2F               4                  cpl
000D15 D3B5 A1               4                  and     c               ; preserve other pages
000D16 D3B6 B0               4                  or      b
000D17 D3B7 4F               4                  ld      c,a
000D18 D3B8 32FFFF          13                  ld      (SSL_REGS),a
                                
000D1B D3BB 7D               4                  ld      a,l
000D1C D3BC D3A8            11                  out     (PSL_STAT),a
                                
                                                ; (SLTTBL + PP) <- RegC
                                
000D1E D3BE 21C5FC          10                  ld      hl,SLTTBL
                                
000D21 D3C1 7A               4                  ld      a,d
000D22 D3C2 E603             7                  and     $03             ; A = 000000PP
                                
000D24 D3C4 85               4                  add     a,l
000D25 D3C5 6F               4                  ld      l,a             ; L = L + A
                                
000D26 D3C6 7C               4                  ld      a,h
000D27 D3C7 CE00             7                  adc     a,0
000D29 D3C9 67               4                  ld      h,a             ; H = H + Cy
                                
000D2A D3CA 79               4                  ld      a,c
000D2B D3CB 77               7                  ld      (hl),a
                                
000D2C D3CC C1              10                  pop     bc
000D2D D3CD E1              10                  pop     hl
                                
       D3CE                     chg_psl:
000D2E D3CE DBA8            11                  in      a,(PSL_STAT)
000D30 D3D0 A1               4                  and     c
000D31 D3D1 B0               4                  or      b
000D32 D3D2 D3A8            11                  out     (PSL_STAT),a
                                
000D34 D3D4 E1              10                  pop     hl
000D35 D3D5 C9              10                  ret
                                
                                ;--------------------------------
                                ; Select subslot.
                                ; Input:   A  = slot ID: E000SSPP
                                ;          HL = address which specifies page to select
                                ;               (actually, only the highest 2 bits of H are relevant)
                                ; Output:  D  = slot ID (same as input)
                                ;          E  = original value of secondary slot select register
                                ;          SLTTBL[slot] = new value of secondary slot select register
                                ; Changes: AF, HL, BC
                                ; Note:    Interrupts must be disabled before calling this routine.
       D3D6                     select_subslot:
                                                ; Select primary slot of target in page 3.
                                                ; Note: Stack is unavailable until primary slot is restored.
000D36 D3D6 57               4                  ld      d,a             ; D = E000SSPP
000D37 D3D7 0F               4                  rrca
000D38 D3D8 0F               4                  rrca
000D39 D3D9 5F               4                  ld      e,a             ; E = PPE000SS
000D3A D3DA E6C0             7                  and     $C0
000D3C D3DC 6F               4                  ld      l,a             ; L = PP000000
000D3D D3DD DBA8            11                  in      a,(PSL_STAT)
000D3F D3DF 4F               4                  ld      c,a             ; C = saved PSL
000D40 D3E0 E63F             7                  and     $3F
000D42 D3E2 B5               4                  or      l
000D43 D3E3 D3A8            11                  out     (PSL_STAT),a
                                                ; Shift mask and subslot according to page.
000D45 D3E5 7B               4                  ld      a,e             ; A = PPE000SS
000D46 D3E6 E603             7                  and     $03
000D48 D3E8 6F               4                  ld      l,a             ; L = subslot
000D49 D3E9 7C               4                  ld      a,h             ; A = high byte of address
000D4A D3EA 2603             7                  ld      h,$03           ; H = mask
000D4C D3EC 1802            12                  jr      select_subslot_next
       D3EE                     select_subslot_lp:
000D4E D3EE 29              11                  add     hl,hl           ; Shift 2 bits to the left.
000D4F D3EF 29              11                  add     hl,hl
       D3F0                     select_subslot_next:
000D50 D3F0 D640             7                  sub     $40             ; Subtract 1 page.
000D52 D3F2 30FA            12                  jr      nc,select_subslot_lp
000D54 D3F4 7C               4                  ld      a,h
000D55 D3F5 2F               4                  cpl
000D56 D3F6 67               4                  ld      h,a
                                                ; Select secondary slot of target.
000D57 D3F7 3AFFFF          13                  ld      a,(SSL_REGS)
000D5A D3FA 2F               4                  cpl
000D5B D3FB 5F               4                  ld      e,a             ; E = saved SSL
000D5C D3FC A4               4                  and     h               ; H = mask (shifted)
000D5D D3FD B5               4                  or      l               ; L = subslot (shifted)
000D5E D3FE 32FFFF          13                  ld      (SSL_REGS),a
000D61 D401 6F               4                  ld      l,a             ; L = value written to SSL_REGS
                                                ; Restore original primary slot in page 3.
000D62 D402 79               4                  ld      a,c
000D63 D403 D3A8            11                  out     (PSL_STAT),a
                                                ; Update SLTTBL.
000D65 D405 7A               4                  ld      a,d
000D66 D406 E603             7                  and     $03             ; A = 000000SS
000D68 D408 4F               4                  ld      c,a
000D69 D409 0600             7                  ld      b,0
000D6B D40B 7D               4                  ld      a,l             ; A = value written to SSL_REGS
000D6C D40C 21C5FC          10                  ld      hl,SLTTBL
000D6F D40F 09              11                  add     hl,bc
000D70 D410 77               7                  ld      (hl),a
000D71 D411 C9              10                  ret
                                
                                ;--------------------------------
                                ; Restore subslot, companion routine to select_subslot.
                                ; Input:   D  = slot ID: E000SSPP
                                ;          E  = original value of secondary slot select register
                                ; Output:  SLTTBL[slot] = original value of secondary slot select register
                                ; Changes: AF, HL, BC
                                ; Note:    Interrupts must be disabled before calling this routine.
       D412                     restore_subslot:
                                                ; Select primary slot of target in page 3.
                                                ; Note: Stack is unavailable until primary slot is restored.
000D72 D412 7A               4                  ld      a,d
000D73 D413 0F               4                  rrca
000D74 D414 0F               4                  rrca
000D75 D415 E6C0             7                  and     $C0
000D77 D417 47               4                  ld      b,a             ; B = PP000000
000D78 D418 DBA8            11                  in      a,(PSL_STAT)
000D7A D41A 4F               4                  ld      c,a             ; C = saved PSL
000D7B D41B E63F             7                  and     $3F
000D7D D41D B0               4                  or      b
000D7E D41E D3A8            11                  out     (PSL_STAT),a
                                                ; Restore secondary slot.
000D80 D420 7B               4                  ld      a,e
000D81 D421 32FFFF          13                  ld      (SSL_REGS),a
                                                ; Restore original primary slot in page 3.
000D84 D424 79               4                  ld      a,c
000D85 D425 D3A8            11                  out     (PSL_STAT),a
                                                ; Update SLTTBL.
000D87 D427 7A               4                  ld      a,d
000D88 D428 E603             7                  and     $03             ; A = 000000SS
000D8A D42A 4F               4                  ld      c,a
000D8B D42B 0600             7                  ld      b,0
000D8D D42D 21C5FC          10                  ld      hl,SLTTBL
000D90 D430 09              11                  add     hl,bc
000D91 D431 73               7                  ld      (hl),e
000D92 D432 C9              10                  ret
                                
                                ;--------------------------------
                                
       D433                     m_rdprim:
000D93 D433 D3A8            11                  out     (PSL_STAT),a
000D95 D435 5E               7                  ld      e,(hl)
000D96 D436 1803            12                  jr      m_wrprm1
       D438                     m_wrprim:
000D98 D438 D3A8            11                  out     (PSL_STAT),a
000D9A D43A 73               7                  ld      (hl),e
       D43B                     m_wrprm1:
000D9B D43B 7A               4                  ld      a,d
000D9C D43C D3A8            11                  out     (PSL_STAT),a
000D9E D43E C9              10                  ret
       D43F                     m_clprim:
000D9F D43F D3A8            11                  out     (PSL_STAT),a
000DA1 D441 08               4                  ex      af,af'
000DA2 D442 CD98F3          17                  call    cl_jp
000DA5 D445 08               4                  ex      af,af'
000DA6 D446 F1              10                  pop     af
000DA7 D447 D3A8            11                  out     (PSL_STAT),a
000DA9 D449 08               4                  ex      af,af'
000DAA D44A C9              10                  ret
       D44B                     m_cl_jp:
000DAB D44B DDE9             8                  jp      (ix)
       D44D                     m_prim_end:
000DAD D44D 00               4                  nop
                                
       F380                     rdprim:         equ     $F380
       F385                     wrprim:         equ     rdprim+(m_wrprim-m_rdprim)
       F38C                     clprim:         equ     rdprim+(m_clprim-m_rdprim)
       F398                     cl_jp:          equ     rdprim+(m_cl_jp-m_rdprim)
                                
                                ; vim:ts=8:expandtab:filetype=z8a:syntax=z8a:
[EOF:slot.asm:UTF_8]
                                    INCLUDE "LDFILE.ASM"
                                
                                ;   LSX-Dodgers FILE
                                
       D44E                     FILEC:
000DAE D44E CD59D4          17      CALL    FILE
       D451                     FILEC2:
000DB1 D451 3A15E4          13      LD  A,(FDRV+1)
000DB4 D454 FE20             7      CP  020H
000DB6 D456 C8              11      RET Z
000DB7 D457 1839            12      JR  SETDIR1
                                
       D459                     FILE:
000DB9 D459 AF               4      XOR A
000DBA D45A 3214E4          13      LD  (FDRV),A
000DBD D45D 67               4      LD  H,A
000DBE D45E 6F               4      LD  L,A
000DBF D45F 2222E4          16      LD  (FDRV+14),HL
000DC2 D462 CD30D5          17      CALL    SPCUT
000DC5 D465 CD15D5          17      CALL    CCHK3
000DC8 D468 2812            12      JR  Z,DEVI1
000DCA D46A 13               6      INC DE
000DCB D46B 1A               7      LD  A,(DE)
000DCC D46C 1B               6      DEC DE
000DCD D46D FE3A             7      CP  ':'
000DCF D46F 200B            12      JR  NZ,DEVI1
000DD1 D471 1A               7      LD  A,(DE)      ;DRIVE
000DD2 D472 CD70D7          17      CALL    CAP
000DD5 D475 D640             7      SUB '@'
000DD7 D477 13               6      INC DE
000DD8 D478 13               6      INC DE
000DD9 D479 3214E4          13      LD  (FDRV),A
       D47C                     DEVI1:
000DDC D47C 1A               7      LD  A,(DE)
000DDD D47D D65C             7      SUB 05CH        ;\
000DDF D47F 2009            12      JR  NZ,NOROOT
000DE1 D481 6F               4      LD  L,A     ;A=0でH=0のはずなのでHL=0
000DE2 D482 222EE4          16      LD  (FDRV+26),HL
000DE5 D485 2C               4      INC L
000DE6 D486 2222E4          16      LD  (FDRV+14),HL
000DE9 D489 13               6      INC DE
       D48A                     NOROOT:
                                
       D48A                     SETDIR:
000DEA D48A CDB6D4          17      CALL    FILED
000DED D48D 1A               7      LD  A,(DE)
000DEE D48E FE5C             7      CP  05CH        ;\
000DF0 D490 C0              11      RET NZ
000DF1 D491 13               6      INC DE
       D492                     SETDIR1:
000DF2 D492 3E10             7      LD  A,010H      ;Directory
000DF4 D494 3221E4          13      LD  (FDRV+13),A
000DF7 D497 D5              11      PUSH    DE
000DF8 D498 1114E4          10      LD  DE,FDRV
000DFB D49B 2A1EE5          16      LD  HL,(STABLE+2*00FH)
000DFE D49E CD0F00          17      CALL    JP_HL
000E01 D4A1 D1              10      POP DE
000E02 D4A2 B7               4      OR  A
000E03 D4A3 C0              11      RET NZ
                                
000E04 D4A4 3A21E4          13      LD  A,(FDRV+13)
000E07 D4A7 CB67             8      BIT 4,A
000E09 D4A9 C8              11      RET Z
                                
000E0A D4AA CDFDD4          17      CALL    FILEI
000E0D D4AD 2A2EE4          16      LD  HL,(FDRV+26)
000E10 D4B0 23               6      INC HL
000E11 D4B1 2222E4          16      LD  (FDRV+14),HL
000E14 D4B4 18D4            12      JR  SETDIR
                                
       D4B6                     FILED:
000E16 D4B6 CDFDD4          17      CALL    FILEI
000E19 D4B9 2115E4          10      LD  HL,FNAME
                                
000E1C D4BC 0608             7      LD  B,8
       D4BE                     FILE2:
000E1E D4BE CD0AD5          17      CALL    CCHKF
000E21 D4C1 C8              11      RET Z
000E22 D4C2 FE2A             7      CP  '*'
000E24 D4C4 282E            12      JR  Z,FILE9
000E26 D4C6 FE2E             7      CP  '.'
000E28 D4C8 280C            12      JR  Z,FILE4
000E2A D4CA 77               7      LD  (HL),A
000E2B D4CB 23               6      INC HL
000E2C D4CC 10F0            13      DJNZ    FILE2
                                
       D4CE                     FILE3:
000E2E D4CE CD0AD5          17      CALL    CCHKF
000E31 D4D1 C8              11      RET Z
000E32 D4D2 FE2E             7      CP  '.'
000E34 D4D4 20F8            12      JR  NZ,FILE3
                                
       D4D6                     FILE4:
000E36 D4D6 211DE4          10      LD  HL,FNAME+8
000E39 D4D9 0603             7      LD  B,3
                                
       D4DB                     FILE4L:
000E3B D4DB CD0AD5          17      CALL    CCHKF
000E3E D4DE C8              11      RET Z
000E3F D4DF FE2E             7      CP  '.'
000E41 D4E1 2008            12      JR  NZ,FILE12
000E43 D4E3 3215E4          13      LD  (FNAME),A   ;Parent directory(..)
000E46 D4E6 3216E4          13      LD  (FNAME+1),A
000E49 D4E9 3E20             7      LD  A,020H
       D4EB                     FILE12:
000E4B D4EB FE2A             7      CP  '*'
000E4D D4ED 280A            12      JR  Z,FILE10
000E4F D4EF 77               7      LD  (HL),A
000E50 D4F0 23               6      INC HL
000E51 D4F1 10E8            13      DJNZ    FILE4L
000E53 D4F3 C9              10      RET
                                
       D4F4                     FILE9:              ;名前の*処理、名前の残りを?で埋める
000E54 D4F4 CDF9D4          17      CALL    FILE10
000E57 D4F7 18D5            12      JR  FILE3
                                
       D4F9                     FILE10:
000E59 D4F9 3E3F             7      LD  A,'?'
000E5B D4FB 1808            12      JR  FILL_MEMORY
       D4FD                     FILEI:              ;名前＋拡張子をスペースで初期化
000E5D D4FD 3E20             7      LD  A,020H
000E5F D4FF 01000B          10      LD  BC,11*256   ;C=0にしておく
000E62 D502 2115E4          10      LD  HL,FNAME
       D505                     FILL_MEMORY:            ;HLからBバイトAで埋める
000E65 D505 77               7      LD  (HL),A
000E66 D506 23               6      INC HL
000E67 D507 10FC            13      DJNZ    FILL_MEMORY
000E69 D509 C9              10      RET
                                
       D50A                     CCHKF:
000E6A D50A 1A               7      LD  A,(DE)
000E6B D50B CD12D5          17      CALL    CCHK2
000E6E D50E C8              11      RET Z
000E6F D50F C37DD8          10      JP  FKAN
                                
       D512                     CCHK2:
000E72 D512 0C               4      INC C
000E73 D513 0D               4      DEC C
000E74 D514 C0              11      RET NZ
       D515                     CCHK3:              ;ZF=1 で使えない文字
000E75 D515 FE2B             7      CP  '+'
000E77 D517 C8              11      RET Z
000E78 D518 FE2C             7      CP  ','
000E7A D51A C8              11      RET Z
000E7B D51B FE2F             7      CP  '/'
000E7D D51D C8              11      RET Z
000E7E D51E FE3A             7      CP  ':'
000E80 D520 C8              11      RET Z
000E81 D521 FE3B             7      CP  ';'
000E83 D523 C8              11      RET Z
000E84 D524 FE3D             7      CP  '='
000E86 D526 C8              11      RET Z
000E87 D527 FE5C             7      CP  05CH    ;\
000E89 D529 C8              11      RET Z
000E8A D52A FE20             7      CP  020H
000E8C D52C D0              11      RET NC
000E8D D52D BF               4      CP  A       ;Z=1
000E8E D52E C9              10      RET
                                
       D52F                     SS1:
000E8F D52F 13               6      INC DE
       D530                     SPCUT:              ;スペースをカット
000E90 D530 1A               7      LD  A,(DE)
000E91 D531 FE20             7      CP  020H
000E93 D533 28FA            12      JR  Z,SS1
000E95 D535 C9              10      RET
                                
       D536                     SETDRVF:
000E96 D536 1114E4          10      LD  DE,FDRV
       D539                     SETDRV0:
000E99 D539 CD42D5          17      CALL    SETDRV
000E9C D53C FDE1            14      POP IY
000E9E D53E C1              10      POP BC
000E9F D53F D1              10      POP DE
000EA0 D540 E1              10      POP HL
000EA1 D541 C9              10      RET
                                
       D542                     SETDRV:
000EA2 D542 E3              19      EX  (SP),HL     ;HL=RETRN ADDRESS
000EA3 D543 D5              11      PUSH    DE      ;PUSH HL/DE/BC/IY
000EA4 D544 C5              11      PUSH    BC
000EA5 D545 1A               7      LD  A,(DE)
000EA6 D546 D5              11      PUSH    DE
000EA7 D547 FDE3            23      EX  (SP),IY
                                
000EA9 D549 CD50D5          17      CALL    GETDRV
000EAC D54C CDD9E4          17      CALL    _CHGDRV
                                
000EAF D54F E9               4      JP  (HL)
                                
       D550                     GETDRV:
000EB0 D550 CD63D5          17      CALL    GETDRV1
000EB3 D553 3288E4          13      LD  (_DRV),A
000EB6 D556 C9              10      RET
                                
       D557                     IS_SAME_DRV_A_DE:
                                ;   A と (DE) が同じドライブか調べる
                                ;   ZF=1ならば同じドライブ
000EB7 D557 CD63D5          17      CALL    GETDRV1
000EBA D55A C5              11      PUSH    BC
000EBB D55B 4F               4      LD  C,A
000EBC D55C 1A               7      LD  A,(DE)
000EBD D55D CD63D5          17      CALL    GETDRV1
000EC0 D560 A9               4      XOR C
000EC1 D561 C1              10      POP BC
000EC2 D562 C9              10      RET
       D563                     GETDRV1:
000EC3 D563 E67F             7      AND 07FH
000EC5 D565 D601             7      SUB 001H
000EC7 D567 D0              11      RET NC
000EC8 D568 3A87E4          13      LD  A,(_DVSW)   ;Current Drive
000ECB D56B C9              10      RET
                                
       D56C                     SOPENX:
000ECC D56C 1139E4          10      LD  DE,SFILE
000ECF D56F FD7E00          19      LD  A,(IY+0)        ;(FCB)ドライブ番号
000ED2 D572 CD57D5          17      CALL    IS_SAME_DRV_A_DE
000ED5 D575 2024            12      JR  NZ,SOPEN
000ED7 D577 13               6      INC DE
000ED8 D578 FDE5            15      PUSH    IY
000EDA D57A E1              10      POP HL
000EDB D57B 23               6      INC HL
000EDC D57C CD08D7          17      CALL    CPFILE
000EDF D57F 201A            12      JR  NZ,SOPEN
                                
000EE1 D581 2AF4E5          16      LD  HL,(SCDIR)
000EE4 D584 FD750E          19      LD  (IY+14),L   ;(FCB)アクセスするディレクトリのクラスタ番号+1
000EE7 D587 FD740F          19      LD  (IY+15),H
                                
000EEA D58A 2AF8E5          16      LD  HL,(SFNDF)  ;Direcroty location and Flags
000EED D58D 229FE4          16      LD  (_FILEN),HL
                                
000EF0 D590 ED5BF6E5        20      LD  DE,(SFBPS)
000EF4 D594 2139E4          10      LD  HL,SFILE
000EF7 D597 36FF            10      LD  (HL),0FFH
000EF9 D599 23               6      INC HL
000EFA D59A C9              10      RET
       D59B                     SOPEN:
000EFB D59B 21B0D6          10      LD  HL,FILESE
       D59E                     SOPENC:
000EFE D59E 22D7D5          16      LD  (OPENPAT),HL
                                
000F01 D5A1 CDE2E4          17      CALL    _RDFATX     ;Detect Media
000F04 D5A4 3856            12      JR  C,RDDERR
                                
000F06 D5A6 AF               4      XOR A
000F07 D5A7 329FE4          13      LD  (_FILEN),A
000F0A D5AA CDB0D7          17      CALL    LDDIRX1     ;A=0で呼び出す
000F0D D5AD 2818            12      JR  Z,SDIRX1
                                
000F0F D5AF CDA1D6          17      CALL    READ_DIR    ;Sub Directory
000F12 D5B2 3808            12      JR  C,SDIRX0
000F14 D5B4 2A7EE5          16      LD  HL,(_DTBUF)
000F17 D5B7 7E               7      LD  A,(HL)
000F18 D5B8 FE2E             7      CP  '.'
000F1A D5BA 280F            12      JR  Z,SOPEN1
       D5BC                     SDIRX0:
000F1C D5BC AF               4      XOR A
000F1D D5BD 32A0E4          13      LD  (_DIRF),A
000F20 D5C0 FD360E01        19      LD  (IY+14),1   ;(FCB)レコードサイズ
000F24 D5C4 FD770F          19      LD  (IY+15),A
       D5C7                     SDIRX1:
000F27 D5C7 ED5BFCE5        20      LD  DE,(_DIRPS) ;Root Directory
       D5CB                     SOPEN1:
000F2B D5CB 0E20             7      LD  C,32        ;自己書き換え 1セクタ辺りのディレクトリエントリ数  1024=32 / 512=16 / 256=8
       D5CC                     SDECPAT EQU $-1
       D5CD                     SOPEN1X:
000F2D D5CD CDA1D6          17      CALL    READ_DIR    ;FILE SEARCH
000F30 D5D0 382A            12      JR  C,RDDERR
000F32 D5D2 2A7EE5          16      LD  HL,(_DTBUF)
       D5D5                     SOPEN2:
000F35 D5D5 D5              11      PUSH    DE
000F36 D5D6 CDB0D6          17      CALL    FILESE      ;(self-modifying code)
       D5D7                     OPENPAT EQU $-2
000F39 D5D9 D1              10      POP DE
000F3A D5DA 386D            12      JR  C,SOPENE
000F3C D5DC 281B            12      JR  Z,SCF_FF_RET
       D5DE                     SOPEN3:
000F3E D5DE 3AA0E4          13      LD  A,(_DIRF)   ;ディレクトリか判別
000F41 D5E1 B7               4      OR  A
000F42 D5E2 200C            12      JR  NZ,SOPEN5
000F44 D5E4 13               6      INC DE      ;ルートディレクトリ
000F45 D5E5 E5              11      PUSH    HL
000F46 D5E6 210C00          10      LD  HL,12       ;(self-modifying code)MAXDIR
       D5E7                     MD_PAT  EQU $-2
000F49 D5E9 ED52            15      SBC HL,DE       ;CF=0 なので SUB HL,DE
000F4B D5EB E1              10      POP HL
000F4C D5EC 20DD            12      JR  NZ,SOPEN1
000F4E D5EE 1807            12      JR  SOPEN6
       D5F0                     SOPEN5:
000F50 D5F0 CDBFDE          17      CALL    GNCLX       ;END DIR
000F53 D5F3 D8              11      RET C
000F54 D5F4 CD68D7          17      CALL    ENDCL
       D5F7                     SOPEN6:
000F57 D5F7 38D2            12      JR  C,SOPEN1
       D5F9                     SCF_FF_RET:
000F59 D5F9 37               4      SCF         ;CF=1
000F5A D5FA 9F               4      SBC A,A     ;A=0FFH
000F5B D5FB C9              10      RET
                                
       D5FC                     RDDERR:
000F5C D5FC BF               4      CP  A       ;READ ERR CF=1 ZF=1
000F5D D5FD 37               4      SCF
000F5E D5FE C9              10      RET
                                
       D5FF                     NOPEN:
000F5F D5FF 21B0D6          10      LD  HL,FILESE
000F62 D602 22D7D5          16      LD  (OPENPAT),HL
000F65 D605 FD2A98E4        20      LD  IY,(_FCB)
000F69 D609 CD90D8          17      CALL    CHKWILDX
000F6C D60C 30EB            12      JR  NC,SCF_FF_RET
000F6E D60E FD7E00          19      LD  A,(IY+0)
000F71 D611 CD50D5          17      CALL    GETDRV
000F74 D614 CDD9E4          17      CALL    _CHGDRV
000F77 D617 D8              11      RET C
000F78 D618 2AF8E5          16      LD  HL,(SFNDF)  ;Direcroty location and Flags
000F7B D61B 229FE4          16      LD  (_FILEN),HL
                                
000F7E D61E CDABD7          17      CALL    LDDIRX
000F81 D621 ED5B9AE4        20      LD  DE,(_FBPS)
000F85 D625 CDA1D6          17      CALL    READ_DIR
000F88 D628 38D2            12      JR  C,RDDERR
000F8A D62A 3A9EE4          13      LD  A,(_FBCNT)
000F8D D62D 3D               4      DEC A
000F8E D62E 28AE            12      JR  Z,SOPEN3
       D630                     NOPEN2:
000F90 D630 2A9CE4          16      LD  HL,(_FBAD)
000F93 D633 012000          10      LD  BC,020H
000F96 D636 09              11      ADD HL,BC
000F97 D637 4F               4      LD  C,A
000F98 D638 189B            12      JR  SOPEN2
                                
       D63A                     SOPENE2:
000F9A D63A 229CE4          16      LD  (_FBAD),HL
000F9D D63D 79               4      LD  A,C
000F9E D63E 329EE4          13      LD  (_FBCNT),A
000FA1 D641 ED539AE4        20      LD  (_FBPS),DE
000FA5 D645 FD2298E4        20      LD  (_FCB),IY
       D649                     SOPENE:
000FA9 D649 AF               4      XOR A
000FAA D64A C9              10      RET
                                
       D64B                     COPEN:
000FAB D64B FD360D20        19      LD  (IY+13),020H    ;(FCB)属性(アトリビュート)
                                
000FAF D64F 21CDD6          10      LD  HL,NEXTSE
000FB2 D652 CD9ED5          17      CALL    SOPENC
000FB5 D655 D0              11      RET NC
000FB6 D656 C8              11      RET Z
000FB7 D657 3AA0E4          13      LD  A,(_DIRF)   ;ディレクトリか判別
000FBA D65A B7               4      OR  A
000FBB D65B 37               4      SCF
000FBC D65C C8              11      RET Z       ;ルートディレクトリ
000FBD D65D 0601             7      LD  B,1
000FBF D65F CDEFD8          17      CALL    WRDF
000FC2 D662 D8              11      RET C
000FC3 D663 ED5BFEE5        20      LD  DE,(_CLPS)
000FC7 D667 D5              11      PUSH    DE
000FC8 D668 CD31D7          17      CALL    DCPAT
000FCB D66B CD4ADD          17      CALL    DRDNX
000FCE D66E 2A7EE5          16      LD  HL,(_DTBUF) ;ディレクトリエントリを0クリア
000FD1 D671 3A54DC          13      LD  A,(SECSZ+2) ;1024=4 / 512=2 / 256=1
000FD4 D674 47               4      LD  B,A
000FD5 D675 AF               4      XOR A
000FD6 D676 4F               4      LD  C,A
       D677                     COPENCL:
000FD7 D677 77               7      LD  (HL),A
000FD8 D678 EDA1            16      CPI         ;HL=HL+1 BC=BC-1 BCが0の場合にP/V=0
000FDA D67A EA77D6          10      JP  PE,COPENCL
                                
000FDD D67D 3A4FD7          13      LD  A,(SPCPAT)  ;1クラスタの論理セクタ数
000FE0 D680 3D               4      DEC A
000FE1 D681 2819            12      JR  Z,COPENE
000FE3 D683 3E01             7      LD  A,1     ;1セクタ辺りのセクタ数が2以上の場合
000FE5 D685 32B7DE          13      LD  (_SECPS),A
000FE8 D688 D1              10      POP DE      ;DE=(_CLPS)
000FE9 D689 D5              11      PUSH    DE
       D68A                     COPEN1:
000FEA D68A D5              11      PUSH    DE      ;データバッファに入らないセクタもゼロクリア
000FEB D68B C5              11      PUSH    BC
000FEC D68C 2A7EE5          16      LD  HL,(_DTBUF)
000FEF D68F CD4BD7          17      CALL    CLUSTX
000FF2 D692 CD4FE0          17      CALL    DWT24
000FF5 D695 C1              10      POP BC
000FF6 D696 D1              10      POP DE
000FF7 D697 CDB6DE          17      CALL    NEXTX
000FFA D69A 20EE            12      JR  NZ,COPEN1
       D69C                     COPENE:
000FFC D69C 2A7EE5          16      LD  HL,(_DTBUF)
000FFF D69F D1              10      POP DE
001000 D6A0 C9              10      RET
                                
       D6A1                     READ_DIR:
001001 D6A1 ED53FEE5        20      LD  (_CLPS),DE
001005 D6A5 C5              11      PUSH    BC
001006 D6A6 D5              11      PUSH    DE
001007 D6A7 CD31D7          17      CALL    DCPAT
00100A D6AA CD2ADD          17      CALL    DRDX
00100D D6AD D1              10      POP DE
00100E D6AE C1              10      POP BC
00100F D6AF C9              10      RET
                                
       D6B0                     FILESE:
001010 D6B0 7E               7      LD  A,(HL)
001011 D6B1 B7               4      OR  A
001012 D6B2 C8              11      RET Z       ;END:ZF=1 CF=0
001013 D6B3 FEE5             7      CP  0E5H
001015 D6B5 280E            12      JR  Z,FILESE1
001017 D6B7 FDE5            15      PUSH    IY
001019 D6B9 D1              10      POP DE
00101A D6BA 13               6      INC DE
00101B D6BB E5              11      PUSH    HL
00101C D6BC CD08D7          17      CALL    CPFILE
00101F D6BF CC29D7          17      CALL    Z,CPFILE2
001022 D6C2 E1              10      POP HL
001023 D6C3 37               4      SCF
001024 D6C4 C8              11      RET Z       ;!!!:(ZF=1) CF=1
       D6C5                     FILESE1:
001025 D6C5 CDDCD6          17      CALL    FNEXT
001028 D6C8 20E6            12      JR  NZ,FILESE
       D6CA                     ZF0_CF0_AFF_RET:
00102A D6CA F6FF             7      OR  0FFH        ;ZF=0 CF=0
00102C D6CC C9              10      RET
                                
       D6CD                     NEXTSE:
00102D D6CD 7E               7      LD  A,(HL)
00102E D6CE B7               4      OR  A
00102F D6CF 37               4      SCF
001030 D6D0 C8              11      RET Z       ;!!!:ZF=1 CF=1
001031 D6D1 FEE5             7      CP  0E5H
001033 D6D3 37               4      SCF
001034 D6D4 C8              11      RET Z       ;!!!:(ZF=1) CF=1
001035 D6D5 CDDCD6          17      CALL    FNEXT
001038 D6D8 20F3            12      JR  NZ,NEXTSE
00103A D6DA 18EE            12      JR  ZF0_CF0_AFF_RET
                                
       D6DC                     FNEXT:
00103C D6DC E5              11      PUSH    HL
00103D D6DD 219FE4          10      LD  HL,_FILEN
001040 D6E0 34              11      INC (HL)
001041 D6E1 E1              10      POP HL
001042 D6E2 112000          10      LD  DE,020H
001045 D6E5 19              11      ADD HL,DE
001046 D6E6 0D               4      DEC C
001047 D6E7 C9              10      RET
                                
       D6E8                     CPNAME:
001048 D6E8 C5              11      PUSH    BC
001049 D6E9 D5              11      PUSH    DE
00104A D6EA E5              11      PUSH    HL
00104B D6EB CD02D7          17      CALL    CPFILE4
00104E D6EE E1              10      POP HL
00104F D6EF 23               6      INC HL
001050 D6F0 23               6      INC HL
001051 D6F1 23               6      INC HL
001052 D6F2 23               6      INC HL
001053 D6F3 D1              10      POP DE
001054 D6F4 C1              10      POP BC
001055 D6F5 2005            12      JR  NZ,CPNAME1
001057 D6F7 7E               7      LD  A,(HL)
001058 D6F8 23               6      INC HL
001059 D6F9 66               7      LD  H,(HL)
00105A D6FA 6F               4      LD  L,A
00105B D6FB C9              10      RET
       D6FC                     CPNAME1:
00105C D6FC 23               6      INC HL
00105D D6FD 23               6      INC HL
00105E D6FE 10E8            13      DJNZ    CPNAME
001060 D700 37               4      SCF
001061 D701 C9              10      RET
                                
       D702                     CPFILE4:
001062 D702 C5              11      PUSH    BC
001063 D703 010004          10      LD  BC,00400H
001066 D706 1804            12      JR  CPSTR1
       D708                     CPFILE:
001068 D708 C5              11      PUSH    BC
001069 D709 01000B          10      LD  BC,00B00H
       D70C                     CPSTR1:
00106C D70C 1A               7      LD  A,(DE)
00106D D70D FE3F             7      CP  '?'     ;Wild card
00106F D70F 2812            12      JR  Z,CPSTR2
001071 D711 7E               7      LD  A,(HL)
001072 D712 CD76D8          17      CALL    FKANC
001075 D715 E5              11      PUSH    HL
001076 D716 67               4      LD  H,A
001077 D717 1A               7      LD  A,(DE)
001078 D718 CB01             4      RLC C
00107A D71A CD76D8          17      CALL    FKANC
00107D D71D CB09             4      RRC C
00107F D71F BC               4      CP  H       ;CP (HL),(DE)
001080 D720 E1              10      POP HL
001081 D721 2004            12      JR  NZ,CPSTR3
       D723                     CPSTR2:
001083 D723 13               6      INC DE
001084 D724 23               6      INC HL
001085 D725 10E5            13      DJNZ    CPSTR1
       D727                     CPSTR3:
001087 D727 C1              10      POP BC
001088 D728 C9              10      RET
                                
       D729                     CPFILE2:
001089 D729 FD7E0D          19      LD  A,(IY+13)   ;(FCB)属性(アトリビュート)
00108C D72C F6E1             7      OR  0E1H
00108E D72E 2F               4      CPL
00108F D72F A6               7      AND (HL)
001090 D730 C9              10      RET
                                
       D731                     DCPAT:
001091 D731 0E00             7      LD  C,0
001093 D733 2A7EE5          16      LD  HL,(_DTBUF)
001096 D736 3AA0E4          13      LD  A,(_DIRF)   ;ディレクトリか判別
001099 D739 B7               4      OR  A
00109A D73A C8              11      RET Z       ;ルートディレクトリの場合はCレジスタを0にしておく(CDEがセクタ番号)
00109B D73B 3A4FD7          13      LD  A,(SPCPAT)
00109E D73E 4F               4      LD  C,A
00109F D73F 3AB7DE          13      LD  A,(_SECPS)
0010A2 D742 B9               4      CP  C
0010A3 D743 3801            12      JR  C,DC1
0010A5 D745 AF               4      XOR A
       D746                     DC1:
0010A6 D746 F680             7      OR  080H
0010A8 D748 32A0E4          13      LD  (_DIRF),A   ;bit0-6:セクタインデックス
       D74B                     CLUSTX:
0010AB D74B E5              11      PUSH    HL
0010AC D74C EB               4      EX  DE,HL
0010AD D74D AF               4      XOR A
0010AE D74E 0E01             7      LD  C,1     ;自己書き換え（1クラスタの論理セクタ数）
       D74F                     SPCPAT  EQU $-1
       D750                     L_CLDBL:
0010B0 D750 CB19             8      RR  C       ;->CF
0010B2 D752 3804            12      JR  C,E_CLDBL
0010B4 D754 29              11      ADD HL,HL       ;*2
0010B5 D755 8F               4      ADC A,A
0010B6 D756 18F8            12      JR  L_CLDBL
       D758                     E_CLDBL:
0010B8 D758 4F               4      LD  C,A
0010B9 D759 3AB7DE          13      LD  A,(_SECPS)
0010BC D75C B5               4      OR  L
0010BD D75D 6F               4      LD  L,A
0010BE D75E 110800          10      LD  DE,8    ;+8 (2D)  !ADDCL (self-modifying code)
       D75F                     CLSPAT  EQU $-2
0010C1 D761 AF               4      XOR A
0010C2 D762 19              11      ADD HL,DE   ;データ格納領域の先頭論理セクタ番号
0010C3 D763 89               4      ADC A,C
0010C4 D764 4F               4      LD  C,A
0010C5 D765 EB               4      EX  DE,HL
0010C6 D766 E1              10      POP HL
0010C7 D767 C9              10      RET
                                
       D768                     ENDCL:
0010C8 D768 7A               4      LD  A,D ;END CLUSTER
0010C9 D769 FE01             7      CP  1   ;164=356    (self-modifying code)
       D76A                     CLPAT1  EQU $-1
0010CB D76B C0              11      RET NZ
0010CC D76C 7B               4      LD  A,E
0010CD D76D FE64             7      CP  064H    ;       (self-modifying code)
       D76E                     CLPAT2  EQU $-1
0010CF D76F C9              10      RET
                                
       D770                     CAP:
0010D0 D770 FE61             7      CP  'a'
0010D2 D772 D8              11      RET C
0010D3 D773 FE7B             7      CP  'z'+1
0010D5 D775 D0              11      RET NC
0010D6 D776 D620             7      SUB 020H
0010D8 D778 C9              10      RET
       D779                     CAP2:
0010D9 D779 CD70D7          17      CALL    CAP
       D77C                     CAP3:               ;
0010DC D77C FE05             7      CP  5
0010DE D77E 2803            12      JR  Z,CAP4
0010E0 D780 FE21             7      CP  021H
0010E2 D782 C9              10      RET
       D783                     CAP4:
0010E3 D783 3EE5             7      LD  A,0E5H
0010E5 D785 C9              10      RET
                                
       D786                     CHDIR:
0010E6 D786 CD71E1          17      CALL    GETDPBD
0010E9 D789 381D            12      JR  C,CHDIR2
0010EB D78B DD751A          19      LD  (IX+DPB_SDIR),L
0010EE D78E DD741B          19      LD  (IX+DPB_SDIR+1),H
0010F1 D791 1815            12      JR  CHDIR2      ;POP_IX_RET
                                
       D793                     LDDIR:
0010F3 D793 CD71E1          17      CALL    GETDPBD
0010F6 D796 DD5E1A          19      LD  E,(IX+DPB_SDIR)
0010F9 D799 DD561B          19      LD  D,(IX+DPB_SDIR+1)
0010FC D79C 13               6      INC DE
0010FD D79D FD730E          19      LD  (IY+14),E   ;(FCB)アクセスするディレクトリのクラスタ番号+1
001100 D7A0 FD720F          19      LD  (IY+15),D
001103 D7A3 1B               6      DEC DE
001104 D7A4 AF               4      XOR A
001105 D7A5 32A0E4          13      LD  (_DIRF),A
       D7A8                     CHDIR2:
001108 D7A8 DDE1            14      POP IX
00110A D7AA C9              10      RET
                                
       D7AB                     LDDIRX:
00110B D7AB 3AA0E4          13      LD  A,(_DIRF)   ;(FCB)アクセスするディレクトリのセクタインデックス
00110E D7AE E67F             7      AND 07FH
       D7B0                     LDDIRX1:
001110 D7B0 32B7DE          13      LD  (_SECPS),A
001113 D7B3 FD5E0E          19      LD  E,(IY+14)   ;(FCB)アクセスするディレクトリのクラスタ番号+1
001116 D7B6 FD560F          19      LD  D,(IY+15)
001119 D7B9 1B               6      DEC DE
00111A D7BA CD68D7          17      CALL    ENDCL
00111D D7BD D493D7          17      CALL    NC,LDDIR
       D7C0                     LDDIRS:
001120 D7C0 7A               4      LD  A,D
001121 D7C1 B3               4      OR  E
001122 D7C2 32A0E4          13      LD  (_DIRF),A   ;ディレクトリか判別
001125 D7C5 C9              10      RET
                                
       D7C6                     KILL:
001126 D7C6 CD90D8          17      CALL    CHKWILDX
001129 D7C9 3834            12      JR  C,KILLW
00112B D7CB CD6CD5          17      CALL    SOPENX
       D7CE                     KILLS:
00112E D7CE 3E1F             7      LD  A,01FH
001130 D7D0 D412D8          17      CALL    NC,CHKATT
001133 D7D3 D8              11      RET C
       D7D4                     KILLSX:
001134 D7D4 36E5            10      LD  (HL),0E5H   ;DIR
001136 D7D6 CD6AD8          17      CALL    WTDB
001139 D7D9 111A00          10      LD  DE,01AH
00113C D7DC 19              11      ADD HL,DE
00113D D7DD 5E               7      LD  E,(HL)
00113E D7DE 23               6      INC HL
00113F D7DF 56               7      LD  D,(HL)
       D7E0                     KILLS1:
001140 D7E0 CD68D7          17      CALL    ENDCL
001143 D7E3 D0              11      RET NC      ;CF=0
001144 D7E4 21FEFF          10      LD  HL,0-2
001147 D7E7 19              11      ADD HL,DE
001148 D7E8 D0              11      RET NC      ;DE= 0 or 1
001149 D7E9 D5              11      PUSH    DE
00114A D7EA CDF7E4          17      CALL    _GNCL
00114D D7ED ED53FEE5        20      LD  (_CLPS),DE
001151 D7F1 D1              10      POP DE
001152 D7F2 210000          10      LD  HL,0
001155 D7F5 D4FAE4          17      CALL    NC,_SNCL
001158 D7F8 D8              11      RET C
001159 D7F9 ED5BFEE5        20      LD  DE,(_CLPS)  ;FAT
00115D D7FD 18E1            12      JR  KILLS1
                                
       D7FF                     KILLW:
00115F D7FF CD9BD5          17      CALL    SOPEN
       D802                     KILLW1:
001162 D802 380B            12      JR  C,KILLW2
001164 D804 CD3AD6          17      CALL    SOPENE2
001167 D807 CDCED7          17      CALL    KILLS
00116A D80A CDFFD5          17      CALL    NOPEN
00116D D80D 18F3            12      JR  KILLW1
       D80F                     KILLW2:
00116F D80F C8              11      RET Z
001170 D810 3F               4      CCF
001171 D811 C9              10      RET
                                
       D812                     CHKATT:
001172 D812 E5              11      PUSH    HL
001173 D813 110B00          10      LD  DE,00BH
001176 D816 19              11      ADD HL,DE
001177 D817 A6               7      AND (HL)
001178 D818 E1              10      POP HL
001179 D819 C8              11      RET Z
00117A D81A 37               4      SCF
00117B D81B C9              10      RET
                                
       D81C                     NAME:
00117C D81C CD90D8          17      CALL    CHKWILDX
00117F D81F D8              11      RET C
001180 D820 110400          10      LD  DE,4
001183 D823 19              11      ADD HL,DE
001184 D824 2239D8          16      LD  (NAMEP),HL
001187 D827 23               6      INC HL
001188 D828 CD94D8          17      CALL    CHKWILD
00118B D82B D8              11      RET C
                                
00118C D82C CD6CD5          17      CALL    SOPENX
00118F D82F 3E0F             7      LD  A,00FH
001191 D831 D412D8          17      CALL    NC,CHKATT
001194 D834 D8              11      RET C
                                
001195 D835 FDE5            15      PUSH    IY
001197 D837 FD210000        14      LD  IY,0        ;自己書き換え
       D839                     NAMEP   EQU $-2
00119B D83B CD6CD5          17      CALL    SOPENX
00119E D83E FDE3            23      EX  (SP),IY
0011A0 D840 3F               4      CCF
0011A1 D841 D49BD5          17      CALL    NC,SOPEN
0011A4 D844 EB               4      EX  DE,HL
0011A5 D845 E1              10      POP HL
0011A6 D846 D8              11      RET C
                                
       D847                     SETNAME:
0011A7 D847 01000B          10      LD  BC,11*256
0011AA D84A 23               6      INC HL
0011AB D84B 7E               7      LD  A,(HL)
0011AC D84C FEE5             7      CP  0E5H
0011AE D84E 2004            12      JR  NZ,SNAME1
0011B0 D850 3E05             7      LD  A,5
0011B2 D852 180E            12      JR  SNAME3
       D854                     SNAME1:
0011B4 D854 7E               7      LD  A,(HL)
0011B5 D855 0C               4      INC C
0011B6 D856 0D               4      DEC C
0011B7 D857 2009            12      JR  NZ,SNAME3
0011B9 D859 CD70D7          17      CALL    CAP
0011BC D85C FEA0             7      CP  0A0H
0011BE D85E 2002            12      JR  NZ,SNAME3
0011C0 D860 3E20             7      LD  A,020H
       D862                     SNAME3:
0011C2 D862 12               7      LD  (DE),A
0011C3 D863 7E               7      LD  A,(HL)
0011C4 D864 23               6      INC HL
0011C5 D865 CD7DD8          17      CALL    FKAN
0011C8 D868 10EA            13      DJNZ    SNAME1
       D86A                     WTDB:
0011CA D86A 3EFF             7      LD  A,0FFH
0011CC D86C 3239E4          13      LD  (SFILE),A
       D86F                     SWTDBF:
0011CF D86F 3E01             7      LD  A,1
0011D1 D871 32A4E4          13      LD  (_WTDBF),A
0011D4 D874 AF               4      XOR A
0011D5 D875 C9              10      RET
                                
       D876                     FKANC:
0011D6 D876 CB41             8      BIT 0,C
0011D8 D878 CC79D7          17      CALL    Z,CAP2
0011DB D87B 1801            12      JR  FKANX
       D87D                     FKAN:           ;漢字チェック
0011DD D87D 13               6      INC DE
       D87E                     FKANX:
0011DE D87E CB41             8      BIT 0,C
0011E0 D880 CB81             8      RES 0,C
0011E2 D882 C0              11      RET NZ
0011E3 D883 FE80             7      CP  080H
0011E5 D885 D8              11      RET C
0011E6 D886 FEA0             7      CP  0A0H
0011E8 D888 3803            12      JR  C,FKAN1
0011EA D88A FEE0             7      CP  0E0H
0011EC D88C D8              11      RET C
       D88D                     FKAN1:
0011ED D88D 0C               4      INC C
0011EE D88E A7               4      AND A
0011EF D88F C9              10      RET
                                
       D890                     CHKWILDX:
0011F0 D890 FDE5            15      PUSH    IY
0011F2 D892 E1              10      POP HL
0011F3 D893 23               6      INC HL
       D894                     CHKWILD:
0011F4 D894 060B             7      LD  B,11
0011F6 D896 3E3F             7      LD  A,'?'
       D898                     CHKWIL1:
0011F8 D898 BE               7      CP  (HL)
0011F9 D899 23               6      INC HL
0011FA D89A 37               4      SCF
0011FB D89B C8              11      RET Z
0011FC D89C 10FA            13      DJNZ    CHKWIL1
0011FE D89E AF               4      XOR A
0011FF D89F C9              10      RET
                                
       D8A0                     SDIRENT:        ;IY=FCB HL=DIR
001200 D8A0 D5              11      PUSH    DE
001201 D8A1 E5              11      PUSH    HL
001202 D8A2 FDE5            15      PUSH    IY
001204 D8A4 D1              10      POP DE
001205 D8A5 EB               4      EX  DE,HL
001206 D8A6 CD47D8          17      CALL    SETNAME
                                ;               Attribute
001209 D8A9 FD7E0D          19      LD  A,(IY+13)   ;(FCB)属性(アトリビュート)
00120C D8AC 12               7      LD  (DE),A
00120D D8AD 13               6      INC DE
                                ;               Reserved
00120E D8AE AF               4      XOR A
00120F D8AF 060A             7      LD  B,10
       D8B1                     SDE1:
001211 D8B1 12               7      LD  (DE),A
001212 D8B2 13               6      INC DE
001213 D8B3 10FC            13      DJNZ    SDE1
                                                    ;(FCB)更新時刻
001215 D8B5 21E4E5          10      LD  HL,SDDATA       ;(FCB)更新年月日
001218 D8B8 060A             7      LD  B,SDDATAE-SDDATA    ;(FCB)ファイルの先頭クラスタ
       D8BA                     SDLOOP:                 ;(FCB)ファイルのサイズ(バイト単位)
00121A D8BA 7E               7      LD  A,(HL)
00121B D8BB 23               6      INC HL
00121C D8BC 32C1D8          13      LD  (SDPAT),A
00121F D8BF FD7E00          19      LD  A,(IY+0)    ;LD A,(IY+A)
       D8C1                     SDPAT   EQU $-1
001222 D8C2 12               7      LD  (DE),A
001223 D8C3 13               6      INC DE
001224 D8C4 10F4            13      DJNZ    SDLOOP
                                
001226 D8C6 AF               4      XOR A
001227 D8C7 E1              10      POP HL
001228 D8C8 D1              10      POP DE
001229 D8C9 C9              10      RET
                                
       D8CA                     WOPEN:
00122A D8CA FD7E0D          19      LD  A,(IY+13)   ;(FCB)属性(アトリビュート)
00122D D8CD E61F             7      AND 01FH
00122F D8CF 37               4      SCF
001230 D8D0 C0              11      RET NZ
001231 D8D1 FD361CFE        19      LD  (IY+28),0FEH    ;(FCB)オープンモード
       D8D5                     TOPEN2:
001235 D8D5 AF               4      XOR A
       D8D6                     TOPEN:              ;Initializes the time stamp
001236 D8D6 FD3617FF        19      LD  (IY+23),0FFH    ;(FCB)更新時刻
00123A D8DA C9              10      RET
                                
       D8DB                     WRDFX:
00123B D8DB 3A4FD7          13      LD  A,(SPCPAT)  ;1クラスタの論理セクタ
       D8DE                     L_WRFX:
00123E D8DE 1F               4      RRA         ;->CF
00123F D8DF 3806            12      JR  C,E_WRFX
001241 D8E1 CB39             8      SRL C
001243 D8E3 CB1C             8      RR  H       ;CH=CH/2
001245 D8E5 18F7            12      JR  L_WRFX
       D8E7                     E_WRFX:
001247 D8E7 41               4      LD  B,C
001248 D8E8 4C               4      LD  C,H
001249 D8E9 03               6      INC BC
00124A D8EA 3E37             7      LD  A,037H      ;SCF
00124C D8EC 3247DD          13      LD  (DRDN1),A
                                
       D8EF                     WRDF:               ;BCクラスタ分FATを確保する
00124F D8EF 110200          10      LD  DE,2
001252 D8F2 AF               4      XOR A
001253 D8F3 32B7DE          13      LD  (_SECPS),A
       D8F6                     WRDF1:
001256 D8F6 C5              11      PUSH    BC
001257 D8F7 D5              11      PUSH    DE
001258 D8F8 CDF7E4          17      CALL    _GNCL
00125B D8FB 381C            12      JR  C,WRDF3
00125D D8FD 7A               4      LD  A,D     ;空いているかチェック
00125E D8FE B3               4      OR  E
00125F D8FF 202A            12      JR  NZ,WRDF4
001261 D901 E1              10      POP HL      ;HL=空いているクラスタ
001262 D902 E5              11      PUSH    HL
001263 D903 ED5BFEE5        20      LD  DE,(_CLPS)  ;DE=元の(_CLPS)
001267 D907 22FEE5          16      LD  (_CLPS),HL
00126A D90A 7A               4      LD  A,D     ;元の(_CLPS)が 0 か?
00126B D90B B3               4      OR  E
00126C D90C 2008            12      JR  NZ,WRDF2
00126E D90E FD751A          19      LD  (IY+26),L   ;(FCB)ファイルの先頭クラスタ
001271 D911 FD741B          19      LD  (IY+27),H   ;元が空の場合はFCBにクラスタをセットする
001274 D914 1803            12      JR  WRDF3
       D916                     WRDF2:
001276 D916 CDFAE4          17      CALL    _SNCL
       D919                     WRDF3:
001279 D919 D1              10      POP DE
00127A D91A C1              10      POP BC
00127B D91B D8              11      RET C
00127C D91C 0B               6      DEC BC
00127D D91D 78               4      LD  A,B
00127E D91E B1               4      OR  C
00127F D91F 200C            12      JR  NZ,WRDF5    ;ここでループカウンタチェック
001281 D921 ED5BFEE5        20      LD  DE,(_CLPS)
001285 D925 21FFFF          10      LD  HL,0FFFFH   ;FATエントリ終了(EOCマーク)
001288 D928 C3FAE4          10      JP  _SNCL
                                
       D92B                     WRDF4:              ;DEクラスタが空じゃないので次に移動する
00128B D92B D1              10      POP DE
00128C D92C C1              10      POP BC
       D92D                     WRDF5:
00128D D92D 13               6      INC DE
00128E D92E CD68D7          17      CALL    ENDCL
001291 D931 38C3            12      JR  C,WRDF1
001293 D933 37               4      SCF
001294 D934 C9              10      RET
                                
       D935                     RWXR:
001295 D935 3A54DC          13      LD  A,(SECSZ+2) ;1024=4 / 512=2 / 256=1
       D938                     L_RWX:
001298 D938 1F               4      RRA     ;->CF
001299 D939 3808            12      JR  C,E_RWX
00129B D93B CB38             8      SRL B   ;BCH=BCH/2
00129D D93D CB19             8      RR  C   ;
00129F D93F CB1C             8      RR  H   ;
0012A1 D941 18F5            12      JR  L_RWX
       D943                     E_RWX:
0012A3 D943 FD5E1A          19      LD  E,(IY+26)   ;(FCB)ファイルの先頭クラスタ
0012A6 D946 FD561B          19      LD  D,(IY+27)
0012A9 D949 AF               4      XOR A
0012AA D94A 32B7DE          13      LD  (_SECPS),A
       D94D                     RWX1:
0012AD D94D ED53FEE5        20      LD  (_CLPS),DE
0012B1 D951 7A               4      LD  A,D
0012B2 D952 B3               4      OR  E
0012B3 D953 2813            12      JR  Z,SCF_RET   ;RET DE==0 => CF=1
                                
0012B5 D955 78               4      LD  A,B
0012B6 D956 B1               4      OR  C
0012B7 D957 B4               4      OR  H
0012B8 D958 C8              11      RET Z       ;RET BCH==0 => CF=0
                                
0012B9 D959 CDBFDE          17      CALL    GNCLX
0012BC D95C D8              11      RET C
0012BD D95D 7C               4      LD  A,H     ;
0012BE D95E 25               4      DEC H       ;
0012BF D95F B7               4      OR  A       ;DEC BCH
0012C0 D960 2001            12      JR  NZ,RWX2     ;
0012C2 D962 0B               6      DEC BC      ;
       D963                     RWX2:
0012C3 D963 CD68D7          17      CALL    ENDCL
0012C6 D966 38E5            12      JR  C,RWX1
       D968                     SCF_RET:
0012C8 D968 37               4      SCF
0012C9 D969 C9              10      RET
                                
       D96A                     DSKF:
0012CA D96A 110000          10      LD  DE,0
       D96B                     MAXCLP  EQU $-2
0012CD D96D 2AACE4          16      LD  HL,(_FAKEFREE)
0012D0 D970 7C               4      LD  A,H
0012D1 D971 B5               4      OR  L
0012D2 D972 2803            12      JR  Z,DSKF1
0012D4 D974 110100          10      LD  DE,1
       D977                     DSKF1:
0012D7 D977 D5              11      PUSH    DE
0012D8 D978 CDF7E4          17      CALL    _GNCL
0012DB D97B 380C            12      JR  C,POPSCF
0012DD D97D 7A               4      LD  A,D
0012DE D97E B3               4      OR  E
0012DF D97F 2001            12      JR  NZ,DSKF2
0012E1 D981 23               6      INC HL
       D982                     DSKF2:
0012E2 D982 D1              10      POP DE
0012E3 D983 1B               6      DEC DE
0012E4 D984 7A               4      LD  A,D
0012E5 D985 B3               4      OR  E
0012E6 D986 20EF            12      JR  NZ,DSKF1
0012E8 D988 C9              10      RET
                                
       D989                     POPSCF:
0012E9 D989 F1              10      POP AF
0012EA D98A 37               4      SCF
0012EB D98B C9              10      RET
                                
       D98C                     SETTMS:
0012EC D98C FD7E17          19      LD  A,(IY+23)   ;(FCB)ファイルを最後に変更した時刻
0012EF D98F 3C               4      INC A
0012F0 D990 C0              11      RET NZ      ;ファイルが更新されていない
       D991                     SETTMSX:            ;FCBに日付時刻をセットする
0012F1 D991 CD69D1          17      CALL    _SYS2C      ;(BDOS)時刻の獲得
                                                ;H←時  L←分  D←秒
0012F4 D994 CB25             8      SLA L       ;   *2
0012F6 D996 CB25             8      SLA L       ;   *4
0012F8 D998 29              11      ADD HL,HL       ;*2 *8
0012F9 D999 29              11      ADD HL,HL       ;*4 *16
0012FA D99A 29              11      ADD HL,HL       ;*8 *32
0012FB D99B 7A               4      LD  A,D
0012FC D99C 0F               4      RRCA            ;bit.0->7->->->0->C
0012FD D99D E61F             7      AND 01FH
0012FF D99F B5               4      OR  L
001300 D9A0 FD7716          19      LD  (IY+22),A   ;(FCB)ファイルを最後に変更した時刻
001303 D9A3 FD7417          19      LD  (IY+23),H
                                
001306 D9A6 CD63D1          17      CALL    _SYS2A      ;(BDOS)日付の獲得
                                                ;HL←年  D←月  E←日
001309 D9A9 0144F8          10      LD  BC,0-1980
00130C D9AC 09              11      ADD HL,BC
00130D D9AD 65               4      LD  H,L
                                
00130E D9AE 7A               4      LD  A,D
00130F D9AF 87               4      ADD A,A     ;*2
001310 D9B0 87               4      ADD A,A     ;*4
001311 D9B1 87               4      ADD A,A     ;*8
001312 D9B2 87               4      ADD A,A     ;*16
001313 D9B3 6F               4      LD  L,A
001314 D9B4 29              11      ADD HL,HL       ;*32
001315 D9B5 7D               4      LD  A,L
001316 D9B6 B3               4      OR  E
001317 D9B7 FD7714          19      LD  (IY+20),A   ;(FCB)ファイルを最後に変更した日付
00131A D9BA FD7415          19      LD  (IY+21),H
00131D D9BD C9              10      RET
                                
       D9BE                     PUSHRR:
00131E D9BE 3256DA          13      LD  (SETSEQ_SWC_RND),A
001321 D9C1 2268DA          16      LD  (SETSEQ_SWC_SEQ_RR),HL
001324 D9C4 CDE4D9          17      CALL    GET_RR_AHL
001327 D9C7 220FE4          16      LD  (RR_BUF_HL),HL
00132A D9CA 3211E4          13      LD  (RR_BUF_A),A
00132D D9CD C9              10      RET
                                
       D9CE                     GET_CPM_R_SIZE:     ;バイト単位からCP/Mのレコード単位を求める（1レコード=128バイト）
00132E D9CE 87               4      ADD A,A     ;in BHLA => out AHL
00132F D9CF ED6A            15      ADC HL,HL
001331 D9D1 CB18             8      RR  B
001333 D9D3 B7               4      OR  A
001334 D9D4 78               4      LD  A,B     ;ここでフラグは変化しない
001335 D9D5 C8              11      RET Z
001336 D9D6 2C               4      INC L       ;INC AHL
001337 D9D7 C0              11      RET NZ      ;
001338 D9D8 24               4      INC H       ;
001339 D9D9 C0              11      RET NZ      ;
00133A D9DA 3C               4      INC A       ;
00133B D9DB C9              10      RET
                                
       D9DC                     INIT_RND:
00133C D9DC 3ECD             7      LD  A,0CDH      ;CALL ????
00133E D9DE 212BDA          10      LD  HL,POPRR
001341 D9E1 CDBED9          17      CALL    PUSHRR
       D9E4                     GET_RR_AHL:
001344 D9E4 FD6E21          19      LD  L,(IY+33)   ;(FCB)Random record
001347 D9E7 FD6622          19      LD  H,(IY+34)   ;
00134A D9EA FD7E23          19      LD  A,(IY+35)   ;
00134D D9ED C9              10      RET
       D9EE                     SET_RR_AHL:
00134E D9EE FD7521          19      LD  (IY+33),L   ;(FCB)Random record
001351 D9F1 FD7422          19      LD  (IY+34),H
001354 D9F4 FD7723          19      LD  (IY+35),A
001357 D9F7 C9              10      RET
       D9F8                     INIT_SEQ:
001358 D9F8 3E01             7      LD  A,1     ;LD BC,????
00135A D9FA 2128DA          10      LD  HL,SETSEQ
00135D D9FD CDBED9          17      CALL    PUSHRR
       DA00                     GETSEQ:
001360 DA00 FD6E20          19      LD  L,(IY+32)   ;(FCB)カレントレコード
001363 DA03 FD660C          19      LD  H,(IY+12)   ;(FCB)カレントブロック
001366 DA06 AF               4      XOR A
                                
001367 DA07 CB25             8      SLA L   ;L=L*2
                                
001369 DA09 CB3C             8      SRL H   ;HL=HL/2
00136B DA0B CB1D             8      RR  L   ;
00136D DA0D C9              10      RET
                                
       DA0E                     SETSEQ1:
00136E DA0E F5              11      PUSH    AF
00136F DA0F E5              11      PUSH    HL      ;AHL=Random record
001370 DA10 CDE4D9          17      CALL    GET_RR_AHL
001373 DA13 47               4      LD  B,A     ;AHL→HLA
001374 DA14 7D               4      LD  A,L     ;(IY+33)(FCB)ランダムレコード
001375 DA15 6C               4      LD  L,H     ;(IY+34)
001376 DA16 60               4      LD  H,B     ;(IY+35)
001377 DA17 0600             7      LD  B,0
                                
001379 DA19 CDCED9          17      CALL    GET_CPM_R_SIZE
                                
00137C DA1C 29              11      ADD HL,HL
00137D DA1D CB3D             8      SRL L       ;L=L/2
00137F DA1F FD7520          19      LD  (IY+32),L   ;(FCB)カレントレコード
001382 DA22 FD740C          19      LD  (IY+12),H   ;(FCB)カレントブロック
001385 DA25 E1              10      POP HL
001386 DA26 F1              10      POP AF
001387 DA27 C9              10      RET
       DA28                     SETSEQ:
001388 DA28 CD0EDA          17      CALL    SETSEQ1
       DA2B                     POPRR:
00138B DA2B F5              11      PUSH    AF
00138C DA2C E5              11      PUSH    HL
00138D DA2D 2A0FE4          16      LD  HL,(RR_BUF_HL)
001390 DA30 3A11E4          13      LD  A,(RR_BUF_A)
001393 DA33 CDEED9          17      CALL    SET_RR_AHL
001396 DA36 E1              10      POP HL
001397 DA37 F1              10      POP AF
001398 DA38 C9              10      RET
                                
       DA39                     RB_WRITE:
001399 DA39 C5              11      PUSH    BC
00139A DA3A ED4B4CE5        20      LD  BC,(STABLE+2*026H)  ;(BDOS)ランダムブロック書き込み
00139E DA3E 1805            12      JR  RBRW
       DA40                     RB_READ:
0013A0 DA40 C5              11      PUSH    BC
0013A1 DA41 ED4B4EE5        20      LD  BC,(STABLE+2*027H)  ;(BDOS)ランダムブロック読み込み
       DA45                     RBRW:
0013A5 DA45 1F               4      RRA     ;AHL = AHL*128
0013A6 DA46 7C               4      LD  A,H ;AHL = AHL0/2
0013A7 DA47 1F               4      RRA     ;A
0013A8 DA48 65               4      LD  H,L ;
0013A9 DA49 CB1C             8      RR  H   ;H
0013AB DA4B 2E00             7      LD  L,0 ;
0013AD DA4D CB1D             8      RR  L   ;L
0013AF DA4F CDEED9          17      CALL    SET_RR_AHL
0013B2 DA52 218000          10      LD  HL,128
0013B5 DA55 C5              11      PUSH    BC
       DA56                     SETSEQ_SWC_RND:
0013B6 DA56 CD0EDA          17      CALL    SETSEQ1
0013B9 DA59 C1              10      POP BC
0013BA DA5A FDCB20FE        23      SET 7,(IY+32)   ;(FCB)カレントレコード
0013BE DA5E FDE5            15      PUSH    IY
0013C0 DA60 D1              10      POP DE
0013C1 DA61 D5              11      PUSH    DE
0013C2 DA62 CD70DA          17      CALL    JP_BC
0013C5 DA65 FDE1            14      POP IY
0013C7 DA67 CD28DA          17      CALL    SETSEQ
       DA68                     SETSEQ_SWC_SEQ_RR   EQU $-2
0013CA DA6A FDCB20BE        23      RES 7,(IY+32)   ;(FCB)カレントレコード
                                
0013CE DA6E C1              10      POP BC
0013CF DA6F C9              10      RET
       DA70                     JP_BC:
0013D0 DA70 C5              11      PUSH    BC
0013D1 DA71 C9              10      RET
                                
       D5F9                     _SYS03  EQU SCF_FF_RET  ;(BDOS)外部入力
       D5F9                     _SYS2B  EQU SCF_FF_RET  ;(BDOS)日付の設定
       D5F9                     _SYS2D  EQU SCF_FF_RET  ;(BDOS)時刻の設定
       D5F9                     _SYS39  EQU SCF_FF_RET  ;(BDOS)サブディレクトリの作成
       D5F9                     _SYS3A  EQU SCF_FF_RET  ;(BDOS)サブディレクトリの削除
                                
[EOF:LDFILE.ASM:SHIFT_JIS]
                                    INCLUDE "LDFILE2.ASM"
                                
                                ;   LSX-Dodgers FILE2
                                
                                                ;Write random block
       DA72                     _SYS26:     ;(BDOS)ランダムブロック書き込み
0013D2 DA72 AF               4      XOR A
0013D3 DA73 3247DD          13      LD  (DRDN1),A   ;NOP
0013D6 DA76 2297DC          16      LD  (RBSIZE),HL ;HL←書き込むレコード数
0013D9 DA79 225DE4          16      LD  (LEFTX),HL
0013DC DA7C CD42D5          17      CALL    SETDRV
                                
0013DF DA7F CDEFDB          17      CALL    RBX0
0013E2 DA82 DA0FDB          10      JP  C,RBWERR
0013E5 DA85 CDCAD8          17      CALL    WOPEN
0013E8 DA88 DA0FDB          10      JP  C,RBWERR
0013EB DA8B 7C               4      LD  A,H
0013EC DA8C B5               4      OR  L
0013ED DA8D CA08DB          10      JP  Z,RBW1
                                
0013F0 DA90 2B               6      DEC HL
                                
0013F1 DA91 CDADDC          17      CALL    GET_RR_BCDE ;BCDE=Random record
                                
0013F4 DA94 19              11      ADD HL,DE       ;BCHL=HL+BCDE
0013F5 DA95 3001            12      JR  NC,S26X1    ;
0013F7 DA97 03               6      INC BC      ;
       DA98                     S26X1:
0013F8 DA98 CD35D9          17      CALL    RWXR
0013FB DA9B DCDBD8          17      CALL    C,WRDFX
0013FE DA9E DA0FDB          10      JP  C,RBWERR
                                
001401 DAA1 CD1EDC          17      CALL    RBX2
001404 DAA4 281A            12      JR  Z,RBWB      ;NZ=セクタ以下の端数がある
001406 DAA6 CD3DDC          17      CALL    RBXA
001409 DAA9 3864            12      JR  C,RBWERR
00140B DAAB EB               4      EX  DE,HL
00140C DAAC C5              11      PUSH    BC
00140D DAAD EDB0                    LDIR
00140F DAAF 225FE4          16      LD  (DTAX),HL
                                
001412 DAB2 CD6FD8          17      CALL    SWTDBF      ;バッファデータは更新された
                                
001415 DAB5 2A5DE4          16      LD  HL,(LEFTX)
001418 DAB8 D1              10      POP DE
001419 DAB9 ED52            15      SBC HL,DE
00141B DABB 225DE4          16      LD  (LEFTX),HL
00141E DABE 2831            12      JR  Z,RBWEND
                                
       DAC0                     RBWB:
001420 DAC0 CD72DC          17      CALL    RBXB
001423 DAC3 2814            12      JR  Z,RBWC
       DAC5                     RBWB1:
001425 DAC5 C5              11      PUSH    BC
001426 DAC6 D5              11      PUSH    DE
001427 DAC7 CD4BD7          17      CALL    CLUSTX
00142A DACA CDC1DC          17      CALL    DWTC
00142D DACD D1              10      POP DE
00142E DACE C1              10      POP BC
00142F DACF D4BFDE          17      CALL    NC,GNCLX
001432 DAD2 383B            12      JR  C,RBWERR
001434 DAD4 10EF            13      DJNZ    RBWB1
001436 DAD6 CD11DD          17      CALL    DRW_FLUSH
       DAD9                     RBWC:
001439 DAD9 CD8ADC          17      CALL    RBXC
00143C DADC 2813            12      JR  Z,RBWEND
00143E DADE C5              11      PUSH    BC
00143F DADF CD4BD7          17      CALL    CLUSTX
001442 DAE2 CD46DD          17      CALL    DRDN
001445 DAE5 C1              10      POP BC
001446 DAE6 3827            12      JR  C,RBWERR
001448 DAE8 ED5B7EE5        20      LD  DE,(_DTBUF)
00144C DAEC EDB0                    LDIR
00144E DAEE CD6FD8          17      CALL    SWTDBF      ;バッファデータは更新された
       DAF1                     RBWEND:
001451 DAF1 CD96DC          17      CALL    RBXEND
                                
001454 DAF4 CDFEDB          17      CALL    RBX1
001457 DAF7 300F            12      JR  NC,RBW1     ;ランダムレコードの方が大きい場合はサイズを合わせる
001459 DAF9 CDADDC          17      CALL    GET_RR_BCDE ;BCDE=Random record
00145C DAFC FD7310          19      LD  (IY+16),E   ;ファイルのサイズ(バイト単位)
00145F DAFF FD7211          19      LD  (IY+17),D   ;
001462 DB02 FD7112          19      LD  (IY+18),C   ;
001465 DB05 FD7013          19      LD  (IY+19),B   ;
       DB08                     RBW1:
001468 DB08 FDE1            14      POP IY
00146A DB0A C1              10      POP BC
00146B DB0B D1              10      POP DE
00146C DB0C E1              10      POP HL
       DB0D                     DD_NUL:
00146D DB0D AF               4      XOR A
       DB0E                     DRDF0:
       DB0E                     DWTF0:
00146E DB0E C9              10      RET
                                
       DB0F                     RBWERR:
00146F DB0F FDE5            15      PUSH    IY
001471 DB11 D1              10      POP DE
001472 DB12 2A20E5          16      LD  HL,(STABLE+2*010H)
001475 DB15 CD0F00          17      CALL    JP_HL
       DB18                     RBRERR1:
001478 DB18 3E01             7      LD  A,001H
       DB1A                     RBRERR2:
00147A DB1A FDE1            14      POP IY
00147C DB1C C1              10      POP BC
00147D DB1D D1              10      POP DE
00147E DB1E E1              10      POP HL
00147F DB1F 37               4      SCF
001480 DB20 210000          10      LD  HL,0
001483 DB23 C9              10      RET
                                
       DB24                     RBRERR:
001484 DB24 3EFF             7      LD  A,0FFH
001486 DB26 18F2            12      JR  RBRERR2
                                
       DB28                     RBRFL:
001488 DB28 3E00             7  RBRFLP: LD  A,000H
00148A DB2A FE0D             7      CP  00DH
00148C DB2C 2005            12      JR  NZ,RBRFL1
00148E DB2E D5              11      PUSH    DE
00148F DB2F 1E0A             7      LD  E,00AH
001491 DB31 1805            12      JR  RBRFL2
       DB33                     RBRFL1:
001493 DB33 D5              11      PUSH    DE
001494 DB34 CD09E4          17      CALL    _SYS07
001497 DB37 5F               4      LD  E,A
       DB38                     RBRFL2:
001498 DB38 CDCDE4          17      CALL    _PRINT
00149B DB3B 7B               4      LD  A,E
00149C DB3C D1              10      POP DE
00149D DB3D 3229DB          13      LD  (RBRFLP+1),A
0014A0 DB40 C9              10      RET
       DB41                     DDX:
0014A1 DB41 FD7E01          19      LD  A,(IY+1)    ;(FCB)主ファイル名
0014A4 DB44 CD70D7          17      CALL    CAP
0014A7 DB47 FE41             7      CP  'A'
0014A9 DB49 C9              10      RET
                                
                                                ;Read random block
       DB4A                     _SYS27:     ;(BDOS)ランダムブロック読み込み
0014AA DB4A 225DE4          16      LD  (LEFTX),HL
0014AD DB4D CD42D5          17      CALL    SETDRV
                                
0014B0 DB50 FDCB0D66        20      BIT 4,(IY+13)   ;(FCB)属性(アトリビュート)
0014B4 DB54 C2DDDB          10      JP  NZ,RBRDIR   ;ディレクトリ
0014B7 DB57 CDEFDB          17      CALL    RBX0
0014BA DB5A DA24DB          10      JP  C,RBRERR
0014BD DB5D CDFEDB          17      CALL    RBX1
0014C0 DB60 D416DC          17      CALL    NC,RBX1R
0014C3 DB63 DA18DB          10      JP  C,RBRERR1
0014C6 DB66 EB               4      EX  DE,HL
0014C7 DB67 ED52            15      SBC HL,DE       ;CP 00HL,BCDE
0014C9 DB69 19              11      ADD HL,DE
0014CA DB6A 79               4      LD  A,C
0014CB DB6B DE00             7      SBC A,0
0014CD DB6D 78               4      LD  A,B
0014CE DB6E DE00             7      SBC A,0
0014D0 DB70 3801            12      JR  C,RBR1
0014D2 DB72 EB               4      EX  DE,HL
       DB73                     RBR1:
0014D3 DB73 9F               4      SBC A,A
0014D4 DB74 E601             7      AND 1
0014D6 DB76 32DBDB          13      LD  (RBRAP+1),A
                                
0014D9 DB79 7C               4      LD  A,H
0014DA DB7A B5               4      OR  L
0014DB DB7B 2857            12      JR  Z,RBREND0
                                
0014DD DB7D 2297DC          16      LD  (RBSIZE),HL ;HL←読み込むレコード数
0014E0 DB80 225DE4          16      LD  (LEFTX),HL
                                
0014E3 DB83 CD1EDC          17      CALL    RBX2
0014E6 DB86 2819            12      JR  Z,RBRB
0014E8 DB88 CD3DDC          17      CALL    RBXA
0014EB DB8B DA24DB          10      JP  C,RBRERR
0014EE DB8E C5              11      PUSH    BC
0014EF DB8F EDB0                    LDIR
0014F1 DB91 ED535FE4        20      LD  (DTAX),DE
0014F5 DB95 2A5DE4          16      LD  HL,(LEFTX)
0014F8 DB98 D1              10      POP DE
0014F9 DB99 A7               4      AND A
0014FA DB9A ED52            15      SBC HL,DE
0014FC DB9C 225DE4          16      LD  (LEFTX),HL
0014FF DB9F 2830            12      JR  Z,RBREND
                                
       DBA1                     RBRB:
001501 DBA1 CD72DC          17      CALL    RBXB
001504 DBA4 2815            12      JR  Z,RBRC
       DBA6                     RBRB1:
001506 DBA6 C5              11      PUSH    BC
001507 DBA7 D5              11      PUSH    DE
001508 DBA8 CD4BD7          17      CALL    CLUSTX
00150B DBAB CDC7DC          17      CALL    DRDC
00150E DBAE D1              10      POP DE
00150F DBAF C1              10      POP BC
001510 DBB0 D4BFDE          17      CALL    NC,GNCLX
001513 DBB3 DA24DB          10      JP  C,RBRERR
001516 DBB6 10EE            13      DJNZ    RBRB1
001518 DBB8 CD11DD          17      CALL    DRW_FLUSH
       DBBB                     RBRC:
00151B DBBB CD8ADC          17      CALL    RBXC
00151E DBBE 2811            12      JR  Z,RBREND
001520 DBC0 C5              11      PUSH    BC
001521 DBC1 CD4BD7          17      CALL    CLUSTX
001524 DBC4 CD2ADD          17      CALL    DRDX
001527 DBC7 C1              10      POP BC
001528 DBC8 DA24DB          10      JP  C,RBRERR
00152B DBCB EB               4      EX  DE,HL
00152C DBCC 2A7EE5          16      LD  HL,(_DTBUF)
00152F DBCF EDB0                    LDIR
       DBD1                     RBREND:
001531 DBD1 CD96DC          17      CALL    RBXEND
       DBD4                     RBREND0:
001534 DBD4 FDE1            14      POP IY
001536 DBD6 C1              10      POP BC
001537 DBD7 D1              10      POP DE
001538 DBD8 F1              10      POP AF  ;(HL)
001539 DBD9 AF               4      XOR A
00153A DBDA 3E00             7  RBRAP:  LD  A,000H
00153C DBDC C9              10      RET
                                
       DBDD                     RBRDIR:
00153D DBDD FD6E1A          19      LD  L,(IY+26)   ;(FCB)ファイルの先頭クラスタ
001540 DBE0 FD661B          19      LD  H,(IY+27)
001543 DBE3 CD86D7          17      CALL    CHDIR
001546 DBE6 AF               4      XOR A
001547 DBE7 67               4      LD  H,A
001548 DBE8 6F               4      LD  L,A
001549 DBE9 3C               4      INC A
00154A DBEA 32DBDB          13      LD  (RBRAP+1),A
00154D DBED 18E5            12      JR  RBREND0
                                
       DBEF                     RBX0:
00154F DBEF 2A8AE4          16      LD  HL,(_DTA)
001552 DBF2 225FE4          16      LD  (DTAX),HL
001555 DBF5 2A5DE4          16      LD  HL,(LEFTX)
001558 DBF8 FD7E1C          19      LD  A,(IY+28)   ;(FCB)オープンモード
00155B DBFB D6FD             7      SUB 0FDH
00155D DBFD C9              10      RET
                                
       DBFE                     RBX1:               ;ファイルサイズとランダムレコードを比べる
00155E DBFE E5              11      PUSH    HL      ;Record byte
                                                ;AHL=File size
00155F DBFF FD6E10          19      LD  L,(IY+16)   ;ファイルのサイズ(バイト単位)
001562 DC02 FD6611          19      LD  H,(IY+17)   ;
001565 DC05 FD7E12          19      LD  A,(IY+18)   ;
                                
001568 DC08 CDADDC          17      CALL    GET_RR_BCDE ;BCDE=Random record
                                
00156B DC0B A7               4      AND A
00156C DC0C ED52            15      SBC HL,DE
00156E DC0E 99               4      SBC A,C
00156F DC0F 4F               4      LD  C,A
001570 DC10 FD7E13          19      LD  A,(IY+19)   ;ファイルのサイズ
001573 DC13 98               4      SBC A,B
001574 DC14 D1              10      POP DE
001575 DC15 C9              10      RET
       DC16                     RBX1R:
001576 DC16 47               4      LD  B,A
001577 DC17 B1               4      OR  C
001578 DC18 EB               4      EX  DE,HL   ;BCDE=File byte HL=Record byte
001579 DC19 B2               4      OR  D
00157A DC1A B3               4      OR  E
00157B DC1B C0              11      RET NZ
00157C DC1C 37               4      SCF
00157D DC1D C9              10      RET
                                
       DC1E                     RBX2:               ;Cluster settings
00157E DC1E FD6622          19      LD  H,(IY+34)   ;(+33)(FCB)ランダムレコード
001581 DC21 FD4E23          19      LD  C,(IY+35)
001584 DC24 0600             7      LD  B,0
001586 DC26 FDCB207E        20      BIT 7,(IY+32)   ;(FCB)カレントレコード
00158A DC2A 2003            12      JR  NZ,RBX3
00158C DC2C FD4624          19      LD  B,(IY+36)
       DC2F                     RBX3:
00158F DC2F CD35D9          17      CALL    RWXR
001592 DC32 3A54DC          13      LD  A,(SECSZ+2) ;1024=4 / 512=2 / 256=1
001595 DC35 3D               4      DEC A
001596 DC36 FDA622          19      AND (IY+34)
001599 DC39 FDB621          19      OR  (IY+33)
00159C DC3C C9              10      RET
                                
       DC3D                     RBXA:
00159D DC3D C5              11      PUSH    BC
00159E DC3E D5              11      PUSH    DE
00159F DC3F CD4BD7          17      CALL    CLUSTX
0015A2 DC42 CD2ADD          17      CALL    DRDX
0015A5 DC45 D1              10      POP DE
0015A6 DC46 C1              10      POP BC
0015A7 DC47 D4BFDE          17      CALL    NC,GNCLX
0015AA DC4A D8              11      RET C
0015AB DC4B ED53FEE5        20      LD  (_CLPS),DE
                                
0015AF DC4F FD4E21          19      LD  C,(IY+33)   ;(FCB)ランダムレコード
0015B2 DC52 210004          10  SECSZ:  LD  HL,0400H    ;自己書き換え 1024=0400H / 512=0200H ここに1セクタのサイズが格納される
0015B5 DC55 7C               4      LD  A,H
0015B6 DC56 3D               4      DEC A       ;1024=3 / 512=1
0015B7 DC57 FDA622          19      AND (IY+34)     ;(FCB)ランダムレコード
0015BA DC5A 47               4      LD  B,A     ;BCに1セクタ以下の端数が入る
0015BB DC5B ED42            15      SBC HL,BC       ;残りを計算
                                
0015BD DC5D ED5B5DE4        20      LD  DE,(LEFTX)
0015C1 DC61 ED52            15      SBC HL,DE       ;CP HL,DE
0015C3 DC63 19              11      ADD HL,DE       ;
0015C4 DC64 3801            12      JR  C,RBXA1     ;DEとHLを比較して大きい方をHLに
0015C6 DC66 EB               4      EX  DE,HL
       DC67                     RBXA1:
0015C7 DC67 E5              11      PUSH    HL
0015C8 DC68 2A7EE5          16      LD  HL,(_DTBUF)
0015CB DC6B 09              11      ADD HL,BC
0015CC DC6C ED5B5FE4        20      LD  DE,(DTAX)
0015D0 DC70 C1              10      POP BC
0015D1 DC71 C9              10      RET
                                
       DC72                     RBXB:
0015D2 DC72 2A5FE4          16      LD  HL,(DTAX)
0015D5 DC75 ED5BFEE5        20      LD  DE,(_CLPS)
0015D9 DC79 3A5EE4          13      LD  A,(LEFTX+1)
0015DC DC7C 47               4      LD  B,A
0015DD DC7D 3A54DC          13      LD  A,(SECSZ+2) ;1024=4 / 512=2 / 256=1
       DC80                     RBXB1:
0015E0 DC80 1F               4      RRA     ;->CF
0015E1 DC81 3804            12      JR  C,RBXB2
0015E3 DC83 CB38             8      SRL B   ;B=B/2
0015E5 DC85 18F9            12      JR  RBXB1
       DC87                     RBXB2:
0015E7 DC87 78               4      LD  A,B
0015E8 DC88 B7               4      OR  A
0015E9 DC89 C9              10      RET
                                
       DC8A                     RBXC:
0015EA DC8A ED4B5DE4        20      LD  BC,(LEFTX)
0015EE DC8E 3A54DC          13      LD  A,(SECSZ+2) ;1024=4 / 512=2 / 256=1
0015F1 DC91 3D               4      DEC A
0015F2 DC92 A0               4      AND B
0015F3 DC93 47               4      LD  B,A     ;1セクタ以下の端数がない場合はZ
0015F4 DC94 B1               4      OR  C
0015F5 DC95 C9              10      RET
                                
       DC96                     RBXEND:             ;レコード数だけランダムレコードを進める
0015F6 DC96 110000          10      LD  DE,0        ;進めるレコード数(RBSIZE)
       DC97                     RBSIZE  EQU $-2
0015F9 DC99 CDE4D9          17      CALL    GET_RR_AHL
0015FC DC9C 19              11      ADD HL,DE
0015FD DC9D CE00             7      ADC A,0
0015FF DC9F CDEED9          17      CALL    SET_RR_AHL
001602 DCA2 EB               4      EX  DE,HL       ;HL=進めるレコード数
001603 DCA3 D0              11      RET NC
001604 DCA4 FDCB207E        20      BIT 7,(IY+32)   ;(FCB)カレントレコード
001608 DCA8 C0              11      RET NZ
001609 DCA9 FD3424          23      INC (IY+36)
00160C DCAC C9              10      RET
                                
       DCAD                     GET_RR_BCDE:            ;BCDE=Random record
00160D DCAD FD5E21          19      LD  E,(IY+33)   ;(FCB)ランダムレコード
001610 DCB0 FD5622          19      LD  D,(IY+34)
001613 DCB3 FD4E23          19      LD  C,(IY+35)
001616 DCB6 0600             7      LD  B,0     ;CP/M互換のアクセスの場合はFCBは36バイト
001618 DCB8 FDCB207E        20      BIT 7,(IY+32)   ;(FCB)カレントレコード
00161C DCBC C0              11      RET NZ
00161D DCBD FD4624          19      LD  B,(IY+36)
001620 DCC0 C9              10      RET
                                
                                ;   ランダムブロックアクセスの連続したセクタをまとめる
                                
       DCC1                     DWTC:
001621 DCC1 E5              11      PUSH    HL
001622 DCC2 2151E0          10      LD  HL,DWT24B
001625 DCC5 1804            12      JR  DWTC1
       DCC7                     DRDC:
001627 DCC7 E5              11      PUSH    HL
001628 DCC8 2141E0          10      LD  HL,DRD24B
       DCCB                     DWTC1:
00162B DCCB 2225DD          16      LD  (DRWF_MODE),HL
00162E DCCE E1              10      POP HL
00162F DCCF 3A15DD          13      LD  A,(DRWF_B)
001632 DCD2 B7               4      OR  A
001633 DCD3 200F            12      JR  NZ,DRDC1
       DCD5                     SAVE_DRWC:
001635 DCD5 0601             7      LD  B,1
001637 DCD7 ED4314DD        20      LD  (DRWF_C),BC
00163B DCDB ED531BDD        20      LD  (DRWF_E),DE
00163F DCDF 221EDD          16      LD  (DRWF_HL),HL
001642 DCE2 1820            12      JR  INC_HL_DRWC
       DCE4                     DRDC1:
001644 DCE4 E5              11      PUSH    HL
001645 DCE5 211BDD          10      LD  HL,DRWF_E
001648 DCE8 86               7      ADD A,(HL)
001649 DCE9 F5              11      PUSH    AF
00164A DCEA BB               4      CP  E
00164B DCEB 201D            12      JR  NZ,DRDC2
00164D DCED F1              10      POP AF
00164E DCEE 23               6      INC HL
00164F DCEF 7E               7      LD  A,(HL)
001650 DCF0 CE00             7      ADC A,0
001652 DCF2 F5              11      PUSH    AF
001653 DCF3 BA               4      CP  D
001654 DCF4 2014            12      JR  NZ,DRDC2
001656 DCF6 F1              10      POP AF
001657 DCF7 3A14DD          13      LD  A,(DRWF_C)
00165A DCFA CE00             7      ADC A,0
00165C DCFC B9               4      CP  C
00165D DCFD 200C            12      JR  NZ,DRDC3
00165F DCFF 2115DD          10      LD  HL,DRWF_B
001662 DD02 34              11      INC (HL)
001663 DD03 E1              10      POP HL
       DD04                     INC_HL_DRWC:
001664 DD04 3A54DC          13      LD  A,(SECSZ+2)     ;1セクタのサイズの上位1バイト
001667 DD07 84               4      ADD A,H
001668 DD08 67               4      LD  H,A
001669 DD09 C9              10      RET
       DD0A                     DRDC2:
00166A DD0A F1              10      POP AF
       DD0B                     DRDC3:
00166B DD0B CD11DD          17      CALL    DRW_FLUSH
00166E DD0E E1              10      POP HL
00166F DD0F 18C4            12      JR  SAVE_DRWC
                                
                                ;   ランダムブロックアクセスの連続したセクタをまとめたものをフラッシュする
       DD11                     DRW_FLUSH:
001671 DD11 C5              11      PUSH    BC
001672 DD12 D5              11      PUSH    DE
001673 DD13 010000          10      LD  BC,0
       DD14                     DRWF_C  EQU $-2
       DD15                     DRWF_B  EQU $-1
001676 DD16 78               4      LD  A,B
001677 DD17 B7               4      OR  A
001678 DD18 280D            12      JR  Z,DRDF1
00167A DD1A 110000          10      LD  DE,0
       DD1B                     DRWF_E  EQU $-2
       DD1C                     DRWF_D  EQU $-1
00167D DD1D 210000          10      LD  HL,0
       DD1E                     DRWF_HL EQU $-2
001680 DD20 AF               4      XOR A
001681 DD21 3215DD          13      LD  (DRWF_B),A
001684 DD24 CD41E0          17      CALL    DRD24B
       DD25                     DRWF_MODE   EQU $-2
       DD27                     DRDF1:
001687 DD27 D1              10      POP DE
001688 DD28 C1              10      POP BC
001689 DD29 C9              10      RET
[EOF:LDFILE2.ASM:SHIFT_JIS]
                                    INCLUDE "LDDIO.ASM"
                                
                                ;   LSX-Dodgers DIO
                                
       DD2A                     DRDX:
00168A DD2A CD68DD          17      CALL    DRDY
00168D DD2D C8              11      RET Z
00168E DD2E CD4EDD          17      CALL    DRDX1       ;データバッファの情報を保存
001691 DD31 D8              11      RET C
001692 DD32 E5              11      PUSH    HL
001693 DD33 C5              11      PUSH    BC
001694 DD34 D5              11      PUSH    DE
001695 DD35 2A7EE5          16      LD  HL,(_DTBUF)
001698 DD38 3A91DD          13      LD  A,(_DBS24)
00169B DD3B 4F               4      LD  C,A
00169C DD3C CD3FE0          17      CALL    DRD24
00169F DD3F DC63DD          17      CALL    C,DRDNE
       DD42                     POP_DE_BC_HL_RET:
0016A2 DD42 D1              10      POP DE
0016A3 DD43 C1              10      POP BC
0016A4 DD44 E1              10      POP HL
0016A5 DD45 C9              10      RET
                                
                                ;   CDE:セクタ番号
       DD46                     DRDN:
0016A6 DD46 AF               4      XOR A
0016A7 DD47 00               4  DRDN1:  NOP         ;自己書き換え NOP / SCF
0016A8 DD48 30E0            12      JR  NC,DRDX
       DD4A                     DRDNX:
0016AA DD4A CD68DD          17      CALL    DRDY
0016AD DD4D C8              11      RET Z
       DD4E                     DRDX1:
0016AE DD4E CD7EDD          17      CALL    DWTX
                                                ;データバッファの読み込んだドライブ・セクタ情報を保存
0016B1 DD51 ED53A6E4        20      LD  (_DBSEC),DE
0016B5 DD55 79               4      LD  A,C
0016B6 DD56 3291DD          13      LD  (_DBS24),A
                                
0016B9 DD59 3A88E4          13      LD  A,(_DRV)
0016BC DD5C 32A5E4          13      LD  (_DBDRV),A
0016BF DD5F CDD9E4          17      CALL    _CHGDRV
0016C2 DD62 D0              11      RET NC
       DD63                     DRDNE:
0016C3 DD63 9F               4      SBC A,A     ;CF=1ならばA=0FFH
0016C4 DD64 32A5E4          13      LD  (_DBDRV),A
0016C7 DD67 C9              10      RET
                                
                                ;   CDE:セクタ番号
       DD68                     DRDY:
0016C8 DD68 3A91DD          13      LD  A,(_DBS24)
0016CB DD6B B9               4      CP  C
0016CC DD6C C0              11      RET NZ
                                
0016CD DD6D E5              11      PUSH    HL
0016CE DD6E 3A88E4          13      LD  A,(_DRV)
0016D1 DD71 21A5E4          10      LD  HL,_DBDRV
0016D4 DD74 AE               7      XOR (HL)
0016D5 DD75 2005            12      JR  NZ,POP_HL_RET
                                
0016D7 DD77 2AA6E4          16      LD  HL,(_DBSEC)
0016DA DD7A ED52            15      SBC HL,DE       ;上でXORを使っているのでCF=0のはず
       DD7C                     POP_HL_RET:
0016DC DD7C E1              10      POP HL
0016DD DD7D C9              10      RET
                                
       DD7E                     DWTX:
0016DE DD7E 3AA4E4          13      LD  A,(_WTDBF)
0016E1 DD81 B7               4      OR  A
0016E2 DD82 C8              11      RET Z
0016E3 DD83 AF               4      XOR A
0016E4 DD84 32A4E4          13      LD  (_WTDBF),A
                                
0016E7 DD87 E5              11      PUSH    HL
0016E8 DD88 C5              11      PUSH    BC
0016E9 DD89 D5              11      PUSH    DE
0016EA DD8A 3AA5E4          13      LD  A,(_DBDRV)
0016ED DD8D CDD9E4          17      CALL    _CHGDRV
0016F0 DD90 0E00             7      LD  C,0
       DD91                     _DBS24  EQU $-1
0016F2 DD92 ED5BA6E4        20      LD  DE,(_DBSEC)
0016F6 DD96 2A7EE5          16      LD  HL,(_DTBUF)
0016F9 DD99 D44FE0          17      CALL    NC,DWT24
       DD9C                     POP_DE_BC_HL_RET2:
0016FC DD9C 18A4            12      JR  POP_DE_BC_HL_RET
                                
       DD9E                     RDFATX:
0016FE DD9E E5              11      PUSH    HL
0016FF DD9F 3A88E4          13      LD  A,(_DRV)
001702 DDA2 21AAE4          10      LD  HL,_FATDRV
001705 DDA5 AE               7      XOR (HL)
001706 DDA6 28D4            12      JR  Z,POP_HL_RET
                                
001708 DDA8 C5              11      PUSH    BC
001709 DDA9 D5              11      PUSH    DE
00170A DDAA DDE5            15      PUSH    IX
00170C DDAC CDC8DD          17      CALL    WTFATX
00170F DDAF 3813            12      JR  C,POP_IX_DE_BC_HL_RET
                                
001711 DDB1 AF               4      XOR A
001712 DDB2 32ABE4          13      LD  (_FATIX),A
001715 DDB5 3A88E4          13      LD  A,(_DRV)
001718 DDB8 32AAE4          13      LD  (_FATDRV),A
00171B DDBB CDE5E4          17      CALL    _RDFAT
       DDBE                     RDFATE2:
00171E DDBE 3004            12      JR  NC,POP_IX_DE_BC_HL_RET
001720 DDC0 9F               4      SBC A,A     ;A=0xFF
001721 DDC1 32AAE4          13      LD  (_FATDRV),A
       DDC4                     POP_IX_DE_BC_HL_RET:
001724 DDC4 DDE1            14      POP IX
001726 DDC6 18D4            12      JR  POP_DE_BC_HL_RET2
                                
       DDC8                     WTFATX:
001728 DDC8 3AA2E4          13      LD  A,(_WTFATF)
00172B DDCB B7               4      OR  A
00172C DDCC C8              11      RET Z
00172D DDCD E5              11      PUSH    HL
00172E DDCE 3AAAE4          13      LD  A,(_FATDRV)
001731 DDD1 21A5E4          10      LD  HL,_DBDRV
001734 DDD4 AE               7      XOR (HL)
001735 DDD5 CC7EDD          17      CALL    Z,DWTX
001738 DDD8 38A2            12      JR  C,POP_HL_RET
00173A DDDA C5              11      PUSH    BC
00173B DDDB D5              11      PUSH    DE
00173C DDDC DDE5            15      PUSH    IX
00173E DDDE CD5CE0          17      CALL    WTFAT
001741 DDE1 AF               4      XOR A
001742 DDE2 32A2E4          13      LD  (_WTFATF),A
001745 DDE5 18DD            12      JR  POP_IX_DE_BC_HL_RET
                                
       DDE7                     NCL1:
001747 DDE7 7A               4      LD  A,D
001748 DDE8 B3               4      OR  E
001749 DDE9 37               4      SCF
00174A DDEA C8              11      RET Z
                                
00174B DDEB 7A               4      LD  A,D
00174C DDEC CB3F             8      SRL A   ;/2
00174E DDEE CB3F             8      SRL A   ;/2
                                
001750 DDF0 E5              11      PUSH    HL
001751 DDF1 3210DE          13      LD  (NCLPAT_FATIX),A    ;_FATIX
001754 DDF4 2AAAE4          16      LD  HL,(_FATDRV)    ;L=_FATDRV H=_FATIX
001757 DDF7 BC               4      CP  H
001758 DDF8 3A88E4          13      LD  A,(_DRV)    ;LDではフラグは変化しない
00175B DDFB 320FDE          13      LD  (NCLPAT_FATDRV),A   ;_FATDRV
00175E DDFE 2005            12      JR  NZ,NCL2     ;FATIXが違う
001760 DE00 BD               4      CP  L
001761 DE01 2002            12      JR  NZ,NCL2     ;ドライブが違う
001763 DE03 E1              10      POP HL
001764 DE04 C9              10      RET
       DE05                     NCL2:
001765 DE05 C5              11      PUSH    BC
001766 DE06 D5              11      PUSH    DE
001767 DE07 DDE5            15      PUSH    IX
001769 DE09 CDC8DD          17      CALL    WTFATX
00176C DE0C 38B6            12      JR  C,POP_IX_DE_BC_HL_RET
00176E DE0E 010000          10      LD  BC,0        ;自己書き換え C=_FATDRV B=_FATIX
       DE10                     NCLPAT_FATIX    EQU $-1
       DE0F                     NCLPAT_FATDRV   EQU $-2
001771 DE11 ED43AAE4        20      LD  (_FATDRV),BC
001775 DE15 CD31E0          17      CALL    RDFATS
001778 DE18 18A4            12      JR  RDFATE2
                                
       DE1A                     NCL3:
00177A DE1A CB9A             8      RES 3,D
00177C DE1C CB92             8      RES 2,D
00177E DE1E 6B               4      LD  L,E
00177F DE1F 62               4      LD  H,D
001780 DE20 CB3C             8      SRL H   ;
001782 DE22 CB1D             8      RR  L   ;HLA=HLA/2
001784 DE24 1F               4      RRA     ;
001785 DE25 F5              11      PUSH    AF
001786 DE26 3AABE4          13      LD  A,(_FATIX)
001789 DE29 0F               4      RRCA
00178A DE2A 300B            12      JR  NC,NCL3X1
00178C DE2C 3A54DC          13      LD  A,(SECSZ+2)
00178F DE2F FE04             7      CP  4       ;1セクタ1024バイトの場合は奇数インデックスの場合に先頭を512バイトずらす
001791 DE31 2004            12      JR  NZ,NCL3X1
001793 DE33 010002          10      LD  BC,512
001796 DE36 09              11      ADD HL,BC
       DE37                     NCL3X1:
001797 DE37 F1              10      POP AF
001798 DE38 ED4B7CE5        20      LD  BC,(_FATBF)
00179C DE3C 19              11      ADD HL,DE
00179D DE3D 09              11      ADD HL,BC
00179E DE3E 17               4      RLA
00179F DE3F C9              10      RET
                                
       DE40                     GNCL:
0017A0 DE40 CDE7DD          17      CALL    NCL1        ;GET NEXT CLUSTER
0017A3 DE43 D8              11      RET C
0017A4 DE44 C5              11      PUSH    BC
0017A5 DE45 E5              11      PUSH    HL
0017A6 DE46 CD1ADE          17      CALL    NCL3
0017A9 DE49 3809            12      JR  C,GNC1
0017AB DE4B 5E               7      LD  E,(HL)
0017AC DE4C 23               6      INC HL
0017AD DE4D 7E               7      LD  A,(HL)
0017AE DE4E E60F             7      AND 00FH
0017B0 DE50 57               4      LD  D,A
0017B1 DE51 E1              10      POP HL
0017B2 DE52 C1              10      POP BC
0017B3 DE53 C9              10      RET
       DE54                     GNC1:
0017B4 DE54 7E               7      LD  A,(HL)
0017B5 DE55 23               6      INC HL
0017B6 DE56 56               7      LD  D,(HL)
0017B7 DE57 0604             7      LD  B,4
       DE59                     GNC1L:
0017B9 DE59 CB3A             8      SRL D   ;DA=DA/2
0017BB DE5B 1F               4      RRA     ;
0017BC DE5C 10FB            13      DJNZ    GNC1L
                                
0017BE DE5E 5F               4      LD  E,A
0017BF DE5F E1              10      POP HL
0017C0 DE60 C1              10      POP BC
0017C1 DE61 A7               4      AND A
0017C2 DE62 C9              10      RET
                                
       DE63                     SNCL:
0017C3 DE63 CDE7DD          17      CALL    NCL1
0017C6 DE66 D8              11      RET C
                                ;               SET NEXT CLUSTER
0017C7 DE67 E5              11      PUSH    HL
0017C8 DE68 C5              11      PUSH    BC
0017C9 DE69 D5              11      PUSH    DE
0017CA DE6A E5              11      PUSH    HL
0017CB DE6B CD1ADE          17      CALL    NCL3
0017CE DE6E D1              10      POP DE
                                ;CF=ODD
0017CF DE6F 7E               7      LD  A,(HL)
0017D0 DE70 73               7      LD  (HL),E
0017D1 DE71 3806            12      JR  C,SNC1
                                ;EVEN
                                ;M[0] = E
                                ;M[1] = (M[1] & 0xF0) | (D & 0x0F)
0017D3 DE73 23               6      INC HL
0017D4 DE74 ED67            18      RRD     ;M={A[3:0],E[3:0]}
0017D6 DE76 7A               4      LD  A,D
0017D7 DE77 1804            12      JR  SNC11
       DE79                     SNC1:
                                ;ODD
                                ;HL[0] = (HL[0]&0x0F) | (E<<4)
                                ;HL[1] = DE>>4
0017D9 DE79 ED6F            18      RLD     ;M={D[3:0],E[7:4]}
0017DB DE7B 23               6      INC HL
0017DC DE7C 72               7      LD  (HL),D  ;M={D[3:0],E[7:4]}
       DE7D                     SNC11:
0017DD DE7D ED6F            18      RLD     ;M={M[7:4],D[3:0]}
0017DF DE7F B7               4      OR  A
0017E0 DE80 D1              10      POP DE
0017E1 DE81 C1              10      POP BC
0017E2 DE82 E1              10      POP HL
       DE83                     FAT_CHANGED:
0017E3 DE83 3E01             7      LD  A,1
0017E5 DE85 32A2E4          13      LD  (_WTFATF),A
0017E8 DE88 C9              10      RET
                                
       DE89                     N16CL3:
0017E9 DE89 C5              11      PUSH    BC
0017EA DE8A 6B               4      LD  L,E
0017EB DE8B 7A               4      LD  A,D
0017EC DE8C E603             7      AND 3
0017EE DE8E 67               4      LD  H,A
0017EF DE8F 29              11      ADD HL,HL
0017F0 DE90 ED4B7CE5        20      LD  BC,(_FATBF)
0017F4 DE94 09              11      ADD HL,BC
0017F5 DE95 C1              10      POP BC
0017F6 DE96 C9              10      RET
                                
       DE97                     GNCL16:
0017F7 DE97 CDE7DD          17      CALL    NCL1        ;GET NEXT CLUSTER for FAT16
0017FA DE9A D8              11      RET C
0017FB DE9B E5              11      PUSH    HL
0017FC DE9C CD89DE          17      CALL    N16CL3
0017FF DE9F 5E               7      LD  E,(HL)
001800 DEA0 23               6      INC HL
001801 DEA1 56               7      LD  D,(HL)
001802 DEA2 E1              10      POP HL
001803 DEA3 C9              10      RET
                                
       DEA4                     SNCL16:
001804 DEA4 CDE7DD          17      CALL    NCL1        ;GET NEXT CLUSTER for FAT16
001807 DEA7 D8              11      RET C
001808 DEA8 D5              11      PUSH    DE
001809 DEA9 E5              11      PUSH    HL
00180A DEAA CD89DE          17      CALL    N16CL3
00180D DEAD D1              10      POP DE      ;HL
00180E DEAE 73               7      LD  (HL),E
00180F DEAF 23               6      INC HL
001810 DEB0 72               7      LD  (HL),D
001811 DEB1 6B               4      LD  L,E
001812 DEB2 62               4      LD  H,D
001813 DEB3 D1              10      POP DE
001814 DEB4 18CD            12      JR  FAT_CHANGED
                                
                                ;------------------------
                                ;次のセクタを探す際に_SECPSの値をチェック
                                ;in
                                ;   DE : セクタ番号
                                ;out
                                ;   DE : 次のセクタ番号
                                ;note
                                ;
                                ;------------------------
       DEB6                     NEXTX:
001816 DEB6 3E00             7      LD  A,0 ;自己書き換え
       DEB7                     _SECPS  EQU $-1
001818 DEB8 3C               4      INC A
001819 DEB9 E600             7      AND 0   ;自己書き換え　1クラスタの論理セクタ数-1
       DEBA                     _NCPAT  EQU $-1
00181B DEBB 32B7DE          13      LD  (_SECPS),A
00181E DEBE C9              10      RET
                                
       DEBF                     GNCLX:
00181F DEBF CDB6DE          17      CALL    NEXTX
001822 DEC2 C0              11      RET NZ  ;1クラスタのセクタ未満の場合は戻る
001823 DEC3 C3F7E4          10      JP  _GNCL   ;次のクラスタを探す
                                
       DEC6                     RDFAT:
001826 DEC6 3E80             7      LD  A,080H
001828 DEC8 3270E4          13      LD  (CHECK),A
       DECB                     RDFAT1:
00182B DECB 3A88E4          13      LD  A,(_DRV)
00182E DECE CD7AE1          17      CALL    CHGDRVR
001831 DED1 D8              11      RET C
001832 DED2 DD7E12          19      LD  A,(IX+DPB_DEVICE)
001835 DED5 CB6F             8      BIT 5,A
001837 DED7 2868            12      JR  Z,RDFAT0X
001839 DED9 2170E4          10      LD  HL,CHECK
00183C DEDC A6               7      AND (HL)
00183D DEDD 77               7      LD  (HL),A
00183E DEDE 110000          10      LD  DE,0        ;BPB
001841 DEE1 2A7CE5          16      LD  HL,(_FATBF)
001844 DEE4 CD3DE0          17      CALL    DRD16
001847 DEE7 3024            12      JR  NC,GETBPB
001849 DEE9 2170E4          10      LD  HL,CHECK
00184C DEEC CB06            15      RLC (HL)
00184E DEEE 3F               4      CCF
00184F DEEF D8              11      RET C
001850 DEF0 DDCB0A1E        23      RR  (IX+DPB_FDMODE)
001854 DEF4 3F               4      CCF         ;フロッピーディスクのFDモードを切り替える
001855 DEF5 DDCB0A16        23      RL  (IX+DPB_FDMODE)
001859 DEF9 3EFF             7      LD  A,0FFH
00185B DEFB 3289E4          13      LD  (_DSK),A
00185E DEFE 3A84E4          13      LD  A,(_DRIVE)
001861 DF01 E603             7      AND 3
001863 DF03 F680             7      OR  080H
001865 DF05 6F               4      LD  L,A
001866 DF06 26E4             7      LD  H,_CYL0/256
001868 DF08 3EFF             7      LD  A,0FFH
00186A DF0A 77               7      LD  (HL),A
00186B DF0B 18BE            12      JR  RDFAT1
       DF0D                     GETBPB:
00186D DF0D FDE5            15      PUSH    IY
00186F DF0F FD2A7CE5        20      LD  IY,(_FATBF) ;BPB
001873 DF13 CDF1E4          17      CALL    _BPB2DPB
001876 DF16 FDE1            14      POP IY
001878 DF18 DD7E12          19      LD  A,(IX+DPB_DEVICE)
00187B DF1B 3021            12      JR  NC,GETBPBOK
00187D DF1D E60F             7      AND 00FH
00187F DF1F FE07             7      CP  7
001881 DF21 37               4      SCF
001882 DF22 C0              11      RET NZ
001883 DF23 DDCB0A46        20      BIT 0,(IX+DPB_FDMODE)
001887 DF27 21C0E5          10      LD  HL,M2D
00188A DF2A 2002            12      JR  NZ,SETFDMODE
00188C DF2C 2ED2             7      LD  L,M2HD-STABLE
       DF2E                     SETFDMODE:
00188E DF2E DDE5            15      PUSH    IX
001890 DF30 D1              10      POP DE
001891 DF31 EDA0            16      LDI
001893 DF33 EDA0            16      LDI
001895 DF35 13               6      INC DE
001896 DF36 13               6      INC DE
001897 DF37 13               6      INC DE
001898 DF38 13               6      INC DE
001899 DF39 010C00          10      LD  BC,12
00189C DF3C EDB0                    LDIR
       DF3E                     GETBPBOK:
00189E DF3E CDE5E0          17      CALL    CHGDRV2
       DF41                     RDFAT0X:
0018A1 DF41 CD31E0          17      CALL    RDFATS
0018A4 DF44 D8              11      RET C
0018A5 DF45 DDAE06          19      XOR (IX+DPB_FATID)
0018A8 DF48 C8              11      RET Z
0018A9 DF49 DDCB126E        20      BIT 5,(IX+DPB_DEVICE)
0018AD DF4D C0              11      RET NZ      ;BPBを取得している場合はFATIDをチェックしない
0018AE DF4E 37               4      SCF
0018AF DF4F C9              10      RET
                                
       DF50                     POP_HL_SCF_RET:
0018B0 DF50 E1              10      POP HL
0018B1 DF51 37               4      SCF
0018B2 DF52 C9              10      RET
                                
       DF53                     BPB2DPB:
0018B3 DF53 FD7E0B          19      LD  A,(IY+11)   ;BPB_BytsPerSec
0018B6 DF56 B7               4      OR  A
0018B7 DF57 37               4      SCF
0018B8 DF58 C0              11      RET NZ
       DF59                     BPBOK:
0018B9 DF59 FD7E0D          19      LD  A,(IY+13)   ;BPB_SecPerClus
0018BC DF5C DD7707          19      LD  (IX+DPB_SECPCL),A
                                
0018BF DF5F FD7E16          19      LD  A,(IY+22)   ;BPB_FATSz16
0018C2 DF62 DD7700          19      LD  (IX+DPB_FATLN),A
0018C5 DF65 FD7E17          19      LD  A,(IY+23)   ;BPB_FATSz16
0018C8 DF68 DD7701          19      LD  (IX+DPB_FATLN+1),A
                                
0018CB DF6B FD6E0E          19      LD  L,(IY+14)   ;BPB_RsvdSecCnt
0018CE DF6E FD660F          19      LD  H,(IY+15)
0018D1 DF71 DD750E          19      LD  (IX+DPB_FATPS),L
0018D4 DF74 FD5E16          19      LD  E,(IY+22)   ;BPB_FATSz16
0018D7 DF77 FD5617          19      LD  D,(IY+23)
0018DA DF7A FD4610          19      LD  B,(IY+16)   ;BPB_NumFATs
       DF7D                     BPBDP1:             ;BPB_FATSz16 * BPB_NumFATs
0018DD DF7D 19              11      ADD HL,DE
0018DE DF7E 10FD            13      DJNZ    BPBDP1
       DF80                     BPBDP2:
0018E0 DF80 DD7510          19      LD  (IX+DPB_DIRPS),L
0018E3 DF83 DD7411          19      LD  (IX+DPB_DIRPS+1),H
0018E6 DF86 E5              11      PUSH    HL
                                
0018E7 DF87 FD6E11          19      LD  L,(IY+17)   ;BPB_RootEntCnt
0018EA DF8A FD6612          19      LD  H,(IY+18)
0018ED DF8D FD7E0C          19      LD  A,(IY+12)   ;BPB_BytsPerSec
0018F0 DF90 B7               4      OR  A
0018F1 DF91 28BD            12      JR  Z,POP_HL_SCF_RET
0018F3 DF93 0606             7      LD  B,6
       DF95                     BPBBPS1:
0018F5 DF95 05               4      DEC B
0018F6 DF96 0F               4      RRCA
0018F7 DF97 30FC            12      JR  NC,BPBBPS1
       DF99                     BPBDE1:
0018F9 DF99 29              11      ADD HL,HL
0018FA DF9A 10FD            13      DJNZ    BPBDE1
                                
0018FC DF9C 7C               4      LD  A,H
0018FD DF9D DD770B          19      LD  (IX+DPB_DIRSCNT),A  ;
                                
001900 DFA0 D1              10      POP DE      ;DPB_DIRPS
001901 DFA1 6C               4      LD  L,H
001902 DFA2 2600             7      LD  H,0
001904 DFA4 19              11      ADD HL,DE       ;MAXDIR
001905 DFA5 E5              11      PUSH    HL
001906 DFA6 FD4E0D          19      LD  C,(IY+13)   ;BPB_SecPerClus
001909 DFA9 CB21             8      SLA C       ;*2
00190B DFAB AF               4      XOR A
00190C DFAC 47               4      LD  B,A
00190D DFAD ED42            15      SBC HL,BC
00190F DFAF DD7514          19      LD  (IX+DPB_ADDCL),L
001912 DFB2 DD7415          19      LD  (IX+DPB_ADDCL+1),H
                                
001915 DFB5 D1              10      POP DE      ;DE=DPB_MAXDIR
001916 DFB6 FD6E13          19      LD  L,(IY+19)   ;BPB_TotSec16
001919 DFB9 FD6614          19      LD  H,(IY+20)
                                
00191C DFBC DD7E12          19      LD  A,(IX+DPB_DEVICE)
00191F DFBF E60F             7      AND 00FH
001921 DFC1 FE07             7      CP  7       ;フロッピー
001923 DFC3 2019            12      JR  NZ,NOT_FD
001925 DFC5 E5              11      PUSH    HL
001926 DFC6 FD4E18          19      LD  C,(IY+24)   ;BPB_SecPerTr
001929 DFC9 DD710D          19      LD  (IX+DPB_MAXSEC),C
00192C DFCC AF               4      XOR A
00192D DFCD CB21             8      SLA C       ;両面なのでセクタ数を２倍
00192F DFCF 0610             7      LD  B,16
       DFD1                     DIVSEC:             ;MAXCYL = BPB_TotSec16 / (BPB_SecPerTr * 2)
001931 DFD1 29              11      ADD HL,HL
001932 DFD2 17               4      RLA
001933 DFD3 B9               4      CP  C
001934 DFD4 3802            12      JR  C,DIVSEC1
001936 DFD6 91               4      SUB C
001937 DFD7 2C               4      INC L
       DFD8                     DIVSEC1:
001938 DFD8 10F7            13      DJNZ    DIVSEC
00193A DFDA DD750C          19      LD  (IX+DPB_MAXCYL),L
00193D DFDD E1              10      POP HL  ;ここまでフロッピー専用
       DFDE                     NOT_FD:
00193E DFDE 7C               4      LD  A,H
00193F DFDF B5               4      OR  L
001940 DFE0 3E00             7      LD  A,0     ;LDでフラグは変化しない。BPB_TotSec16を AHL で扱う為、Aに0を入れる
001942 DFE2 2010            12      JR  NZ,BPB16BIT ;BPB_TotSec16が「0」の場合はBPB_TotSec32で計算
001944 DFE4 FD7E23          19      LD  A,(IY+35)   ;念のために総セクタ数が24ビットを超える場合はエラーを返す
001947 DFE7 B7               4      OR  A
001948 DFE8 37               4      SCF
001949 DFE9 C0              11      RET NZ
00194A DFEA FD6E20          19      LD  L,(IY+32)   ;BPB_TotSec32 は AHL の24ビットで扱う
00194D DFED FD6621          19      LD  H,(IY+33)   ;1クラスタの論理セクタ数(DPB_SECPCL)が最大128なので
001950 DFF0 FD7E22          19      LD  A,(IY+34)   ;24ビットを超えると必ずクラスタ数が16ビットを超えてしまうのでこれで十分
001953 DFF3 A7               4      AND A       ;CF=0
       DFF4                     BPB16BIT:
001954 DFF4 ED52            15      SBC HL,DE
001956 DFF6 DE00             7      SBC A,0
001958 DFF8 FD460D          19      LD  B,(IY+13)   ;BPB_SecPerClus
       DFFB                     BPBTC1:             ;総クラスタ数(AHL) = 総セクタ数(AHL) / セクタサイズ(B)
00195B DFFB CB18             8      RR  B       ;->CY
00195D DFFD 3808            12      JR  C,BPBTC2
00195F DFFF CB3F             8      SRL A
001961 E001 CB1C             8      RR  H       ;AHL=AHL/2
001963 E003 CB1D             8      RR  L
001965 E005 18F4            12      JR  BPBTC1
       E007                     BPBTC2:
001967 E007 B7               4      OR  A
001968 E008 37               4      SCF
001969 E009 C0              11      RET NZ      ;念のため(クラスタ数が16ビットを超える場合)
00196A E00A 23               6      INC HL
00196B E00B 23               6      INC HL
00196C E00C DD7508          19      LD  (IX+DPB_MAXCL),L
00196F E00F DD7409          19      LD  (IX+DPB_MAXCL+1),H
                                
001972 E012 FD7E15          19      LD  A,(IY+21)   ;BPB_Media
001975 E015 DD7706          19      LD  (IX+DPB_FATID),A
                                
001978 E018 FD7E10          19      LD  A,(IY+16)   ;BPB_NumFATs
00197B E01B C6FE             7      ADD A,0-2       ;>2:CF=1
00197D E01D FD7E0C          19      LD  A,(IY+12)   ;BPB_BytsPerSec
001980 E020 6F               4      LD  L,A
001981 E021 3002            12      JR  NC,BPBFAT1
001983 E023 F680             7      OR  080H
       E025                     BPBFAT1:            ;ここではCF=0
001985 E025 DD770F          19      LD  (IX+DPB_BPS),A
001988 E028 2D               4      DEC L       ;以下のセクタサイズに合致しない場合はCF=1でエラーにする
001989 E029 C8              11      RET Z       ;1セクタ256バイト
00198A E02A 2D               4      DEC L
00198B E02B C8              11      RET Z       ;1セクタ512バイト
00198C E02C 2D               4      DEC L
00198D E02D 2D               4      DEC L
00198E E02E C8              11      RET Z       ;1セクタ1024バイト
00198F E02F 37               4      SCF
001990 E030 C9              10      RET
                                
       E031                     RDFATS:
001991 E031 CD77E0          17      CALL    FATSETUP
001994 E034 D8              11      RET C
001995 E035 CD41E0          17      CALL    DRD24B
001998 E038 2A7CE5          16      LD  HL,(_FATBF)
00199B E03B 7E               7      LD  A,(HL)
00199C E03C C9              10      RET
                                
       E03D                     DRD16:
00199D E03D 0E00             7      LD  C,0
       E03F                     DRD24:
00199F E03F 0601             7      LD  B,1
       E041                     DRD24B:
0019A1 E041 DDE5            15      PUSH    IX
0019A3 E043 DD2AA8E4        20      LD  IX,(_DPB)
0019A7 E047 CDBFE1          17      CALL    FDRD        ;自己書き換え（ディスク読み込み）
       E048                     DRDPAT  EQU $-2
       E04A                     POP_IX_RET:
0019AA E04A DDE1            14      POP IX
0019AC E04C C9              10      RET
                                
       E04D                     DWT16:
0019AD E04D 0E00             7      LD  C,0
       E04F                     DWT24:
0019AF E04F 0601             7      LD  B,1
       E051                     DWT24B:
0019B1 E051 DDE5            15      PUSH    IX
0019B3 E053 DD2AA8E4        20      LD  IX,(_DPB)
0019B7 E057 CDBDE1          17      CALL    FDWT        ;自己書き換え（ディスク書き込み）
       E058                     DWTPAT  EQU $-2
0019BA E05A 18EE            12      JR  POP_IX_RET
                                
       E05C                     WTFAT:
0019BC E05C CD77E0          17      CALL    FATSETUP
0019BF E05F D451E0          17      CALL    NC,DWT24B
0019C2 E062 D8              11      RET C
0019C3 E063 DDCB0F7E        20      BIT 7,(IX+DPB_BPS)
0019C7 E067 C8              11      RET Z       ;予備FATが無い
0019C8 E068 CD7EE0          17      CALL    FATS2
0019CB E06B E5              11      PUSH    HL      ;予備FAT
0019CC E06C DD6E00          19      LD  L,(IX+DPB_FATLN)
0019CF E06F DD6601          19      LD  H,(IX+DPB_FATLN+1)
0019D2 E072 19              11      ADD HL,DE
0019D3 E073 EB               4      EX  DE,HL
0019D4 E074 E1              10      POP HL
0019D5 E075 18DA            12      JR  DWT24B
                                ;------------------------
                                ;FATのセットアップ
                                ;out
                                ;   B  : FATセクタ数
                                ;   DE : FAT先頭セクタ番号
                                ;   HL : FATバッファポインタ
                                ;   CF : 1=ドライブ切り替えエラー
                                ;note
                                ;   FATサイズがFATバッファを超える場合は
                                ;   対象クラスタ領域==(_FATIX)によって
                                ;   FAT12:対象クラスタ1024毎に1.5KBを切り替える
                                ;   FAT16:対象クラスタ1024毎に2KBを切り替える
                                ;------------------------
       E077                     FATSETUP:
0019D7 E077 3AAAE4          13      LD  A,(_FATDRV)
0019DA E07A CD7AE1          17      CALL    CHGDRVR     ;ドライブ切り替え
0019DD E07D D8              11      RET C
       E07E                     FATS2:
0019DE E07E DD7E0F          19      LD  A,(IX+DPB_BPS)  ;512=2 1024=4
0019E1 E081 0F               4      RRCA
0019E2 E082 CDABE0          17      CALL    FATSETUP12  ;自己書き換え
       E083                     FATSX   EQU $-2
0019E5 E085 210000          10      LD  HL,0
0019E8 E088 4A               4      LD  C,D
0019E9 E089 54               4      LD  D,H
0019EA E08A 3AABE4          13      LD  A,(_FATIX)  ;範囲FAT12:0-3/FAT16:0-63(0-03FH):65535*2/2048
0019ED E08D 47               4      LD  B,A
0019EE E08E 04               4      INC B
0019EF E08F DD7E00          19      LD  A,(IX+DPB_FATLN)
       E092                     FAT_SKP:
0019F2 E092 05               4      DEC B
0019F3 E093 2805            12      JR  Z,FAT1
0019F5 E095 19              11      ADD HL,DE
0019F6 E096 93               4      SUB E
0019F7 E097 30F9            12      JR  NC,FAT_SKP
0019F9 E099 C9              10      RET
       E09A                     FAT1:
0019FA E09A EB               4      EX  DE,HL
0019FB E09B B9               4      CP  C       ;C=FATバッファに読み込めるセクタ数
0019FC E09C 3801            12      JR  C,FAT2
0019FE E09E 79               4      LD  A,C
       E09F                     FAT2:
0019FF E09F 47               4      LD  B,A
                                
001A00 E0A0 2AFAE5          16      LD  HL,(_FATPS) ;fat sector pos
001A03 E0A3 19              11      ADD HL,DE
001A04 E0A4 EB               4      EX  DE,HL
001A05 E0A5 2A7CE5          16      LD  HL,(_FATBF)
001A08 E0A8 AF               4      XOR A       ;CF=0
001A09 E0A9 4F               4      LD  C,A
001A0A E0AA C9              10      RET
                                ;
                                ;   FATバッファに読み込める最大のセクタ数と_FATIXで進めるセクタ数
                                ;   FATSETUP* (FAT12/FAT16)
                                ;out
                                ;   D : FATバッファに読み込める最大のセクタ数
                                ;   E : _FATIXで進めるセクタ数
       E0AB                     FATSETUP12:
001A0B E0AB 110606          10      LD  DE,0606H    ;256
001A0E E0AE D8              11      RET C
001A0F E0AF 110303          10      LD  DE,0303H    ;512
001A12 E0B2 0F               4      RRCA
001A13 E0B3 D8              11      RET C
001A14 E0B4 110102          10      LD  DE,0201H    ;1024
001A17 E0B7 C9              10      RET
                                
       E0B8                     FATSETUP16:
001A18 E0B8 110808          10      LD  DE,0808H    ;256
001A1B E0BB D8              11      RET C
001A1C E0BC 110404          10      LD  DE,0404H
001A1F E0BF 0F               4      RRCA            ;512
001A20 E0C0 D8              11      RET C
001A21 E0C1 110202          10      LD  DE,0202H    ;1024
001A24 E0C4 C9              10      RET
                                
       E0C5                     CHGDRV:
001A25 E0C5 E5              11      PUSH    HL
001A26 E0C6 2189E4          10      LD  HL,_DSK
001A29 E0C9 BE               7      CP  (HL)
001A2A E0CA 280A            12      JR  Z,CHGDRVE
       E0CC                     CHGDRV1:
001A2C E0CC DDE5            15      PUSH    IX
001A2E E0CE CDD8E0          17      CALL    CHGDRV0
001A31 E0D1 3A89E4          13      LD  A,(_DSK)
001A34 E0D4 DDE1            14      POP IX
       E0D6                     CHGDRVE:
001A36 E0D6 E1              10      POP HL
001A37 E0D7 C9              10      RET
                                
       E0D8                     CHGDRV0:
001A38 E0D8 6F               4      LD  L,A
001A39 E0D9 CDDCE4          17      CALL    _GETDPB
001A3C E0DC D8              11      RET C
001A3D E0DD DD22A8E4        20      LD  (_DPB),IX
001A41 E0E1 7D               4      LD  A,L
001A42 E0E2 3289E4          13      LD  (_DSK),A
       E0E5                     CHGDRV2:
001A45 E0E5 C5              11      PUSH    BC
001A46 E0E6 D5              11      PUSH    DE
001A47 E0E7 ED7330E1        20      LD  (SPPAT2),SP
001A4B E0EB F3               4      DI
001A4C E0EC DDF9            10      LD  SP,IX
                                
001A4E E0EE E1              10      POP HL      ;00:DPB_FATLN
001A4F E0EF E1              10      POP HL      ;02:DPB_DRD
001A50 E0F0 2248E0          16      LD  (DRDPAT),HL
                                
001A53 E0F3 E1              10      POP HL
001A54 E0F4 2258E0          16      LD  (DWTPAT),HL ;04:DPB_DWT
                                
001A57 E0F7 E1              10      POP HL      ;L=06:DPB_FATID H=07:DPB_SECPCL
001A58 E0F8 7C               4      LD  A,H
001A59 E0F9 324FD7          13      LD  (SPCPAT),A  ;1クラスタの論理セクタ数
001A5C E0FC 3D               4      DEC A
001A5D E0FD 32BADE          13      LD  (_NCPAT),A
                                
001A60 E100 E1              10      POP HL      ;08:DPB_MAXCL
001A61 E101 7D               4      LD  A,L
001A62 E102 326ED7          13      LD  (CLPAT2),A
001A65 E105 7C               4      LD  A,H
001A66 E106 326AD7          13      LD  (CLPAT1),A
001A69 E109 2B               6      DEC HL
001A6A E10A 226BD9          16      LD  (MAXCLP),HL
                                
001A6D E10D E1              10      POP HL      ;L=0A:DPB_FDMODE H=0B:DPB_DIRSCNT
001A6E E10E 4C               4      LD  C,H
                                
001A6F E10F E1              10      POP HL      ;L=0C:DPB_MAXCYL H=0D:DPB_MAXSEC
                                
001A70 E110 E1              10      POP HL      ;L=0E:DPB_FATPS H=0F:DPB_BPS
001A71 E111 7C               4      LD  A,H     ;DPB_BPS
001A72 E112 E607             7      AND 7
001A74 E114 3254DC          13      LD  (SECSZ+2),A ;1セクタのサイズの上位1バイト 0x400 - 0x200 - 0x100
                                                ;1セクタ512 2D/2DD/2HC/2HQ(2HD1.44MB)/EMM/BRAM/EMEM等
                                                ;1セクタ1024 2HD/2HDE98
                                                ;1セクタ256 GRAM/RAMF/CMOS/等
                                                ;1024   512 256
                                                ;4  2   1
001A77 E117 87               4      ADD A,A     ;8  4   2
001A78 E118 87               4      ADD A,A     ;010H   8   4
001A79 E119 87               4      ADD A,A     ;020H   010H    8
001A7A E11A 32CCD5          13      LD  (SDECPAT),A ;1セクタ辺りのディレクトリエントリ数
                                
001A7D E11D 2600             7      LD  H,0
001A7F E11F 22FAE5          16      LD  (_FATPS),HL
                                
001A82 E122 E1              10      POP HL      ;10:DPB_DIRPS
001A83 E123 22FCE5          16      LD  (_DIRPS),HL
                                
001A86 E126 E1              10      POP HL      ;L=12:DPB_DEVICE H=13:DPB_UNITNO
001A87 E127 7C               4      LD  A,H
001A88 E128 3284E4          13      LD  (_DRIVE),A
                                
001A8B E12B E1              10      POP HL      ;14:DPB_ADDCL
001A8C E12C 225FD7          16      LD  (CLSPAT),HL
                                
001A8F E12F 310000          10      LD  SP,0        ;元のSPを復元
       E130                     SPPAT2  EQU $-2
001A92 E132 FB               4      EI
001A93 E133 2AFCE5          16      LD  HL,(_DIRPS)
001A96 E136 0600             7      LD  B,0
001A98 E138 09              11      ADD HL,BC       ;C=DPB_DIRSCNT
001A99 E139 22E7D5          16      LD  (MD_PAT),HL
                                
001A9C E13C 2A6BD9          16      LD  HL,(MAXCLP);
001A9F E13F 11F60F          10      LD  DE,4086     ;クラスタ数が4086未満:FAT12 4086以上:FAT16
001AA2 E142 ED52            15      SBC HL,DE       ;CF=0のはず
001AA4 E144 300F            12      JR  NC,SETFAT16
001AA6 E146 2140DE          10      LD  HL,GNCL     ;FAT12
001AA9 E149 1163DE          10      LD  DE,SNCL
001AAC E14C 01ABE0          10      LD  BC,FATSETUP12
001AAF E14F DDCB0FAE        23      RES 5,(IX+DPB_BPS)  ;DPB_BPS(FAT12)
001AB3 E153 180D            12      JR  EXTRA1
       E155                     SETFAT16:
001AB5 E155 2197DE          10      LD  HL,GNCL16   ;FAT16
001AB8 E158 11A4DE          10      LD  DE,SNCL16
001ABB E15B 01B8E0          10      LD  BC,FATSETUP16
001ABE E15E DDCB0FEE        23      SET 5,(IX+DPB_BPS)  ;DPB_BPS(FAT16)
       E162                     EXTRA1:
001AC2 E162 22F8E4          16      LD  (GNCPAT),HL
001AC5 E165 ED53FBE4        20      LD  (SNCPAT),DE
001AC9 E169 ED4383E0        20      LD  (FATSX),BC
001ACD E16D D1              10      POP DE
001ACE E16E C1              10      POP BC
001ACF E16F AF               4      XOR A
001AD0 E170 C9              10      RET
                                
       E171                     GETDPBD:
001AD1 E171 DDE3            23      EX  (SP),IX
001AD3 E173 DDE5            15      PUSH    IX
001AD5 E175 3A88E4          13      LD  A,(_DRV)
001AD8 E178 1807            12      JR  GETDPB1
                                
       E17A                     CHGDRVR:
001ADA E17A CDD9E4          17      CALL    _CHGDRV
001ADD E17D D8              11      RET C
001ADE E17E 3A89E4          13      LD  A,(_DSK)
       E181                     GETDPB1:
001AE1 E181 C3DCE4          10      JP  _GETDPB
                                
       E184                     GETDPB:
001AE4 E184 FE08             7      CP  8
001AE6 E186 3F               4      CCF
001AE7 E187 D8              11      RET C
001AE8 E188 0F               4      RRCA
001AE9 E189 0F               4      RRCA
001AEA E18A 0F               4      RRCA
001AEB E18B DD                      DB  0DDH        ;Z80未定義命令
001AEC E18C 6F               4      LD  L,A     ;LD IXL,A
001AED E18D DD                      DB  0DDH        ;Z80未定義命令
001AEE E18E 26E6             7      LD  H,_DEVICE/256   ;LD IXH,_DEVICE/256
001AF0 E190 DD7E00          19      LD  A,(IX+DPB_FATLN)
001AF3 E193 A7               4      AND A       ;CF=0の為
001AF4 E194 DDCB0F6E        20      BIT 5,(IX+DPB_BPS)
001AF8 E198 C0              11      RET NZ      ;FAT16
001AF9 E199 DDCB126E        20      BIT 5,(IX+DPB_DEVICE)
001AFD E19D C0              11      RET NZ      ;BPB
001AFE E19E FE01             7      CP  001H        ;A=0 THEN CF=1
001B00 E1A0 C9              10      RET
                                
       E1A1                     _SYS5F:
001B01 E1A1 AF               4      XOR A
       E1A2                     FFLUSH:
001B02 E1A2 F5              11      PUSH    AF
001B03 E1A3 CDC8DD          17      CALL    WTFATX
001B06 E1A6 AF               4      XOR A
001B07 E1A7 32ABE4          13      LD  (_FATIX),A
001B0A E1AA 2F               4      CPL         ;0FFH
001B0B E1AB 32AAE4          13      LD  (_FATDRV),A
001B0E E1AE 3E                      DB  03EH        ;次のPUSH AFをスキップ
       E1AF                     FFLUSHBUF:
001B0F E1AF F5              11      PUSH    AF
001B10 E1B0 CD7EDD          17      CALL    DWTX
001B13 E1B3 3EFF             7      LD  A,0FFH
001B15 E1B5 3239E4          13      LD  (SFILE),A
001B18 E1B8 32A5E4          13      LD  (_DBDRV),A
001B1B E1BB F1              10      POP AF
001B1C E1BC C9              10      RET
                                
[EOF:LDDIO.ASM:SHIFT_JIS]
                                    INCLUDE "MSXDISK.ASM"
                                
                                ;   LSX-Dodgers DISK
                                ;   MSX
                                
                                ;   ROM DISK DRIVER
                                ;   1セクタ可変(256/512/1024)
                                
       E1BD                     WTTRK:
       E1BD                     FDWT:
001B1D E1BD 37               4      SCF
001B1E E1BE C9              10      RET
       E1BF                     FDRD:
001B1F E1BF ED7350E2        20      LD  (DRDSP),SP
001B23 E1C3 3A51E2          13      LD  A,(DRDSPH)  ;スタックがカートリッジと被っていないかチェック
001B26 E1C6 FE7F             7      CP  07FH
001B28 E1C8 3807            12      JR  C,FDRD1
001B2A E1CA FEC1             7      CP  0C1H
001B2C E1CC 3003            12      JR  NC,FDRD1
001B2E E1CE 315EF5          10      LD  SP,BUF
       E1D1                     FDRD1:
001B31 E1D1 C5              11      PUSH    BC
001B32 E1D2 D5              11      PUSH    DE
                                
001B33 E1D3 E5              11      PUSH    HL
001B34 E1D4 EB               4      EX  DE,HL
001B35 E1D5 DD460F          19      LD  B,(IX+DPB_BPS)
       E1D8                     EADR1:
001B38 E1D8 CB18             8      RR  B
001B3A E1DA 3803            12      JR  C,EADR2
001B3C E1DC 29              11      ADD HL,HL
001B3D E1DD 18F9            12      JR  EADR1
       E1DF                     EADR2:
001B3F E1DF E5              11      PUSH    HL  ;あとでDEで受け取る
001B40 E1E0 29              11      ADD HL,HL   ;64KB→32KB
001B41 E1E1 29              11      ADD HL,HL   ;32KB→16KB
       E1E2                     ASCII16K1:
001B42 E1E2 29              11      ADD HL,HL   ;16KB→8KB  ;ASCII-16Kの場合はここがNOPに置き換えられる
                                
001B43 E1E3 DD7E0C          19      LD  A,(IX+DPB_MAXCYL)   ;16KB単位でカートリッジ内のディスクが存在する位置を指定
       E1E6                     ASCII16K2:
001B46 E1E6 87               4      ADD A,A         ;ASCII-16Kの場合はここがNOPに置き換えられる
001B47 E1E7 84               4      ADD A,H
001B48 E1E8 5F               4      LD  E,A
001B49 E1E9 3A62E4          13      LD  A,(ROM_SLT)
001B4C E1EC 210070          10      LD  HL,BANK2_SEL
       E1ED                     ROM8000H    EQU $-2
001B4F E1EF CDF8D2          17      CALL    WRSLT
                                
001B52 E1F2 2680             7      LD  H,080H
001B54 E1F4 3A62E4          13      LD  A,(ROM_SLT) ;カートリッジROMに切り替える
001B57 E1F7 CD6BD3          17      CALL    ENASLT
                                
001B5A E1FA D1              10      POP DE
001B5B E1FB E1              10      POP HL      ;HLは読み出し先のメモリアドレス
                                
001B5C E1FC 7B               4      LD  A,E
001B5D E1FD E61F             7      AND 01FH        ;セグメントのサイズでフィルタする(8K:1F/16K:3F)
       E1FE                     ASCII16K3   EQU $-1
001B5F E1FF 1E00             7      LD  E,0     ;DEはROMディスクから読み出すアドレス
001B61 E201 C680             7      ADD A,080H
001B63 E203 57               4      LD  D,A
                                
001B64 E204 3E                      DB  03EH
001B65 E205 A7               4      AND A
001B66 E206 3233E2          13      LD  (DRD_SWC3),A
001B69 E209 7C               4      LD  A,H     ;読み出し先がカートリッジと被っていないかチェック
001B6A E20A FE7B             7      CP  07BH
001B6C E20C 3812            12      JR  C,DRD2
001B6E E20E FEC1             7      CP  0C1H
001B70 E210 300E            12      JR  NC,DRD2
001B72 E212 223AE2          16      LD  (DRD_SWC1),HL   ;被っている場合はデータバッファをフラッシュして一時的に使う
001B75 E215 2100EF          10      LD  HL,DTBUF
001B78 E218 3E                      DB  03EH
001B79 E219 37               4      SCF
001B7A E21A 3233E2          13      LD  (DRD_SWC3),A
001B7D E21D CDAFE1          17      CALL    FFLUSHBUF
       E220                     DRD2:
001B80 E220 DD7E0F          19      LD  A,(IX+DPB_BPS)  ;BCは読み出すセクタサイズ
001B83 E223 E607             7      AND 7
001B85 E225 47               4      LD  B,A
001B86 E226 4B               4      LD  C,E ;E=0
                                
001B87 E227 EB               4      EX  DE,HL
001B88 E228 EDB0                    LDIR
001B8A E22A D5              11      PUSH    DE
001B8B E22B 2680             7      LD  H,080H
001B8D E22D 3A43F3          13      LD  A,(0F341H+2)    ;メインRAMに戻す
001B90 E230 CD6BD3          17      CALL    ENASLT
       E233                     DRD_SWC3:
001B93 E233 A7               4      AND A       ;自己書き換え)被っている場合はSCFになる
001B94 E234 3012            12      JR  NC,DRD3
                                
001B96 E236 2100EF          10      LD  HL,DTBUF
001B99 E239 110000          10      LD  DE,0
       E23A                     DRD_SWC1    EQU $-2
001B9C E23C DD7E0F          19      LD  A,(IX+DPB_BPS)  ;BCは読み出すセクタサイズ
001B9F E23F E607             7      AND 7
001BA1 E241 47               4      LD  B,A
001BA2 E242 0E00             7      LD  C,0
001BA4 E244 EDB0                    LDIR
001BA6 E246 E1              10      POP HL
001BA7 E247 D5              11      PUSH    DE
       E248                     DRD3:
001BA8 E248 E1              10      POP HL
001BA9 E249 D1              10      POP DE
001BAA E24A 13               6      INC DE
001BAB E24B C1              10      POP BC
001BAC E24C 1083            13      DJNZ    FDRD1
001BAE E24E AF               4      XOR A
001BAF E24F 310000          10      LD  SP,0
       E250                     DRDSP   EQU $-2
       E251                     DRDSPH  EQU $-1
001BB2 E252 FB               4      EI
001BB3 E253 C9              10      RET
                                
       E254                     PDWT:
001BB4 E254 37               4      SCF
001BB5 E255 CB7C             8      BIT 7,H
001BB7 E257 2056            12      JR  NZ,PDWX
001BB9 E259 CDAFE1          17      CALL    FFLUSHBUF
       E25C                     PDWT1:
001BBC E25C C5              11      PUSH    BC
001BBD E25D D5              11      PUSH    DE
001BBE E25E 1100EF          10      LD  DE,DTBUF
001BC1 E261 DD7E0F          19      LD  A,(IX+DPB_BPS)  ;BCは読み出すセクタサイズ
001BC4 E264 E607             7      AND 7
001BC6 E266 47               4      LD  B,A
001BC7 E267 0E00             7      LD  C,0
001BC9 E269 EDB0                    LDIR
001BCB E26B E5              11      PUSH    HL
001BCC E26C 2100EF          10      LD  HL,DTBUF
001BCF E26F 0601             7      LD  B,1
001BD1 E271 37               4      SCF
001BD2 E272 CDAFE2          17      CALL    PDWX
001BD5 E275 3834            12      JR  C,PDRWERR
001BD7 E277 E1              10      POP HL
001BD8 E278 D1              10      POP DE
001BD9 E279 13               6      INC DE
001BDA E27A C1              10      POP BC
001BDB E27B 10D7            13      DJNZ    PDWT
001BDD E27D AF               4      XOR A
001BDE E27E C9              10      RET
       E27F                     PDRD:
001BDF E27F A7               4      AND A
001BE0 E280 CB7C             8      BIT 7,H
001BE2 E282 202B            12      JR  NZ,PDWX
001BE4 E284 CDAFE1          17      CALL    FFLUSHBUF
       E287                     PDRD1:
001BE7 E287 C5              11      PUSH    BC
001BE8 E288 D5              11      PUSH    DE
001BE9 E289 E5              11      PUSH    HL
001BEA E28A 2100EF          10      LD  HL,DTBUF
001BED E28D 0601             7      LD  B,1
001BEF E28F A7               4      AND A
001BF0 E290 CDAFE2          17      CALL    PDWX
001BF3 E293 3816            12      JR  C,PDRWERR
001BF5 E295 D1              10      POP DE
001BF6 E296 2100EF          10      LD  HL,DTBUF
001BF9 E299 DD7E0F          19      LD  A,(IX+DPB_BPS)  ;BCは読み出すセクタサイズ
001BFC E29C E607             7      AND 7
001BFE E29E 47               4      LD  B,A
001BFF E29F 0E00             7      LD  C,0
001C01 E2A1 EDB0                    LDIR
001C03 E2A3 EB               4      EX  DE,HL
001C04 E2A4 D1              10      POP DE
001C05 E2A5 13               6      INC DE
001C06 E2A6 C1              10      POP BC
001C07 E2A7 10D6            13      DJNZ    PDRD
001C09 E2A9 AF               4      XOR A
001C0A E2AA C9              10      RET
       E2AB                     PDRWERR:
001C0B E2AB E1              10      POP HL
001C0C E2AC D1              10      POP DE
001C0D E2AD C1              10      POP BC
001C0E E2AE C9              10      RET
       E2AF                     PDWX:                   ;CF=0 READ CF=1 WRITE
001C0F E2AF DDCB1266        20      BIT 4,(IX+DPB_DEVICE)   ;デバイス情報
001C13 E2B3 2003            12      JR  NZ,PDWX1
001C15 E2B5 DD4E06          19      LD  C,(IX+DPB_FATID)    ;メディアバイト
       E2B8                     PDWX1:
001C18 E2B8 DD7E13          19      LD  A,(IX+DPB_UNITNO)   ;デバイスドライバ内におけるユニット番号
001C1B E2BB C5              11      PUSH    BC
001C1C E2BC D5              11      PUSH    DE
001C1D E2BD E5              11      PUSH    HL
001C1E E2BE DDE5            15      PUSH    IX
001C20 E2C0 FDE5            15      PUSH    IY
001C22 E2C2 CDA7FF          17      CALL    H_PHYD
001C25 E2C5 FDE1            14      POP IY
001C27 E2C7 DDE1            14      POP IX
001C29 E2C9 E1              10      POP HL
001C2A E2CA D1              10      POP DE
001C2B E2CB C1              10      POP BC
001C2C E2CC D8              11      RET C
       E2CD                     PDWX2:
001C2D E2CD 13               6      INC DE
001C2E E2CE DD7E0F          19      LD  A,(IX+DPB_BPS)  ;BCは読み出すセクタサイズ
001C31 E2D1 E607             7      AND 7
001C33 E2D3 84               4      ADD A,H
001C34 E2D4 67               4      LD  H,A
001C35 E2D5 10F6            13      DJNZ    PDWX2
001C37 E2D7 AF               4      XOR A
001C38 E2D8 C9              10      RET
[EOF:MSXDISK.ASM:UTF_8]
                                    INCLUDE "LDCCPWK.ASM"
                                
                                ;   LSX-Dodgers CCP WORK
                                
       003B                     PATHX   EQU 59
001C39 E2D9                     PATHD:  DS  PATHX
001C74 E314 00                  PATHE:  DB  0
                                
       E315                     DTA_CCP:
001C75 E315                         DS  37
                                
       E33A                     FCB_BAT:
001C9A E33A                         DS  37
                                
001CBF E35F 2020203C4449523E    DIRMES: DB  "   <DIR>  $"
            202024              
001CCA E36A 20667265652024      FREE:   DB  " free $"
[EOF:LDCCPWK.ASM:UTF_8]
                                    INCLUDE "LDWORK.ASM"
                                
                                ;   LSX-Dodgers WORK0
                                ;
                                ;   CP/M互換BIOS
                                ;   BOOT:アドレス下位1バイトが0になるように
       E371                     AT_WORK:
001CD1 E371                         DS  WORKAD-AT_WORK
                                
       E400                     CPM_BOOT:
001D60 E400 C30000          10      JP  0
       E403                     _SYS00:     ;(BDOS)プログラム終了
       E403                     CPM_WBOOT:
001D63 E403 C309C9          10      JP  WBOOT1
       E406                     CPM_CONST:
001D66 E406 C351D1          10      JP  CONSTX
       E409                     _SYS07:     ;(BDOS)コンソール直接入力
       E409                     CPM_CONIN:
001D69 E409 C372D0          10      JP  FLGET
       E40C                     CPM_CONOUT:
001D6C E40C C3F5D1          10      JP  CONOUT1
                                
       E40F                     DECBF:              ;10進数表示時のバッファ(5バイト)
001D6F E40F                         DS  5
       E40F                     RR_BUF_HL   EQU DECBF   ;CP/M互換ファイルアクセスの際のランダムレコードの一時的な保管場所
       E411                     RR_BUF_A    EQU DECBF+2 ;計3バイト
                                
001D74 E414 00                  FDRV:   DB  0
001D75 E415                     FNAME:  DS  36
001D99 E439                     SFILE:  DS  33      ;DRV FILENAME
                                
001DBA E45A                         DS  3
                                
001DBD E45D 0000                LEFTX:  DW  0
001DBF E45F 0000                DTAX:   DW  0
                                
       E461                     ZERO:
       E461                     BEEPD:
001DC1 E461 008E01000B000C10        DB  0,08EH,1,0,00BH,0,00CH,010H
001DC9 E469 073E08100D00FF          DB  007H,03EH,008H,010H,00DH,0,0FFH
       E462                     RTC_YY  EQU BEEPD+1
       E463                     RTC_MW  EQU BEEPD+2
       E464                     RTC_DD  EQU BEEPD+3
       E465                     RTC_TT  EQU BEEPD+4
       E466                     RTC_MM  EQU BEEPD+5
       E467                     RTC_SS  EQU BEEPD+6
       E462                     ROM_SLT EQU BEEPD+1
                                
001DD0 E470 00                  CHECK:  DB  0
                                
001DD1 E471 4F4B24              OK: DB  "OK$"
001DD4 E474                         DS  5
001DD9 E479 4572726F722124      COMERM: DB  "Error!$"
                                ;   システムワークエリア
                                ;   _CYL0:アドレス下位1バイトが080Hになるように
001DE0 E480 FF                  _CYL0:  DB  0FFH    ;Cylinder
001DE1 E481 FF                  _CYL1:  DB  0FFH    ;Cylinder
001DE2 E482 FF                  _CYL2:  DB  0FFH    ;Cylinder
001DE3 E483 FF                  _CYL3:  DB  0FFH    ;Cylinder
001DE4 E484 00                  _DRIVE: DB  0   ;unit number
001DE5 E485 00                  _SEEKSP:DB  0   ;Seek speed
001DE6 E486 FF                  _ISEEK: DB  0FFH    ;
001DE7 E487 00                  _DVSW:  DB  0
001DE8 E488 00                  _DRV:   DB  0
001DE9 E489 FF                  _DSK:   DB  0FFH
001DEA E48A 8000                _DTA:   DW  00080H
001DEC E48C 0000                _CTC:   DW  0
001DEE E48E 0000                _TXADR: DW  0
001DF0 E490 0000                _KEYPS: DW  0
001DF2 E492 00FF                _KEYD:  DW  0FF00H  ;キーデータ
001DF4 E494 0000                _KEYSP: DB  KEYSP_L,KEYSP_H ;オートリピートの速度
001DF6 E496 00                  _COLORF:DB  COLORF  ;色
001DF7 E497 19                  _LINE:  DB  LINE
                                
001DF8 E498 0000                _FCB:   DW  0   ;SEARCH FILES
001DFA E49A 0000                _FBPS:  DW  0   ;    //
001DFC E49C 0000                _FBAD:  DW  0   ;    //
001DFE E49E 00                  _FBCNT: DB  0   ;    //
001DFF E49F 00                  _FILEN: DB  0   ;    //
001E00 E4A0 00                  _DIRF:  DB  0   ;bit7:ディレクトリ bit0-6:セクタインデックス
001E01 E4A1                         DS  1
001E02 E4A2 00                  _WTFATF:DB  0   ;FATバッファの更新フラグ
001E03 E4A3                         DS  1
001E04 E4A4 00                  _WTDBF: DB  0   ;データバッファの更新フラグ
001E05 E4A5 FF                  _DBDRV: DB  0FFH    ;データバッファにあるデータを読み込んだドライブ
001E06 E4A6 0000                _DBSEC: DW  0   ;データバッファにあるデータを読み込んだセクタ番号
001E08 E4A8 0000                _DPB:   DW  0
       E4AA                     _FATDRV:
001E0A E4AA FF                      DB  0FFH    ;FATバッファに読み込んでいるドライブ
001E0B E4AB 00                  _FATIX: DB  0   ;FATバッファに読み込んでいるインデックス
       E4AC                     _FAKEFREE:
001E0C E4AC 0000                    DW  0   ;偽の残量（FATサイズが大きくなると重くなるのでその対策）
                                
001E0E E4AE                         DS  2
                                
       E4B0                     CRTCD:
001E10 E4B0 6F                      DB  06FH
       E4B1                     _WIDTH:
001E11 E4B1 28                      DB  WIDTH
       E4B2                     TVRAMTOP:
001E12 E4B2 5938                    DB  059H,038H
001E14 E4B4 1F02                    DB  01FH,002H
       E4B6                     _LINE2:
001E16 E4B6 19                      DB  019H
       E4B7                     WKE4:
001E17 E4B7 1C                      DB  01CH
       E4B8                     WKE6:
001E18 E4B8 00                      DB  000H
       E4B9                     WK40:
001E19 E4B9 07                      DB  007H
       E4BA                     _PAGE_MINUS:
001E1A E4BA 18FC                    DW  0-WIDTH*LINE
       E4BC                     _WIDTH_MINUS:
001E1C E4BC D8FF                    DW  0-WIDTH
       E4BE                     WK30:
001E1E E4BE 0C                      DB  00CH
       E4BF                     WK31:
       E4BF                     WK1FD0:
001E1F E4BF 20                      DB  020H
                                
001E20 E4C0 0000                CTC0:   DW  INTCTCE
001E22 E4C2 0000                CTC1:   DW  INTCTCE
001E24 E4C4 0000                CTC2:   DW  INTCTCE
001E26 E4C6 0000                CTC3:   DW  INTCTCE
001E28 E4C8 0000                INTVEC: DW  INT
                                
                                ;   LSX-Dodgers 独自BIOS
                                
001E2A E4CA C3B7D0          10  _INKEY: JP  INKEY
001E2D E4CD C3F8CF          10  _PRINT: JP  PRINT
001E30 E4D0 C38FD1          10  _SCRN:  JP  SCRN
001E33 E4D3 C36FD1          10  _POS:   JP  POS
001E36 E4D6 C37AD1          10  _LOC:   JP  LOC
       E4D9                     _CHGDRV:
001E39 E4D9 C3C5E0          10      JP  CHGDRV
       E4DC                     _GETDPB:
001E3C E4DC C384E1          10      JP  GETDPB
       E4DF                     _FFLUSH:
001E3F E4DF C3A2E1          10      JP  FFLUSH
       E4E2                     _RDFATX:
001E42 E4E2 C39EDD          10      JP  RDFATX
001E45 E4E5 C3C6DE          10  _RDFAT: JP  RDFAT
001E48 E4E8 C3BDE1          10  _WTTRK: JP  WTTRK
001E4B E4EB C3BFE1          10  _FDRD:  JP  FDRD
001E4E E4EE C3BDE1          10  _FDWT:  JP  FDWT
       E4F1                     _BPB2DPB:
001E51 E4F1 C353DF          10      JP  BPB2DPB
       E4F4                     _BREAK:
001E54 E4F4 C388CA          10      JP  END_BATCH
       E4F7                     _GNCL:
001E57 E4F7 C340DE          10      JP  GNCL        ; self-modifying code
       E4F8                     GNCPAT  EQU $-2
       E4FA                     _SNCL:
001E5A E4FA C363DE          10      JP  SNCL        ; self-modifying code
       E4FB                     SNCPAT  EQU $-2
001E5D E4FD C341C9          10  _COMANL:JP  COMANL
                                
       E500                     _WE:
[EOF:LDWORK.ASM:SHIFT_JIS]
                                    INCLUDE "LDCALL.ASM"
                                
                                ;   LSX-Dodgers システムコール(BDOS)
                                ;
                                ;   LSX-Dodgers SYSTEM CALL
                                ;   STABLE:アドレス下位1バイトが0になるように
                                
       E500                     STABLE:
                                ;0
001E60 E500 03E4FBCF2CD0F9D5        DW  _SYS00,_SYS01,_SYS02,_SYS03
001E68 E508 67CD67CD31D009E4        DW  _SYS04,_SYS05,_SYS06,_SYS07
001E70 E510 39D069CDBDD051D1        DW  _SYS08,_SYS09,_SYS0A,_SYS0B
001E78 E518 7ECD83CD92CDA3CD        DW  _SYS0C,_SYS0D,_SYS0E,_SYS0F
                                ;1
001E80 E520 F7CD3ECE87CEB8CE        DW  _SYS10,_SYS11,_SYS12,_SYS13
001E88 E528 C0CED6CEEBCEE3CE        DW  _SYS14,_SYS15,_SYS16,_SYS17
001E90 E530 32CF37CF3CCF42CF        DW  _SYS18,_SYS19,_SYS1A,_SYS1B
001E98 E538 67CD68CF67CD6CCF        DW  _SYS1C,_SYS1D,_SYS1E,_SYS1F
                                ;2
001EA0 E540 67CD22CF2ACF73CF        DW  _SYS20,_SYS21,_SYS22,_SYS23
001EA8 E548 99CF67CD72DA4ADB        DW  _SYS24,_ERROR,_SYS26,_SYS27
001EB0 E550 2ACFA2CF63D1F9D5        DW  _SYS28,_SYS29,_SYS2A,_SYS2B
001EB8 E558 69D1F9D567CDC3CF        DW  _SYS2C,_SYS2D,_SYS2E,_SYS2F
                                ;3
001EC0 E560 BDCF67CD67CD67CD        DW  _SYS30,_ERROR,_ERROR,_ERROR
001EC8 E568 67CD67CD67CD67CD        DW  _ERROR,_ERROR,_ERROR,_ERROR
001ED0 E570 67CDF9D5F9D5E4CF        DW  _ERROR,_SYS39,_SYS3A,_SYS5A
                                ;DOS2
001ED8 E578 4ACD                    DW  _DOS2
                                
001EDA E57A                         DS  2
001EDC E57C 00E7                _FATBF: DW  FATBF
001EDE E57E 00EF                _DTBUF: DW  DTBUF
                                
                                ;   コントロールコードテーブル
                                ;   CTRLTB:アドレス下位1バイトが080Hになるように
                                
       E580                     CTRLTB:
001EE0 E580 000000009FD10000        DW  CTRL00,CTRL00,CTRL02,CTRL03 ;  A,B,C
001EE8 E588 0000000000000000        DW  CTRL04,CTRL05,CTRL06,CTRL07 ;D,E,F,G
001EF0 E590 0000000000000000        DW  CTRL08,CTRL09,CTRL0A,CTRL0B ;H,I,J,K
001EF8 E598 0000000000000000        DW  CTRL0C,CTRL0D,CTRL0E,CTRL00 ;L,M,N,O
001F00 E5A0 0000000000000000        DW  CTRL00,CTRL00,CTRL12,CTRL00 ;P,Q,R,S
001F08 E5A8 0000000000000000        DW  CTRL00,CTRL00,CTRL00,CTRL00 ;T,U,V,W
001F10 E5B0 0000000000000000        DW  CTRL00,CTRL00,CTRL0C,CTRL1B ;X,Y,Z,ESC
001F18 E5B8 0000000000000000        DW  CTRL1C,CTRL1D,CTRL1E,CTRL1F ;→,←,↑,↓
                                
001F20 E5C0 0200                M2D:    DW  2
001F22 E5C2 FD02                    DB  0FDH,2
001F24 E5C4 6401                    DW  356
001F26 E5C6 FF0728090182            DB  0FFH,7,40,9,1,082H
001F2C E5CC 0500A7000800            DW  5,0A7H,8
                                
001F32 E5D2 0200                M2HD:   DW  2
001F34 E5D4 FE01                    DB  0FEH,1
001F36 E5D6 C704                    DW  1223
001F38 E5D8 FE064D080184            DB  0FEH,6,77,8,1,084H
001F3E E5DE 0500A7000900            DW  5,0A7H,9
                                
001F44 E5E4 1617                SDDATA: DB  22,23       ;(FCB)ファイルを最後に変更した時刻
001F46 E5E6 1415                    DB  20,21       ;(FCB)ファイルを最後に変更した日付
001F48 E5E8 1A1B                    DB  26,27       ;(FCB)ファイルの先頭クラスタ
001F4A E5EA 10111213                DB  16,17,18,19 ;(FCB)ファイルのサイズ(バイト単位)
       E5EE                     SDDATAE:
                                
001F4E E5EE                         DS  2
       E5F0                     _FCB_BAT:
001F50 E5F0 3AE3                    DW  FCB_BAT
       E5F2                     _PATH:
001F52 E5F2 D9E2                    DW  PATHD
                                
001F54 E5F4                     SCDIR:  DS  2       ;+14 +15
001F56 E5F6                     SFBPS:  DS  2       ;FBPS
001F58 E5F8                     SFNDF:  DS  2       ;FILEN DIRF
                                
001F5A E5FA 0000                _FATPS: DW  0
001F5C E5FC 0000                _DIRPS: DW  0
001F5E E5FE 0000                _CLPS:  DW  0
                                
       E600                     _PE:
[EOF:LDCALL.ASM:SHIFT_JIS]
                                    INCLUDE "MSXDPB.ASM"
                                
                                ;   LSX-Dodgers DPB
                                ;   MSX
                                
       E600                     _DEVICE:
                                
                                ;   A:
                                
001F60 E600 0300                    DW  3   ;DPB_FATLN
001F62 E602 EBE4                    DW  _FDRD   ;DPB_DRD
001F64 E604 EEE4                    DW  _FDWT   ;DPB_DWT
001F66 E606 F9                      DB  0F9H    ;DPB_FATID
001F67 E607 03                      DB  3   ;DPB_SECPCL
001F68 E608 CB02                    DW  715 ;DPB_MAXCL
001F6A E60A 00                      DB  0   ;DPB_FDMODE
001F6B E60B 07                      DB  7   ;DPB_DIRSCNT
001F6C E60C 01                      DB  1   ;DPB_MAXCYL ROMディスクではBPPが格納されている先頭BANK
001F6D E60D 00                      DB  0   ;DPB_MAXSEC
001F6E E60E 01                      DB  1   ;DPB_FATPS
001F6F E60F 82                      DB  082H    ;DPB_BPS
001F70 E610 0700                    DW  7   ;DPB_DIRPS
001F72 E612 2C                      DB  02CH    ;DPB_DEVICE
001F73 E613 00                      DB  0   ;DPB_UNITNO
001F74 E614 0A00                    DW  10  ;DPB_ADDCL
001F76 E616 0000                    DW  0   ;DPB_16
001F78 E618 0000                    DW  0   ;DPB_18
001F7A E61A 0000                    DW  0   ;DPB_SDIR
001F7C E61C 524F4D30                DB  "ROM0"  ;DPB_NAME
                                
                                ;   B:
                                
001F80 E620 0300                    DW  3   ;DPB_FATLN
001F82 E622 EBE4                    DW  _FDRD   ;DPB_DRD
001F84 E624 EEE4                    DW  _FDWT   ;DPB_DWT
001F86 E626 F9                      DB  0F9H    ;DPB_FATID
001F87 E627 03                      DB  3   ;DPB_SECPCL
001F88 E628 CB02                    DW  715 ;DPB_MAXCL
001F8A E62A 00                      DB  0   ;DPB_FDMODE
001F8B E62B 07                      DB  7   ;DPB_DIRSCNT
001F8C E62C 2E                      DB  46  ;DPB_MAXCYL ROMディスクではBPPが格納されている先頭BANK
001F8D E62D 00                      DB  0   ;DPB_MAXSEC
001F8E E62E 01                      DB  1   ;DPB_FATPS
001F8F E62F 82                      DB  082H    ;DPB_BPS
001F90 E630 0700                    DW  7   ;DPB_DIRPS
001F92 E632 2C                      DB  02CH    ;DPB_DEVICE
001F93 E633 01                      DB  1   ;DPB_UNITNO
001F94 E634 0A00                    DW  10  ;DPB_ADDCL
001F96 E636 0000                    DW  0   ;DPB_16
001F98 E638 0000                    DW  0   ;DPB_18
001F9A E63A 0000                    DW  0   ;DPB_SDIR
001F9C E63C 524F4D31                DB  "ROM1"  ;DPB_NAME
                                
                                ;   C:
                                
001FA0 E640                         DS  32
                                
                                ;   D:
                                
001FC0 E660                         DS  32
                                
                                ;   E:
                                
001FE0 E680 0300                    DW  3   ;DPB_FATLN
001FE2 E682 7FE2                    DW  PDRD    ;DPB_DRD
001FE4 E684 54E2                    DW  PDWT    ;DPB_DWT
001FE6 E686 F9                      DB  0F9H    ;DPB_FATID
001FE7 E687 03                      DB  3   ;DPB_SECPCL
001FE8 E688 CB02                    DW  715 ;DPB_MAXCL
001FEA E68A FF                      DB  0FFH    ;DPB_FDMODE
001FEB E68B 07                      DB  7   ;DPB_DIRSCNT
001FEC E68C 50                      DB  80  ;DPB_MAXCYL ROMディスクではBPPが格納されている先頭BANK
001FED E68D 09                      DB  9   ;DPB_MAXSEC
001FEE E68E 01                      DB  1   ;DPB_FATPS
001FEF E68F 82                      DB  082H    ;DPB_BPS
001FF0 E690 0700                    DW  7   ;DPB_DIRPS
001FF2 E692 2C                      DB  02CH    ;DPB_DEVICE
001FF3 E693 00                      DB  0   ;DPB_UNITNO
001FF4 E694 0A00                    DW  10  ;DPB_ADDCL
001FF6 E696 0000                    DW  0   ;DPB_16
001FF8 E698 0000                    DW  0   ;DPB_18
001FFA E69A 0000                    DW  0   ;DPB_SDIR
001FFC E69C 44534B30                DB  "DSK0"  ;DPB_NAME
                                
                                ;   F:
                                
002000 E6A0 0300                    DW  3   ;DPB_FATLN
002002 E6A2 7FE2                    DW  PDRD    ;DPB_DRD
002004 E6A4 54E2                    DW  PDWT    ;DPB_DWT
002006 E6A6 F9                      DB  0F9H    ;DPB_FATID
002007 E6A7 03                      DB  3   ;DPB_SECPCL
002008 E6A8 CB02                    DW  715 ;DPB_MAXCL
00200A E6AA FF                      DB  0FFH    ;DPB_FDMODE
00200B E6AB 07                      DB  7   ;DPB_DIRSCNT
00200C E6AC 50                      DB  80  ;DPB_MAXCYL ROMディスクではBPPが格納されている先頭BANK
00200D E6AD 09                      DB  9   ;DPB_MAXSEC
00200E E6AE 01                      DB  1   ;DPB_FATPS
00200F E6AF 82                      DB  082H    ;DPB_BPS
002010 E6B0 0700                    DW  7   ;DPB_DIRPS
002012 E6B2 2C                      DB  02CH    ;DPB_DEVICE
002013 E6B3 01                      DB  1   ;DPB_UNITNO
002014 E6B4 0A00                    DW  10  ;DPB_ADDCL
002016 E6B6 0000                    DW  0   ;DPB_16
002018 E6B8 0000                    DW  0   ;DPB_18
00201A E6BA 0000                    DW  0   ;DPB_SDIR
00201C E6BC 44534B31                DB  "DSK1"  ;DPB_NAME
                                
                                ;   G:
                                
002020 E6C0 0300                    DW  3   ;DPB_FATLN
002022 E6C2 7FE2                    DW  PDRD    ;DPB_DRD
002024 E6C4 54E2                    DW  PDWT    ;DPB_DWT
002026 E6C6 F9                      DB  0F9H    ;DPB_FATID
002027 E6C7 03                      DB  3   ;DPB_SECPCL
002028 E6C8 CB02                    DW  715 ;DPB_MAXCL
00202A E6CA FF                      DB  0FFH    ;DPB_FDMODE
00202B E6CB 07                      DB  7   ;DPB_DIRSCNT
00202C E6CC 50                      DB  80  ;DPB_MAXCYL ROMディスクではBPPが格納されている先頭BANK
00202D E6CD 09                      DB  9   ;DPB_MAXSEC
00202E E6CE 01                      DB  1   ;DPB_FATPS
00202F E6CF 82                      DB  082H    ;DPB_BPS
002030 E6D0 0700                    DW  7   ;DPB_DIRPS
002032 E6D2 2C                      DB  02CH    ;DPB_DEVICE
002033 E6D3 02                      DB  2   ;DPB_UNITNO
002034 E6D4 0A00                    DW  10  ;DPB_ADDCL
002036 E6D6 0000                    DW  0   ;DPB_16
002038 E6D8 0000                    DW  0   ;DPB_18
00203A E6DA 0000                    DW  0   ;DPB_SDIR
00203C E6DC 44534B32                DB  "DSK2"  ;DPB_NAME
                                
                                ;   H:
002040 E6E0 0300                    DW  3   ;DPB_FATLN
002042 E6E2 7FE2                    DW  PDRD    ;DPB_DRD
002044 E6E4 54E2                    DW  PDWT    ;DPB_DWT
002046 E6E6 F9                      DB  0F9H    ;DPB_FATID
002047 E6E7 03                      DB  3   ;DPB_SECPCL
002048 E6E8 CB02                    DW  715 ;DPB_MAXCL
00204A E6EA FF                      DB  0FFH    ;DPB_FDMODE
00204B E6EB 07                      DB  7   ;DPB_DIRSCNT
00204C E6EC 50                      DB  80  ;DPB_MAXCYL ROMディスクではBPPが格納されている先頭BANK
00204D E6ED 09                      DB  9   ;DPB_MAXSEC
00204E E6EE 01                      DB  1   ;DPB_FATPS
00204F E6EF 82                      DB  082H    ;DPB_BPS
002050 E6F0 0700                    DW  7   ;DPB_DIRPS
002052 E6F2 2C                      DB  02CH    ;DPB_DEVICE
002053 E6F3 07                      DB  7   ;DPB_UNITNO
002054 E6F4 0A00                    DW  10  ;DPB_ADDCL
002056 E6F6 0000                    DW  0   ;DPB_16
002058 E6F8 0000                    DW  0   ;DPB_18
00205A E6FA 0000                    DW  0   ;DPB_SDIR
00205C E6FC 44534B37                DB  "DSK7"  ;DPB_NAME
       E700                     MSX_E:
[EOF:MSXDPB.ASM:UTF_8]
                                
002060 E700                         DS  03FFFH - $$
003FFF 069F 00                      DB  0
       06A0                     LAST_ADR:
                                
                                    END
[EOF:MSX.ASM:UTF_8]
